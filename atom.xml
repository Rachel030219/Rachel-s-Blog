<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rachel&#39;s Blog | Rachel030219</title>
  
  <subtitle>Where dreams converge</subtitle>
  <link href="https://blog.rachelt.one/atom.xml" rel="self"/>
  
  <link href="https://blog.rachelt.one/"/>
  <updated>2022-05-19T18:47:36.816Z</updated>
  <id>https://blog.rachelt.one/</id>
  
  <author>
    <name>Rachel030219</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刷写 vBIOS 途中断电，我的自救复盘</title>
    <link href="https://blog.rachelt.one/articles/saving-a-vbios-corrupted-gpu/"/>
    <id>https://blog.rachelt.one/articles/saving-a-vbios-corrupted-gpu/</id>
    <published>2022-05-19T17:37:13.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>a.k.a. 《一个学生不带脑子刷 vBIOS，这是他的显卡发生的变化》</p></blockquote><h2 id="太长不看："><a href="#太长不看：" class="headerlink" title="太长不看："></a>太长不看：</h2><p>若 N 卡在刷 vBIOS 的过程中遭遇意外断电，随后主板自检反复重启，例如 DRAM - CPU - VGA 灯轮流亮，请寻找 <strong>能够亮机并且拥有 PCIe 槽的设备</strong> ，例如使用核显、亮机卡或者雷电接口显卡坞，开机过程中按住 Esc + C 进入 Windows 安全模式（或任意恢复系统，至少要阻止 NVIDIA 驱动加载），确定设备管理器中列出了损坏的显卡，再使用 nVFlash 刷回 <strong>备份的原 vBIOS</strong> 。</p><p>如果没有核显，则可能需要将坏卡接在主板的副 PCIe x16 槽位上。我将亮机卡接在副槽上时，主槽上接坏卡则仍然会反复重启；交换后才能正常启动。</p><p>如果亮机卡也是 N 卡，在刷写原 vBIOS 时需要手动指定设备序号：首先执行 <code>nvflash64.exe --list</code> ，此时应当会出现一个列表，其中格式如下：</p><span id="more"></span><pre><code>&lt;0&gt; Graphics Card:XXXX……&lt;1&gt; 亮机卡型号:XXXX……</code></pre><p>这其中没有型号的显卡就是我们要救的卡，它的 index 此时为 0，假设备份的文件是 <code>XXX.rom</code> ，执行 <code>nvflash64.exe --index=0 -6 XXX.rom</code> 即可。</p><p>如果没有备份原 vBIOS，或者设备管理器 &#x2F; <code>nvflash64.exe --list</code> 中没有看到显卡，则推荐寻求显卡制造商的帮助。</p><h2 id="吃了什么堑"><a href="#吃了什么堑" class="headerlink" title="吃了什么堑"></a>吃了什么堑</h2><p>接下来就是更加琐碎的部分：整件事的复盘。我会将 <strong>一些关键步骤</strong> 标记出来，并且附上相应的解释，希望至少能让我自己记住哪些应该多做，哪些应该尽量避免。</p><p>前几天换掉原来用的丐 ATX 机箱，投入了先马趣造的怀抱。把所有线材一通乱理、机箱往桌面一搁，折腾完毕后烤机看散热时，我发现一个此前因为机箱在桌下而感受不到的问题：这玩意儿太 ** 吵了！</p><p>一通排查后发现，显卡的风扇控制不太妙。超过某个温度阈值后它直接满速狂飙，温度降到室温或者都停不住它的转动，必须完全断电再开机才能恢复到智能转速。MSI Afterburner、HWiNFO64 和 TechPowerUp GPU-Z 都没能读出风扇转速（一直为 0），尝试用 MSI Afterburner 控制时则会直接飙到满速。</p><p>于是 <strong>第一次犯傻</strong> ：我怀疑是不是这显卡，影驰 2060 大将，根本没有带风扇智能启停功能。毕竟这是一张丐版卡，资料都搜不到多少，我也做好了它没有带高级功能的准备。根据 <a href="https://www.chiphell.com/thread-1925230-1-1.html">Chiphell 上这篇帖子</a> 所述，似乎这一特性确实因 vBIOS 而异，所以我说干就干。</p><blockquote><p>事实上这并不是风扇智能启停的问题，而是风扇控制器的问题。负载低的情况下风扇转速是正常的，说明显卡至少还在自己控制转速，而为何转速高起来之后无法降下去，就是一个未解之谜了。</p></blockquote><p>到 <a href="https://www.techpowerup.com/vgabios/">TechPowerUp VGA Bios Collection</a> 上找好顺眼的 vBIOS 后，我非常理智地 <strong>使用 GPU-Z 备份好原有的 vBIOS</strong> ，随后进入带网络的安全模式，刷写新的 vBIOS 并且下好最新的 NVIDIA 驱动，使用 <a href="https://www.guru3d.com/files-details/display-driver-uninstaller-download.html"><ruby><rb>DDU</rb><rt>Display Driver Uninstaller</rt></ruby></a> 卸载系统上原有的驱动后重启，发现在安装驱动后显卡输出直接黑屏。</p><p>这当然不对劲嘛，还好我备份了一份 vBIOS，能直接刷回去。于是我如法炮制，重启到安全模式， <strong>第二次犯傻</strong> ：先使用 DDU 卸载并重启，卸到一半才意识到没有回刷 vBIOS 并慌忙开始刷。我 <strong>以为</strong> 驱动卸载会和此前一样耗时，而 vBIOS 只有 1MB 大，能够抢在重启前完成，没想到驱动没有完整安装，DDU 很快完成工作。当我意识到这一点时已经覆水难收，我看着 nVFlash 的进度条走到 20% 左右时突然黑屏，随后进入开头所述的重启循环。</p><p>眼看着对穷学生来说价格不菲的一张卡这样离我而去，我自然没有善罢甘休。我的 CPU 是不带核显的 5600X，显卡坞也已于数月前出掉，幸好此时主板上还有一根空闲的 PCIe 2.0x16 插槽（x4 速率、与第二根 M.2 冲突），并且出掉显卡坞前从家里拆来一张亮机卡 GT720 带来学校用于测试，它成了我唯一的希望。</p><p>我首先尝试将亮机卡插在这根空闲的副槽上，结果是无法启动，推测可能是 M.2 冲突，或者主槽的显卡没有拔掉。不管怎么样，要动第二根 M.2 就必须移除主槽的坏卡，所以我干脆直接连坏卡带硬盘一起去掉，然后见到了 1024x768 分辨率的熟悉锁屏界面。</p><p>此时「好耶」还太早，启动只是第一步，我还需要带着两块显卡一起启动。将坏卡插回主槽后，我再次尝试启动，结果又进入了重启循环。看起来之前插亮机卡不启动的问题很明确：主槽插着显卡的情况下，主板会尝试优先使用主槽显卡，若主槽显卡故障则不管副槽插没插卡都不会启动。</p><p>既然如此，只要是神志清楚的正常人都能想到：那我交换一下两张卡不就好？可惜， <strong>我的脑回路似乎有一点不正常</strong> ，我选择尝试 PCIe 热插拔。由于趣造是 ITX 大小的机箱，它下方没有留出额外空间，副槽插不下双槽高的显卡，要交换两张卡就必须拆出主板。「那也太麻烦了」，我心想，于是我先把亮机卡插入主槽启动进系统，试图 <strong>拔掉亮机卡并直接插入坏卡</strong> 。坏卡进槽的一瞬间，我看到了 PCIe 槽中打出的电弧。**我 *** 。</p><p>万幸，这张主板还算靠谱，这么折腾都没有坏，只是在打出电弧的一瞬间触发保护重启。不过我也不敢再来第二次，果断拆出主板，亮机卡插主槽坏卡插副槽，成功进入 Windows 安全模式。后续的操作很简单，确认设备管理器中认出显卡，确认 nVFlash 认出显卡，确认刷入 vBIOS 到坏卡，DDU 卸载驱动+重启，重新安装主板并理线，好耶！很有趣的是，这么一圈折腾下来，这破风扇控制器居然莫名其妙恢复了正常，真是咄咄怪事。</p><h2 id="长了什么智"><a href="#长了什么智" class="headerlink" title="长了什么智"></a>长了什么智</h2><p>要二次确认。不是说 <em>Yes, do as I say!</em> 这种很可能不会看的工具提示，即使 nVFlash 在刷写前提示我三次要不要继续，我依旧想都没想选 Yes；「二次确认」是指干什么要在脑子里想明白，确认风险概率极低（例如除非全寝断电否则不可能突然重启）再行动。</p><p>备份十分重要。没有此前备份的 vBIOS，我的显卡大概在刷到其他厂商的 vBIOS 后已经寄了。之前很多次数据丢失也是以为无害的操作，不知哪一天就会变成杀「机」利器。这也进一步让我产生配置一台 NAS，或者至少是阵列柜 &#x2F; 备份服务器的冲动。</p><p>要断电。热插拔显卡相较之下还算安全，至少最多干掉显卡不会干掉我，不过如果未来有朝一日我开着电修市电电路，可能送走的不只有一点钱，还要搭上我自己。</p><p>不要嫌麻烦。如果有看起来更麻烦但是怎么都更合理的选项，麻烦完全可以接受。因为「不合理」带来更多麻烦，那才是因小失大、自找麻烦。</p><p>没有了。希望我踩的坑能给读到这里的各位带来一点帮助。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;a.k.a. 《一个学生不带脑子刷 vBIOS，这是他的显卡发生的变化》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;太长不看：&quot;&gt;&lt;a href=&quot;#太长不看：&quot; class=&quot;headerlink&quot; title=&quot;太长不看：&quot;&gt;&lt;/a&gt;太长不看：&lt;/h2&gt;&lt;p&gt;若 N 卡在刷 vBIOS 的过程中遭遇意外断电，随后主板自检反复重启，例如 DRAM - CPU - VGA 灯轮流亮，请寻找 &lt;strong&gt;能够亮机并且拥有 PCIe 槽的设备&lt;/strong&gt; ，例如使用核显、亮机卡或者雷电接口显卡坞，开机过程中按住 Esc + C 进入 Windows 安全模式（或任意恢复系统，至少要阻止 NVIDIA 驱动加载），确定设备管理器中列出了损坏的显卡，再使用 nVFlash 刷回 &lt;strong&gt;备份的原 vBIOS&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;如果没有核显，则可能需要将坏卡接在主板的副 PCIe x16 槽位上。我将亮机卡接在副槽上时，主槽上接坏卡则仍然会反复重启；交换后才能正常启动。&lt;/p&gt;
&lt;p&gt;如果亮机卡也是 N 卡，在刷写原 vBIOS 时需要手动指定设备序号：首先执行 &lt;code&gt;nvflash64.exe --list&lt;/code&gt; ，此时应当会出现一个列表，其中格式如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="vBIOS" scheme="https://blog.rachelt.one/tags/vBIOS/"/>
    
    <category term="GPU" scheme="https://blog.rachelt.one/tags/GPU/"/>
    
    <category term="NVIDIA" scheme="https://blog.rachelt.one/tags/NVIDIA/"/>
    
    <category term="硬件" scheme="https://blog.rachelt.one/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>2022 年，使用 Windows Phone 7 天</title>
    <link href="https://blog.rachelt.one/articles/living-with-WP-for-7-days-in-2022/"/>
    <id>https://blog.rachelt.one/articles/living-with-WP-for-7-days-in-2022/</id>
    <published>2022-05-06T01:47:19.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>小众、多彩、塑料机身、Windows 内核、微软打造，在这些词条的加持下，我对 Lumia 的兴趣，早在《丧尸围城：瞭望塔》见到 Lumia 的身影，对 Lumia 1020 标志性的镜头模组印象深刻之前就已经产生。后来，Android 和 iOS 分庭抗礼，前者在一些方面越来越糟糕，这没能解决 Windows Phone 的颓势，却是我「润」到 Windows Phone 的首次冲动。直到前几天，在二手🐴看到一台崭崭新的 1020，我毫不犹豫果断下了单。</p><p>拿到手后才知道，这台设备没那么美好。它被排除在 Windows 10 更新列表外， <ruby><rb>Windows Phone</rb><rt>WP</rt></ruby> 8.1 的支持早已结束，它已经无法再通过设备内渠道获得软件更新，同时还存在诸多问题及 bug。尽管如此，我尝试了将它作为主力机七天，并将历程与感受记录如下，以期帮助每一个渴望踏入这个坑的人。</p><blockquote><p>本文全长约 5000 字，阅读约需 12 分钟，内含少量插图和致死量吐槽，请谨慎食用。</p></blockquote><span id="more"></span><h2 id="微软弃子"><a href="#微软弃子" class="headerlink" title="微软弃子"></a>微软弃子</h2><p>先详细说说「诸多问题及 bug」。微软在 WP8 停止支持的 FAQ 上说，「We have no current plans to remove historical Windows Phone 8.1 updates from Windows Update」，他们不打算移除 WP8.1 的已有更新，因此理论上现存的 WP8.1 设备应当仍然可以通过系统内更新升级到最新版本。</p><p>那可真是太低估微软了。他们的确没有移除已有更新，但他们 <em>似乎改变了服务器的 TLS &#x2F; SSL 行为 &#x2F; 版本</em> （未经考证），使所有的老设备试图从 Windows Update 获取更新时都会报奇怪的错误。没有更新就没有更新吧，难道 WP8.1 不能用吗？还真…不能用。Windows Phone 的商店随着支持结束一起关闭了，此前的所有 Windows Phone 应用全都不能从官方渠道下载。如果没有一定的动手能力，目前还搭载 WP8.1 的设备与功能机无异。</p><p>微软账户没死，可 WP8.1 的微软账户登录死了。无论使用何种网络，何时何地均提示「无法登录，请检查网络」。这可是一台和微软生态深度绑定的智能机啊，一旦脱离了商店和微软账户，和 PC 无缝同步的功能就不复存在，许多应用根本打不开，它彻底沦为了一台能联网的功能机。与此同时，目前手机业务卖身 HMD 的 Nokia 自然不会维护微软时代 Lumia 用户的服务器，因此系统设置里 Nokia 相关的在线功能同样完全残废。</p><p>好在，除 Nokia 和微软账户外，它没有辜负微软亲儿子的身份，还提供了对 Exchange 协议的支持。这使我能够在不登入微软账户的情况下，使用 Exchange 协议同步我微软账户上的数据，不过这仅限个人账户，每当我试图绑定 Office 365 账户时，纵使我身怀十八般武艺，面对不断跳出的「账户信息错误」还是无可奈何；Google 则更有意思，目前还能够跳转至登录、授权页面，可一旦按下「允许该应用访问您的个人信息」页面的允许，它就白屏了，不知是否是跳转页面已经被撤掉；IMAP &#x2F; POP 总可以吧？不太可以，添加上之后它就一直处于「同步中」状态，无法停止、不能编辑 &#x2F; 删除账户，断网、飞行模式、重启都没能帮助我把这个卡死在账户页的 Google 删掉，似乎只能靠手动摸进系统文件，或者清除数据才能解决。</p><p>系统的问题还不止这些。WP8.1 拥有三个大版本更新，在这三个更新之间系统版本号极其琐碎，并且能更新到哪个版本完全取决于微软的心情。例如我手上的港版黄色 Lumia 1020 ，型号是 RM-875，产品号是 <code>059T7B0</code> ，刷入系统镜像后默认是 WP8.1（无 Update），版本号是 <code>8.10.12393.890</code> ，固件号是 <code>3051.50009.1424.0003</code> ，理论上可以请求更新到 Lumia 1020 最后一个大版本更新 WP8.1 Update 1 (GDR1)，但不知什么原因持续报错，强行推送更新后直接循环重启；在交流群求助后把它刷到「某个更高的固件号」，比如新加坡版黄色 <code>059T657</code> ，固件号 <code>3051.50009.1424.0016</code> ，这才手动更新到了 WP8.1 Update 1，版本号 <code>8.10.14112.123</code> 。</p><p>此时，根据微软的说法，我正在使用 Lumia Denim 版本，但系统内 extras &amp; info 应用显示的仍然是 Lumia Cyan：事实证明，微软根本就没有把这些东西集成在系统更新中，如果需要更新这一堆乱七八糟的系统组件及依赖，我仍然需要 WP 商店，可是微软啊，我商店呢？</p><p>既然已经走到这一步了，那就一不做二不休，干脆升到最新版 WP8.1 Update 2 (GDR2) 吧！我应该怎么做呢？首先，我需要修改注册表，让微软的更新工具以为我是另一台设备（在这里我修改成了 Highscreen WinWin）；然后，我需要重新请求更新；这倒是很顺利，我一路更新到了… <code>8.10.15137.148</code> 。</p><p>微软啊微软，你后面明明更新了 <code>8.10.15148.160</code> 是吧，我的设备是可以接收到 Update 2 这最后一版大版本更新是吧，那你让我多更新一个小版本是会断只手吗？？</p><h2 id="一线生机"><a href="#一线生机" class="headerlink" title="一线生机"></a>一线生机</h2><p>虽然微软放弃了 WP8.1，来自民间的各路大神还没有。Telegram <a href="https://t.me/W8Mobile">@W8Mobile</a> 交流群组中，极其完善的各种教程、工具、软件包甚至游戏备份，以及乐于助人有求必应的管理员、群友们，在我折腾这台机器的时候给了我莫大的帮助，教会了我怎么使用 PC 对 WP 设备 <ruby><rb>OTC</rb><rt>Over-The-Cable</rt></ruby> 更新，怎么解锁 bootloader、获取 root 权限、开启 sideload、修改注册表；还有一些网站收录了许多软件包，例如 <a href="https://www.appx4fun.com/">Appx4Fun</a> 和 <a href="https://file.windowsviet.com/">Windows Viet</a> ，尤其是 <a href="https://www.dospy.wang/">DOSPY论坛</a> 提供了大量的国产软件包及中文教程，我的 QQ、网易云音乐等都来自那里。</p><p>舞台搭好，演员就位，在使用 Lumia 1020 with Windows® Phone 8.1 Update 2 <code>8.10.15137.148</code> 的七天中，我的体验如何？</p><h2 id="艰难求生"><a href="#艰难求生" class="headerlink" title="艰难求生"></a>艰难求生</h2><p>经过一番复杂的折腾，终于是进入了正常使用的体验。先来说说可能对国内用户最重要的部分：</p><h3 id="国产软件"><a href="#国产软件" class="headerlink" title="国产软件"></a>国产软件</h3><p>很显然，某个张小龙开发的、小而美的绿色屎早已抛弃了对 Windows Phone 的支持，不过我一直以来的习惯是不在主力机上装屎，另有一台 iPhone 专门用来塞国产带风控不可信的软件（俗称养蛊）。对于没有备用机的国内用户，它已经输了：只带它没有健康码，根本出不了门。</p><p>QQ 4.9.2.568 居然仍然能够正常使用倒是在我意料之外，这个版本的 QQ 最大的问题是没有撤回和推送，必须手动点开才能收消息，就当是「你的健康数字生活」吧，变相大幅减少了我看手机的频率；它没有表情同步，不过支持收藏表情，还内置了一些 Emoji，再加上微软键盘自带的那些，够用了；最让我惊喜的是它甚至还能打 QQ 电话、逛空间，尽管是浏览器（而且是 IE 11），简单的浏览还是没有问题；它的一些设计和特性我甚至希望在现代 QQ 上仍然能看到，比如聊天界面右上角会展示最新一条消息的来源，点击可以直接跳转，还有着正常的展示逻辑（非群助手消息 &gt; 群助手消息，不会让群消息挤掉私聊），聊天页面从右向左滑还能呼出最近使用的聊天，不用伸手够返回键、不用等主页在卡顿中加载，可以一键跳转，以及极其优雅的主页，Windows Phone 常见的大头标题设计简直是业界之光，Material 摆烂 Cupertino 毫无长进的今天的业界清流；不过我的两个账号只能登录主力号，较新的小号一直登录失败，它的主页也并不完美，卡顿是家常便饭，有时还会有奇怪的问题，比如点击的位置和响应的位置不一致，但这可是 2014 年的 QQ 啊，张小龙你能不能学一学？</p><p><img src="qq.jpg" alt="QQ 截图"></p><p>如果说 QQ 是一个爽点，网易云就是另一个。它的设计非常优秀，大家都是 Windows 却甩开现在的桌面版几条街；功能非常正常，和我此前 Android 端死守的 4.3.1 几乎无异；网易云的迁移几乎没有任何学习成本，同时还能符合 Windows Phone 规范并且为小屏手机考虑，而且 UWP 版都已经（几乎）不能用的时候 WP 版居然还健在，我觉得这就是它做得极其优异的证明，值得我给一个满分。当然不仅仅只有好的部分，要付费的照样要付费，不能下载的照样不能下，可惜 WP 没有 Apple Music。此外，不知是因为蓝牙硬件实在太过老旧，还是网易云音乐的 bug，它连接到我的 AirPods Pro 时能否正常播放完全看脸，大概率是播完一首后即使进度条还在动，已经没有任何声音；经过一番复杂操作才有可能恢复，而中途切歌甚至走两步（电磁环境变得复杂？）也有可能导致无法继续播放。这些问题在连接有线耳机时并没有出现，我暂且蒙在鼓里。</p><p><img src="netease.jpg" alt="网易云截图"></p><p>因为用不上，我并没有花时间一个一个测试 DOSPY 论坛的各类其他国产应用，只是看了一眼仍旧可以使用的高德地图，它能够正常更新数据，却始终没法获取到正确的定位，当我在烈士公园开阔的地方打开它时，它第一次把我定位到了省博物馆旁边的某个居民楼，第二次把我定位到了湖里；哔哩哔哩倒是也有，只不过除了浏览视频信息还正常外，已经无法登录、查看个人主页或是播放视频；其他的应用嘛，就需要自行试试看了。</p><h3 id="说说硬件"><a href="#说说硬件" class="headerlink" title="说说硬件"></a>说说硬件</h3><p>既然在说网易云的时候提到了有线耳机，我们就从这里开始吧。Lumia 1020 拥有极其先进的未来科技：3.5mm 耳机孔，而且音频素质相当优异，声道分离度是「肉耳可闻」地高，我已经许久没有在移动端听到这样的声音了；WP8.1 还提供了一些音频加强，例如 Dolby Audio（是负优化，就像把一个人压扁了横向拉开一样不自然）和均衡器，Zune 的遗产 acoustic EQ 自然没有缺席。Zune 上破音的 acoustic 到了 Lumia 这边表现意外地不错，再加上 WP7 时代 Windows Phone 的音乐还需要使用 Zune 软件复制进去，看到 Zune 的血统依然留存于 Windows Phone，欣慰了。和 Zune 不同的是，1020 的音频有明显的底噪和电流声，这不管什么时候都很明显，算是个小小的遗憾吧。</p><p>Lumia 1020 这硕大的相机模组，一度使其受到了广泛关注：在普遍 800 万甚至 500 万像素的年代，杀出来了一台 4100 万像素 + 1&#x2F;1.5 英寸大底 + 蔡司认证镜头 + 氙气闪光灯的手机，配上鲜艳的聚碳酸酯后盖，代表着那个年代手机拍照的顶点，谁能忍心不对它多投去一些目光呢？事实证明，即使到了今天，这一套光学组合拳的素质仍旧很能打，Auto 模式拍下的 Raw，稍经修缮就不逊于现代设备；如果愿意费心手动调校参数，它相机直出都很出色。</p><p>可惜，如今的它，早已被计算摄影的浪潮拍到了岸上，再也没法动弹。Nokia 在 PureView 上搭载的画质增强技术和今天的设备有点类似，一次性拍摄多张照片并计算、组合为一张成片，不过它可没有现代设备分分钟几十张原始像素照片上下的性能，只能生成一张 500 万像素的图片；专业摄影强大，但不知是硬件限制还是软件缺陷，没有办法预览改变参数后的成片效果，导致要么盲操拍几张看运气，要么就跟着调整参数后的推荐设置来；这个推荐参数，连带着 Auto 模式的曝光和色彩又不靠谱，以至于我使用它拍下的每一张照片都要把 Raw 拎出来过一遍 Photoshop 再同步至云端；压死它的最后一根稻草大概是较慢的成像速度，与此前主力机双击电源键即可进入相机，再按一下音量键就能拍好一张照片不同，它熄屏后「快速」进入相机需要长按快门键，再等个几秒恢复软件、开镜头，如果光线条件不好还得先看它拉会儿风箱（甚至手动对焦），这使我的分享欲望大大下降。</p><p>噢，最后第 n+1 根稻草找到了：它来自 2013，理所当然地搭载了 Micro USB 接口，文件传输在如今看来极其缓慢，由于浏览器是 IE 11 并且 Wi-Fi 似乎只支持到 802.11n，内网传输文件体验糟糕。它支持的 Wi-Fi 有限，我寝室的 36 信道 160MHz Wi-Fi 一百次里大概只有三次不到可以被它扫描到，我不得不启用干扰严重的 2.4GHz Wi-Fi 单独给它用。不过中国移动倒是让我比较惊讶，我本以为拿到它之后将进入漫长的 2G 生活，未曾想移动的 FDD LTE 建设突出一个靠谱，在宿舍能搜到 2&#x2F;5 格左右信号的 Band 8 在教室则是满速满信号 Band 3，必须赞美一下。</p><p>因此，在这 7 天中，我频繁地将 1020 作为热点机使用，它确实没有让我失望。作为一位崭崭新的 9 岁老人，它在仅作为热点机使用的情况下续航能打，比我原来的主力机，电池寿命应该已经严重缩减的 1+7T Pro 还能打，可能还要归功于 Windows Phone 不留应用后台的设计。</p><h3 id="讲了这么多，系统呢？"><a href="#讲了这么多，系统呢？" class="headerlink" title="讲了这么多，系统呢？"></a>讲了这么多，系统呢？</h3><p>首先，Windows Phone 的交互体验、动画等方面非常出色。非常出色。 <strong>非常出色。</strong> 出色到让 Android 和 iOS 理应只能自惭形秽。输入体验也无愧于许多人对它「移动端用过最好的输入法」的评价。它还拥有 Office 套件，无法登录微软账户却能够正常使用 Office 365 的 SharePoint，我用它主力完成了本文的初稿，并且无缝同步到了电脑端，一切都如此自然。然而，它搭载的是残血版 Office，能拥有完善的浏览体验已经谢天谢地了，在浏览带公式的文件时更多的是乱码，卡顿和功能缺失。</p><p>主屏幕的设计可谓是 Windows 8 的绝唱。配上各种应用的 LiveTiles，WP8.1 的主屏有着极高的可自定义性。想要显示实时天气？AccuWeather 提供半透明的天气图标，与壁纸浑然一体；查看错过的来电、信息和邮件，最近照片，下一个日程，正在播放的音乐…？小菜一碟。Windows 11 开始，磁贴虽死，仍有许多系统、应用向它取经，可自定义大小的应用图标、相册轮播的小部件就是最好的例子。</p><p><img src="home.jpg" alt="主页截图"></p><p>Nokia 的铃声和设计同样堪称经典。当我把手机拿到朋友们面前晃悠时，他们中大部分人认不出这是一台 made by Nokia 的设备；直到我让他们给我打电话，以全新变奏出现的、熟悉的 Nokia 铃声，才帮助我斩获了不少惊呼。Windows Phone 的提示音、通知音、按键音同样舒适，不烂大街不突兀，值得给一个好评。</p><p>WP8.1 可以安装的游戏，或者光是上述资源收录的游戏就惊人地多。我在它上面安装了《愤怒的小鸟》、《涂鸦跳跃》、《神庙逃亡》、《暗影格斗 2》、《狂野飙车 8》等等经典，除了《狂野飙车 8》由于强制更新而商店已死没能玩上外，别的游戏都成了我这几天杀时间的首选。你能想象一群人围着看一个人玩神庙逃亡的样子吗？那是我青涩的少年时光，如今又在宿舍体验一次，大抵开始怀旧的我，确实是老了吧。</p><p>当然，墙外的应用也不少。我最常用的两个，Telegram 和第三方 Twitter，都很卡、都能用，美中不足的是前者一直没能正常下载头像，图片能否下载要看脸，不知是否是写死了一些地址的原因。不过这都是小事，大事是 WP8.1 没有任何能让我魔法上网的方式，只能使用另一台设备作为中转，这使我这些天离开了寝室，除了手机没有其他设备的情况下就索性 TG 不上线，好在没人用 TG 找我紧急处理什么事情，可以接受。</p><p>我最不适应的应该是它搭载的浏览器：IE 11。和 iOS 一样，微软不允许开发者在 Windows Phone 平台上提供第三方浏览器内核，必须使用自带的 IE，而它的使用体验…想必已经不需要赘述。并且由于无法魔法上网，我不能像此前那样方便地使用 Google 搜索，只能使用卡顿严重、时常报错、把滑动当点击的百度。此前在主力机上，我每天使用最多的应用可能就是 Google，但主力 1020 这几天，我几乎没有手动用它搜索过。</p><h2 id="何去何从"><a href="#何去何从" class="headerlink" title="何去何从"></a>何去何从</h2><p>综上所述，我实在是想不通这么好的一个系统，怎么就被微软造作没了。它本应是无比耀眼的存在，代表着一个微软的时代：游戏与 Xbox 无缝联动，音乐对接 Zune &#x2F; Groove，内置了开箱即用的 Outlook &#x2F; Office &#x2F; OneDrive，可以将工作流直接搬到移动端，并且设计语言和动画效果极其出色，还不用再为 PC 端付费过的东西花第二次钱，可惜它如今早已消亡，只剩黄金时代的回忆给后人留念。</p><p>体验归体验，要在 2022 年长期稳定使用 WP8.1，或许实在太难：微信暂且不说，糟糕的蓝牙、定位体验就足以将很多人拒之门外。在我看来，它足够精致，足够完善；不能当作绝对主力，又绝对值得花时间相处。或许我之后会将它升级到 Windows 10 Mobile 体验微软真正的绝唱，或许我会将它作为热点机，又或许我会试着继续主力用到暑假。我还没想好，却已经从中窥见了这台 Nokia 末代机皇的无限可能。</p><p>毕竟，化用群友一句话，</p><blockquote><p>2022 年的现在，我们能轻松地判断 Lumia 不是未来；但回到上个年代初，又有谁能拒绝这样一台多彩、灵动又强大的设备呢？</p></blockquote><p><img src="lumia.jpg" alt="Lumia 1020"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小众、多彩、塑料机身、Windows 内核、微软打造，在这些词条的加持下，我对 Lumia 的兴趣，早在《丧尸围城：瞭望塔》见到 Lumia 的身影，对 Lumia 1020 标志性的镜头模组印象深刻之前就已经产生。后来，Android 和 iOS 分庭抗礼，前者在一些方面越来越糟糕，这没能解决 Windows Phone 的颓势，却是我「润」到 Windows Phone 的首次冲动。直到前几天，在二手🐴看到一台崭崭新的 1020，我毫不犹豫果断下了单。&lt;/p&gt;
&lt;p&gt;拿到手后才知道，这台设备没那么美好。它被排除在 Windows 10 更新列表外， &lt;ruby&gt;&lt;rb&gt;Windows Phone&lt;/rb&gt;&lt;rt&gt;WP&lt;/rt&gt;&lt;/ruby&gt; 8.1 的支持早已结束，它已经无法再通过设备内渠道获得软件更新，同时还存在诸多问题及 bug。尽管如此，我尝试了将它作为主力机七天，并将历程与感受记录如下，以期帮助每一个渴望踏入这个坑的人。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文全长约 5000 字，阅读约需 12 分钟，内含少量插图和致死量吐槽，请谨慎食用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="系统" scheme="https://blog.rachelt.one/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="Phone" scheme="https://blog.rachelt.one/tags/Phone/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>在 OpenWrt 上打造 Rickroll 访客 Wi-Fi</title>
    <link href="https://blog.rachelt.one/articles/custom-guest-wifi-with-auth/"/>
    <id>https://blog.rachelt.one/articles/custom-guest-wifi-with-auth/</id>
    <published>2022-04-07T17:06:25.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在 TG 上看到隔壁频道的点子：必须观看一定时间 <a href="https://www.bilibili.com/video/BV1GJ411x7h7">Rickroll</a> 后才允许连接，并且每次暂停会 +10s 的访客 Wi-Fi，顿时震惊：「原来还可以这么搞？？」仔细分析可行性后发现，这个访客 Wi-Fi 原理并不复杂，有折腾 OpenWrt 经验并且写过一丢丢 HTML 的话极其容易上手，于是将步骤记录如下。</p><h2 id="0-准备条件"><a href="#0-准备条件" class="headerlink" title="0. 准备条件"></a>0. 准备条件</h2><ul><li>一台运行 OpenWrt 的路由器</li><li>一台能联网并且能 <code>ssh</code> 的设备</li><li>一点点计算机网络及开发知识</li><li>一点点折腾精神</li></ul><blockquote><p>我自己使用的是红米 AX6 基于 <a href="https://github.com/coolsnowwolf/LEDE">LEDE</a> 的自编译固件，因此能深入地自主精简、定制，如果没有自编译固件的条件或想法，可能会遇到一些奇妙的依赖问题。推荐选择闪存容量大或可扩展存储的路由器，防止折腾半天发现没有留给视频的空间。除此之外，如果想对这个访客网络进行限速（比如使用 SQM QoS），那么也许还需要较强的性能。</p></blockquote><span id="more"></span><h2 id="1-创建访客网络"><a href="#1-创建访客网络" class="headerlink" title="1. 创建访客网络"></a>1. 创建访客网络</h2><p>既然是新造访客 Wi-Fi，那第一步自然是把这个 Wi-Fi 做出来。OpenWrt 后台的 <code>网络 -&gt; 无线</code> 设置中，在想要创建新网络的网卡上点击「添加」，在下方的接口配置——基本设置——网络中勾选「创建」输入 <code>lan_guest</code> （或者任何其他名字，只要能分辨出这是访客网络），进行一些自定义，然后「保存&amp;应用」。</p><p>接下来，打开 <code>网络 -&gt; 接口</code> ，应该已经能看到刚刚添加的新接口了。我们点进它的「修改」，将协议切换到「静态地址」，调整访客网络的网关：「IPv4 地址」。我主用网络的网关 &#x2F; <code>lan</code> 中设置的地址为 <code>192.168.13.1</code> ，这里就可以写成 <code>192.168.3.1</code> 或者任何一个不以 <code>192.168.13</code> 开头且符合 IPv4 标准的值，再把子网掩码调整到 <code>255.255.255.0</code> 。如图所示，我选择的是 <code>192.168.0.1</code> ，声明了我这个接口占用了 <code>192.168.0.0/24</code> 这个网段，也就是 <code>192.168.0.0 ~ 192.168.0.254</code> 。对这些不熟悉的话，按照图上来就好。</p><p><img src="interface.png" alt="interface"></p><p>此时「防火墙设置」中默认选中的应该是「不指定或新建」，我们在后面的文本框中同样输入 <code>lan_guest</code> （不必相同，只是方便辨识），保存，在 <code>网络 -&gt; 防火墙</code> 中就能看到新建的这个区域了。点击「修改」，这时「覆盖网络」应当勾选且只勾选了 <code>lan_guest</code> ，将「入站数据」、「出站数据」和「转发」全部调至「接受」，下方「端口触发」中「允许转发到<em>目标区域</em>」勾选 <code>wan</code> ，保存即可。这样，我们将访客网络和主用网络隔离开，不允许互相访问。</p><blockquote><p>如果你不需要对访客网络进行再进一步的限制，在「防火墙设置」处可以直接将访客网络划入 <code>lan</code> 。这一步主要是为了后面阻止访客网络访问路由器配置。</p></blockquote><p><img src="firewall.png" alt="firewall"></p><p>这时，我们已初步完成访客网络的搭建。然而，此时的访客网络除了无法与主用网络通信外还没有任何限制，不过它的好日子也不长了，我们接下来就「限制访客访问后台」并「对访客网络限速」。</p><h2 id="2-限制访客访问后台"><a href="#2-限制访客访问后台" class="headerlink" title="2. 限制访客访问后台"></a>2. 限制访客访问后台</h2><p>默认情况下，OpenWrt 的 HTTP 服务器 <code>uhttpd</code> 监听的是 <code>0.0.0.0:80</code> ，也就是所有连接请求只要发送就照单全收，这肯定不是我们想要的，所以我们要将它改成主用网络的网关地址。如果你安装了 <code>luci-app-uhttpd</code> 软件包，那么可以在管理后台修改；下文说的是没有安装这个软件包的情况，我们需要用 <code>ssh</code> 连入后台，用 <code>uci</code> 修改配置。</p><p>用任意趁手的 <code>ssh</code> client 连入路由器后台后，我们执行 <code>uci show uhttpd</code> 看看当前的配置。默认情况下，它应该长这样：</p><pre><code class="shell">…uhttpd.main=uhttpduhttpd.main.listen_http=&#39;0.0.0.0:80&#39; &#39;[::]:80&#39;uhttpd.main.listen_https=&#39;0.0.0.0:443&#39; &#39;[::]:443&#39;uhttpd.main.redirect_https=&#39;0&#39;…</code></pre><p>在不使用 HTTPS 的情况下，第二行就是我们要更改的配置。我主用网络的网关在 <code>192.168.13.1</code> ，所以我输入的内容如下：</p><pre><code class="shell">uci set uhttpd.main.listen_http=&#39;192.168.13.1:80&#39;uci commit/etc/init.d/uhttpd restart</code></pre><p>分别代表着「将监听地址设置到 <code>192.168.13.1</code> 」，「保存设置」，「重启 HTTP 服务器 &#x2F; 重启后台」。此时再 <code>uci show uhttpd</code> 可以看到，我们调整的内容出现在了以 <code>uhttpd.main</code> 开头的列表的最末端，并且通过访客网络已经无法再打开路由器后台。</p><h2 id="3-对访客网络限速"><a href="#3-对访客网络限速" class="headerlink" title="3. 对访客网络限速"></a>3. 对访客网络限速</h2><blockquote><p>若不需限制访客网络速度，可忽略本节内容；本节需要安装 <code>luci-app-sqm</code> 和 <code>sqm-scripts</code> 软件包。  </p></blockquote><p>创建、隔离都完成了，接下来就要对访客做限速了——毕竟在限速 24Mbps 的校园网环境，放任访客随便跑带宽势必会影响主用网络。我们用于限速的工具是 <code>luci-app-sqm</code> ，它是 <code>sqm-scripts</code> 的 GUI 控制台，附带了一系列用于控制网络质量的工具。在网络正常的情况下，你可以直接这样安装它们：</p><pre><code class="shell">opkg updateopkg install luci-app-sqm</code></pre><p>完成后，在 OpenWrt 后台的 <code>网络 -&gt; SQM QoS</code> 里就能调整限速设置。在「接口名称」处选中刚刚新增的 <code>lan_guest</code> ，再自主指定上下行速率就行。</p><p><img src="qos.png" alt="qos"></p><h2 id="4-Rickroll！"><a href="#4-Rickroll！" class="headerlink" title="4. Rickroll！"></a>4. Rickroll！</h2><blockquote><p>本节需要安装 <code>nodogsplash</code> 软件包，并且可能需要一些前端开发知识。</p></blockquote><p>最后一步就是配置验证服务了。它的学名叫 captive portal 「强制门户」，常见于机场、星巴克等地的公共 Wi-Fi，同时也被用来做校园网 Wi-Fi 的登录页。原理很简单，现代设备都有一个检查网络是否可用的机制，我们只要将它们检测网络可用的数据包指向我们的认证页面，系统就知道这个网络需要认证才能使用，并自动打开认证页面。</p><p>要造轮子理论上并不难，但已经有了用于完成这一整套步骤的完善工具： <a href="https://github.com/nodogsplash/nodogsplash">Nodogsplash</a> 。像这样操作就能安装并启动它：</p><pre><code class="shell">opkg updateopkg install nodogsplash/etc/init.d/nodogsplash start</code></pre><p>默认情况下，Nodogsplash 会在重启时自动启动，并且对 <code>lan</code> 下的所有设备启用认证。使用 <code>uci show nodogsplash</code> 可以看到像这样的一段：</p><pre><code class="shell">…nodogsplash.@nodogsplash[0]=nodogsplashnodogsplash.@nodogsplash[0].enabled=&#39;1&#39;nodogsplash.@nodogsplash[0].fwhook_enabled=&#39;1&#39;nodogsplash.@nodogsplash[0].gatewayname=&#39;OpenWrt Nodogsplash&#39;nodogsplash.@nodogsplash[0].gatewayinterface=&#39;br-lan&#39;…</code></pre><p>但我们只希望它监听访客网络，所以我们修改 <code>nodogsplash.@nodogsplash[0].gatewayinterface</code> 的值：</p><pre><code class="shell">uci set nodogsplash.@nodogsplash[0].gatewayinterface=&#39;wlan1&#39;uci commit</code></pre><p>这里的 <code>wlan1</code> 应修改为访客网络的接口名。在我的案例中，我将没有用上的 2.4GHz Wi-Fi 设置为了访客网络，所以它是 <code>wlan1</code> ，如果一张网卡下有多个 Wi-Fi 网络，它也可能是 <code>wlan1-1</code> 等，不确定的话可以参考 <code>SQM QoS</code> 的「接口名称」设置，括号内是 <code>lan_guest</code> ，括号外就是访客网络对应的接口名。</p><p>初始认证页面，作为示例，是一个有图有文字，只要点击「Continue」就会认证成功的简单页，位于 <code>/etc/nodogsplash/htdocs/splash.html</code> ，我们修改这个文件的内容就能控制认证页面。我将我写完的 <code>splash.html</code> 放在了 <a href="https://github.com/Rachel030219/nodogsplash-rickroll">nodogsplash-rickroll</a> 这个 GitHub 项目中，可以直接用我完成的 <code>splash.html</code> 替换掉已有文件，再将视频命名为 <code>nevergonnagiveyouup.mp4</code> 放在同一文件夹（ <code>/etc/nodogsplash/htdocs/</code> ）下，输入 <code>/etc/init.d/nodogsplash restart</code> ，就能看到效果。</p><hr><p>如果你还想深入了解这个页面的组成，这里摘录 <code>&lt;body&gt;</code> 部分如下：</p><pre><code class="html">&lt;h1&gt;Never Gonna Give $clientip Up&lt;/h1&gt;</code></pre><p>这是一个朴素的一级标题，调用了 Nodogsplash 的变量功能，将 <code>$clientip</code> 替换为当前认证设备的 IP 地址。这个特性在提交认证数据部分也有用到：</p><pre><code class="html">&lt;form id=&quot;authform&quot; method=&quot;get&quot; action=&quot;$authaction&quot; hidden&gt;    &lt;input type=&quot;hidden&quot; name=&quot;tok&quot; value=&quot;$tok&quot;&gt;    &lt;input type=&quot;hidden&quot; name=&quot;redir&quot; value=&quot;$redir&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;开始上网&quot;&gt;&lt;/form&gt;</code></pre><p>除了用来控制显示的 <code>id=&quot;authform&quot;</code> ，这个 <code>&lt;form&gt;</code> tag 用于向 <code>$authaction</code> （会被替换为实际的认证地址）提交一个 GET 请求，附带了一个 token <code>$tok</code> 和重定向目标 <code>$redir</code> 。这是官方推荐的用来认证设备的方式。除此之外，Nodogsplash 还提供了许多其他变量，在自带的 <code>splash.html</code> 中可以找到，包括网关 &#x2F; 用户 MAC，网关名等。</p><pre><code class="html">&lt;video id=&quot;video&quot; autoplay loop controls&gt;    &lt;source src=&quot;nevergonnagiveyouup.mp4&quot; type=&quot;video/mp4&quot;&gt;    你的浏览器不支持 video 标签。&lt;/video&gt;</code></pre><p>这就是一个简单的视频播放组件，包含了「自动播放」、「循环播放」两个特性，还提供了播放控制（也带来了暂停惩罚）。 <code>src</code> 告诉浏览器应该播放的是同一个文件夹下的 <code>nevergonnagiveyouup.mp4</code> ， <code>type</code> 则声明了视频的类别。</p><p>文件末尾是一段 JavaScript，作用已在注释中说明，完成了最基本的倒计时 + 暂停检测功能。</p><blockquote><p>⚠注意⚠：你可能已经看到了，官方注释中说： </p><p><em>It should be noted when designing a custom splash page that for security reasons many CPD implementations: Immediately close the browser when the client has authenticated. Prohibit the use of href links. Prohibit downloading of external files (including .css and .js). <strong>Prohibit the execution of javascript.</strong></em></p><p>翻译过来，为了安全考虑，完成认证后应该立即关闭浏览器，禁止使用 href 链接，禁止引用外部文件， <strong>禁止执行 JavaScript</strong> 。本文完成的认证页面只是「图一乐」，如果需要大面积部署到生产环境，请务必尽最大可能遵循这几条原则。</p></blockquote><hr><p>同文件夹下还有一个 <code>status.html</code> ，用来告诉设备「你已经连上了，不用尝试连接了」，文章完成时我还没有动它，如果有兴趣的话可以折腾折腾。</p><h2 id="5-搞定！"><a href="#5-搞定！" class="headerlink" title="5. 搞定！"></a>5. 搞定！</h2><p>如此，我们就完成了一个 <del>电信诈骗</del> 访客 Wi-Fi。 <del>快去诈骗你的朋友们吧！</del></p><hr><p><strong>参考与感谢：</strong></p><ol><li>灵感来源：<a href="https://t.me/CyanCh/855">https://t.me/CyanCh/855</a></li><li>Nodogsplash Documentation: <a href="https://nodogsplash.readthedocs.io/">https://nodogsplash.readthedocs.io/</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天在 TG 上看到隔壁频道的点子：必须观看一定时间 &lt;a href=&quot;https://www.bilibili.com/video/BV1GJ411x7h7&quot;&gt;Rickroll&lt;/a&gt; 后才允许连接，并且每次暂停会 +10s 的访客 Wi-Fi，顿时震惊：「原来还可以这么搞？？」仔细分析可行性后发现，这个访客 Wi-Fi 原理并不复杂，有折腾 OpenWrt 经验并且写过一丢丢 HTML 的话极其容易上手，于是将步骤记录如下。&lt;/p&gt;
&lt;h2 id=&quot;0-准备条件&quot;&gt;&lt;a href=&quot;#0-准备条件&quot; class=&quot;headerlink&quot; title=&quot;0. 准备条件&quot;&gt;&lt;/a&gt;0. 准备条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一台运行 OpenWrt 的路由器&lt;/li&gt;
&lt;li&gt;一台能联网并且能 &lt;code&gt;ssh&lt;/code&gt; 的设备&lt;/li&gt;
&lt;li&gt;一点点计算机网络及开发知识&lt;/li&gt;
&lt;li&gt;一点点折腾精神&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我自己使用的是红米 AX6 基于 &lt;a href=&quot;https://github.com/coolsnowwolf/LEDE&quot;&gt;LEDE&lt;/a&gt; 的自编译固件，因此能深入地自主精简、定制，如果没有自编译固件的条件或想法，可能会遇到一些奇妙的依赖问题。推荐选择闪存容量大或可扩展存储的路由器，防止折腾半天发现没有留给视频的空间。除此之外，如果想对这个访客网络进行限速（比如使用 SQM QoS），那么也许还需要较强的性能。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://blog.rachelt.one/tags/Linux/"/>
    
    <category term="OpenWrt" scheme="https://blog.rachelt.one/tags/OpenWrt/"/>
    
    <category term="Rickroll" scheme="https://blog.rachelt.one/tags/Rickroll/"/>
    
    <category term="访客网络" scheme="https://blog.rachelt.one/tags/%E8%AE%BF%E5%AE%A2%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>航道，四季与歌：2021 的年度总结</title>
    <link href="https://blog.rachelt.one/articles/2021-2022/"/>
    <id>https://blog.rachelt.one/articles/2021-2022/</id>
    <published>2021-12-21T00:49:54.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>初代 Cytus 的设定很有意思，作为人类永生的载体，为了防止人类的记忆被新的记忆覆盖后的情感消失，机器人们会将情感化为音乐存储在名为 Cytus 的空间，每过一段时间就使用这些音乐感受情绪与灵魂。</p><p>作为人类，浑浑噩噩中度过的每一天，我同样依赖音乐触摸我的灵魂，而在我选出来的五首歌里，是我过去一年的故事。</p><blockquote><p>本文长约 4800 字，阅读约需 12 分钟，全程无图，请放心食用。</p></blockquote><h2 id="暮冬：你啊-为何不愿停下"><a href="#暮冬：你啊-为何不愿停下" class="headerlink" title="暮冬：你啊 为何不愿停下"></a>暮冬：你啊 为何不愿停下</h2><blockquote><p>寂寞的人呐 显得不慌忙啊<br>雨下得再大 <em><strong>你啊 为何不愿停下</strong></em><br>越冠冕堂皇 越贪嗔痴狂啊<br>折不折又怎样 你是我永不凋谢的花</p><p>Ring - 堪折</p></blockquote><span id="more"></span><p>冬天属于重逢与告别。短短的、微不足道的一个月寒假，对旧友相聚比「岁月如梭」更短，对无所事事比「度日如年」更长，其余时间，则像是我活过的每一天，不紧不慢地流淌。</p><p>跨越漫长的第一个学期，我与老友们聚首，在高考后聚餐的同一家火锅店 feel united。承受住欣喜、不舍与扭头就走的冲动，我与某个当时还有另一半的人，带着两位女生、抱着一个孩子，相会于承载我们太多回忆的公园。拥抱独有的惊喜、温暖与勇敢，我和从未离开我身边的人，再度经历一个月的成长。</p><p>与此同时，我开始对自己负全责，摆脱了对未成年人设下的种种限制，第一次握住教练车的方向盘。成年当天启动的、长达一周的短暂学车生活中，尽管我面对的科目一算不上紧张，后期真正开始学习时遇到的问题已初见端倪，或许从第一天起，我就在盼望一个「不用学车」的许可。元宵节前一天，顶着训练场 29℃ 的气温，我一边等同行人结束机械重复的倒车入库一边无聊地刷 NGA，被炙热的太阳晒得发昏时，不免对未来正式学车的日子忐忑不安。事实证明，我的忐忑一点都没错。</p><p>但那是夏天的故事，我有一整个学期用来做心理准备，所以没把它放在心上。我放在心上的是又一个假期结束，又一群人离开。大半年已经过去，《再会》里 Ayase 所写「即使是与你分隔两地 &#x2F; 也祈愿着能眺望同一片天空」，仍然能把我带回寒假的倒数第二个晚上。</p><p>那个晚上，长沙南站寒风凛冽，将一杯悠哉悠哉端住，仿佛下一秒就要把我吹走的风中，我站了十几分钟，才终于等来了我要等的友人。这次，没有扭头就走的企图，只有见面前一贯的冷淡，与见面后掩饰不住的不舍。可惜这次送别实在短暂，不过几句对话，他已不得不登上前往机场的磁浮。可能是潜意识里扭头就走的冲动，或者时间或者经济，我没能和他一起去机场，仅仅给他一个深拥然后转身离开，却在十分钟内落入难以自解的自责。</p><p>我知道这只是一连串离别的开始。我现在熟悉的人最终都会各奔东西，唯独难以适应现实的、始终如此软弱的我，无法想象未来成熟后，身旁没有友人陪伴的生活。可时间从未停下。</p><h2 id="春：你能在我垂死之脸上寻见它吗"><a href="#春：你能在我垂死之脸上寻见它吗" class="headerlink" title="春：你能在我垂死之脸上寻见它吗"></a>春：你能在我垂死之脸上寻见它吗</h2><blockquote><p><em><strong>Can you see it in my dying face</strong></em><br>You are acting like I care</p><p>Low Roar - Bones</p></blockquote><p>转眼大半年，偶尔被我遗忘的意难平，已经深刻地改变了我的人生轨迹。</p><p>在那之前，我与一个人相逢恨晚。开学第一周最后一节课，周五下午的大学生心理健康，自发的小团体被拆散糅合成数个组，各据一方教室的领土。躲在教室最角落的我，有幸认识了企图比我躲得更远的人。任谁都不会想到，以缓解初见尴尬的自言自语为开始，以我给他让路时窗外洒落的阳光为楔子，我们的关系，在性格迥异还找不到几节共同课的情况下越来越近，从礼貌而疏远的社交距离、像是猫触水前试探般的寒暄，到夜跑、自习、散打课，洋湖、宜家、KFC，以及无数次自鸣得意，或者自取其辱。</p><p>在那之前，我把陪伴我半年的电脑送至北京维修，问题没找着，寄走后的 12 天里，我却不仅没有创作的能力，还丧失了与老朋友们同乐的权利。彼时，我不敢打扰忙于维系感情、极少听我倾诉的朋友，加上仿佛深入骨髓的要强，放任自己被找不到出口的情绪淹没的某天晚上，长沙城上一层雾气，我站在湖上桥的正中「看到万家灯火把盖着一层薄雾的夜空照亮，却看不到这偌大一个城里我的位置」。此心不安，吾乡难觅啊。</p><p>在那之后，我站在同一片湖上的同一座桥，终于放下了我一文不值的要强，一边打着电话一边望着桥下的水，思考了很久很久，不知道自己会被带去何方。半年后的今天，我还是不知道。或许本来就没有那么多路，或许车到山前必有路、船到桥头自然直；或许直到迟暮之年，我安详地躺在床上整理一生时才能下结论，或许我永远都不能。谁知道呢。</p><h2 id="夏：凡追悔莫及之物皆美不胜收"><a href="#夏：凡追悔莫及之物皆美不胜收" class="headerlink" title="夏：凡追悔莫及之物皆美不胜收"></a>夏：凡追悔莫及之物皆美不胜收</h2><blockquote><p><em><strong>戻らない後悔の全部が美しいって</strong></em><br>そういうのさぁ、僕だってわかるのに</p><p>ヨルシカ - 思想犯</p></blockquote><p>我逃不开的，只有这我一直都知道。</p><p>7 月 11 日晚上，大一最后一个学期终于结束。7 月 14 日，挂在我心口的大石头终于把我砸了个粉碎。我终于开始准备驾考，暑假，也终于宣告终结。</p><p>从那一天开始几乎一个月，我活进了高考以来最深的焦虑，焦虑着何时出发、何时结束，焦虑着我握住方向盘的半个小时中，纵然微小却能使副驾驶不耐烦的每个动作。我活进了一个月的讨好与厌恶，前者给教练，后者给总将教练脾气归咎于自己的自己。支离破碎的生活里，我的精神状态迅速恶化，不敢置身幽闭的环境，不敢和人坦率地交流，甚至不敢阅读沉重的文字。八月初，奔赴驾考考点前夜，我在床上辗转反侧，为一件小事歇斯底里。回想起来才知道，那些日子里我的思考能力一直被屏蔽，我却什么都做不到。</p><p>事出必有因。活成了客套与讨好、被自己厌恶得不敢直视自己的自己，「一遍过拿证」的鲜活例子，四位数起跳、凭良心收取的高得离谱的考试费，资源垄断的驾考考点，不熟悉的环境与不适应的伙食……我裹挟于它们之中，早已分不清谁才是让我连续失利两个科目，放弃暑假内完成驾考的最后一根稻草。我成功脱身那一刻，席卷我的甚至不是失落。我只感到释然。</p><p>或许还有以为暑假已经结束的，虚伪的平淡。平淡的《控制》，平淡的竞赛。平淡地被埋葬的自己。</p><p>但这种真实的麻木只持续到八月底，持续到我踏上漫漫长路，踏上一方异乡的土地。踏上青岛。</p><p>青岛，青岛。</p><p>半年前的我对自己说，如果像这样的送别有下一次，我决不会离开，我要站进航站楼，望着一架架飞机逐渐抬升，冲进它们的云海。</p><p>我最后没有做到，因为这次，我冲进了我的云海。</p><p>青岛，青岛。</p><p>第一天抵达，五四广场海风徐徐，脚下不远处的海面波光粼粼。从那时起，我清晰地知道，我从来没有被埋葬，只不过这两个月中，从来没有被唤醒。我清晰地知道，这就是我终究要来的地方。</p><p>我用一天的时间在崂山、太清、麦岛、台东，在云雾缭绕间、山水环流中，彻底干掉此前因过量运动而疲惫不堪的膝盖，用每天百十张照片的速度塞满相册，乐此不疲。然后是栈桥、八大关，是小青岛、万象城、信号山和鲁迅公园的乱石浅滩；是开海鲜嫩弹牙的虾水饺，是粥全粥到入口即化的黄花鱼，是信号山上某家店里装满一杯凉茶的格调。</p><p>是一路绵延进我心里的海岸线，是一座古老城市的气息与血脉，是无处安放所以无处不在的大海，是我摸不清看不透却挥之不去的青岛。</p><p>青岛，青岛。</p><p>我启程前想，也许这次旅途可以改变很多东西，对我来说的确是这样。难以忘怀的四天里，我与另一个人朝夕相处，直到相距千里，形影不离。难以忘怀的四天里，我后悔直到暑假最后几天才意识到，原来这个夏天本可以完全不一样，原来那一个月的碌碌无为，不会如我所想的那样平复我对暑假的期许。这难得的两个月假期，我本该如此开心地活着。难以忘怀的每一个夜晚，连同难以忘怀的那次半醉，我将自己活成没有明天的模样，害怕时间就此离去。难以忘怀的每一刻，尤其是归途前的最后一个深夜，当我把文字当作记录与埋葬昨天的载体，当我以自己的方式发现、正视今天，以及归途前的最后一个小时，当他把我送到机场，我报之以另一个深拥，我确实已经不需要明天。</p><p>青岛，青岛。</p><p>直到我回到一方似曾相识的土地，感受迟到太久的离别；直到我循环着《思想犯》中的俳句，不知秋风何时能拂去离别吹来冬日，不知何时才能见到另一个夏天；直到四个月后，那四天的幻象仍旧挥之不去，作为逝去夏日里的难得珍宝，熠熠生辉；直到我 2021 的后半段，多了一个魂牵梦萦的地方；直到此刻，当我挥笔写下来路与迷惘，我还在轻声呼唤那座城市。</p><p>青岛，青岛。</p><h2 id="秋：错把飞絮当春雪，竟只是为了将你看不见"><a href="#秋：错把飞絮当春雪，竟只是为了将你看不见" class="headerlink" title="秋：错把飞絮当春雪，竟只是为了将你看不见"></a>秋：错把飞絮当春雪，竟只是为了将你看不见</h2><blockquote><p>ただ、ただ雲を見上げても<br>視界は今日も流れるまま<br>遠く仰いだ夜に花泳ぐ<br><em><strong>春と見紛うほどに、君をただ見失うように</strong></em></p><p>ヨルシカ - 藍二乗</p></blockquote><p>开学头一个月，我恍惚中还活在青岛，闭上眼睛还能闻到海风拂过沙滩，却只能睁开眼，用忙碌回应猝不及防的现实。我和一群孩子过了个中秋，重新拾回了一点活力，但它又被生活、综测与麻木压了下去。回家住了五天又回到学校，从我收拾好书包去图书馆自习的路上写下一段话，片刻思索后按下 Send 键开始，一切都变得不一样。</p><p>那时，我决定告别被糖分绑架的自己。</p><p>大概是从初三开始，糖成了我生活中不可或缺的一部分，我以可乐或奶茶庆祝成功，也用它们盖过失意与怅惘。借助糖分提供的多巴胺，我经历了高中思绪万千的无数个黄昏，被情绪淹没的晚上，以至心神不定的每个昼夜。体重的长期稳定让我忽视这种依赖，直至国庆五天，我以一己之力喝掉了五杯糖分（现在看来）严重超标的奶茶。</p><p>是不是什么错了？为什么我对糖的喜爱已经到了这个地步，以至于靠近奶茶店我就已经在想今天喝什么了？糖对我真的好吗？我没法摆脱对多巴胺的依赖，没有它就活不下去吗？我家的糖尿病史同意不同意呢？</p><p>所以我决定至少做出一些改变。至少告别被糖分绑架的自己。</p><p>这很难。即使我对自己的要求是在不摄入游离糖，不喝含糖饮料不吃高糖零食的基础上尽量减少碳水，这一开始也很难，特别是与一群人一起出门时，大家都想喝茶颜可乐，唯独我必须选择无糖款，或者不喝，再大费口舌解释原因。戒断反应最强烈的时候，我走在路上，眼巴巴望着经过的奶茶店，幻想四季奶青、声声乌龙的口感，再往嘴里猛灌一大口水，加快步伐离开。</p><p>好在养成一个习惯只需要 21 天。我在忙碌中，在订阅者们的监督下，成功度过了最难熬的日子，内心的想法从「啊就这一杯无糖可乐我这周绝对不再喝」，逐步变成了「我上次喝代糖饮料好像还是上个月的事情（除开体育课的运动饮料）」。某天，当我和同学走进超市，惊讶地发现我居然很久没再看过饮料柜，甚至都快忘记可乐的口感时，目标基本达成的成就感无疑比人工添加糖更让人感到愉悦。改变还不止于此。我没有明显感觉，没有实际称过，寒假回家才能证实，但每次视频电话我妈都觉得我在减肥（事实上恩格尔系数快 90% 了）。我感觉得到的是皮肤状况明显改善，不再需要维 A 酸就能和伴随我三年的痘痘「断舍离」，脸部只剩下一些顽固的痘印。</p><p>最重要的是，离开糖之后，我一直在探索更健康的生活方式。放下手游，放下 10min 以内的短视频，放下一切短期刺激，我一次又一次思考自己到底想活成什么样。毕竟，连对糖的依赖都能改，还有什么不能呢？因为对身体素质的追求和体育课致死量的运动，我的活动能力逐渐增强，最大摄氧量一路走高，体测时 1km 跑进了从没想过的 4min。从新闻、资讯开始，晚上我给自己留出时间，屏蔽一切外部干扰，重新习惯与长篇文字为伴的生活。对夏天也好，对糖分也好，对过去的自己也好，我向它们挥手道别，在 suis 的歌声中，寻找我存在的意义。</p><h2 id="初冬：人生真是绝佳的消遣啊"><a href="#初冬：人生真是绝佳的消遣啊" class="headerlink" title="初冬：人生真是绝佳的消遣啊"></a>初冬：人生真是绝佳的消遣啊</h2><blockquote><p><em><strong>Life is such a wonderful waste of time</strong></em><br>I wanna spend it with love<br>If you don’t mind</p><p>SILENT POETS - Almost Nothing</p></blockquote><p>可能因为生活逐渐平淡，没有作为判断依据的大事发生，可能因为比起前一年、前一天，每一年、每一天在我人生中的占比越来越小，我所感知的时间越走越快，即使一件事离我太久，突然忆及也像是昨天。当我稍不注意，一年时光已经消逝。准备给这一年划上句号，回望自己时，我竟想不起什么聊以记叙，仿佛我这一年从未活过，或者每件事都被拆散成了无数个碎片，散落进每一天。</p><p>这个十二月的某一天中午，耳机里塞着熊光的《君に夢中》入眠时，我的意识朦胧间回到了一年半以前，还住在起初难以称之为家、阳台门一开就嘎吱响、有无数小昆虫陪我度过三年的小出租房，还走在一侧开了四家奶茶店、每天来回好几趟、拥挤得必须和车同行的水泥路，还坐在午休刚醒时连人一起昏昏沉沉、一成不变得有点漫长、永远有那些人的教室。我大概从未离开吧。</p><p>这个十二月的某一天下午，我与友人从宜家出来，抱着一大块碍事的小推车即将抵达学校时，被五一广场迷路的另一个人叫住了。不带任何犹豫地，我带上小推车，跳上反向的地铁，一路狂奔跑过地铁站和熙熙攘攘的国金街，连带翘掉了一次班会。那个下午我知道，不需要任何特殊目的与准备，单单是老友见面就能让人很开心。总希望能给人带来帮助的我，那个下午如愿以偿，时至今日，我仍庆幸那时自己做出了这样的决定。我确实从未离开啊。</p><p>这个十二月的某一天晚上，教室里冬风肆虐，吹得我双脚冰凉，本应将精力放进化学，可思绪早被吹散到九霄云外，想起更久远以前相同的寒风，不同在我并非强迫自己吃透难以理解的知识，而是等待着一份热气腾腾的卤肉卷，好塞进外套，隔着棉絮和纸袋温暖我到家前最后一段路程；期待着最后一口下去四溅的汁水，不忘与同行人相谈甚欢。可我早就离开太远了。</p><p>也许正如我怀念高中生活一样，若干年后，已经进入工作岗位的我，会机缘巧合之下怀念起大学，怀念一些陪我度过四年的人，怀念我许多晚上用《死亡搁浅》与人相连，怀念每天早上从寝室到教学楼之间的漫漫长路，怀念某一天，我坐在寝室床上，怀念着那个怀念过去的自己。这么长的马拉松里，只有时间是永恒的冠军，我和回忆里的一切都没能跑过它，包括被时间冲淡变得疏离的回忆本身。不知不觉间我就会长大，会变老，会看着我之后一代代年轻人长大，变老。即便如此，我依旧盼望见到那个还能忆起往事，还会义无反顾地出现在一些人身旁的自己。时间流逝本应让人万般不愿，可人生正是这样绝佳的消遣啊，在路途上有那些人为伴，听起来就不再那么寂寞。启程前，将一些时间没能冲刷掉的事情铭记于心的我，或许早已不再害怕前行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;初代 Cytus 的设定很有意思，作为人类永生的载体，为了防止人类的记忆被新的记忆覆盖后的情感消失，机器人们会将情感化为音乐存储在名为 Cytus 的空间，每过一段时间就使用这些音乐感受情绪与灵魂。&lt;/p&gt;
&lt;p&gt;作为人类，浑浑噩噩中度过的每一天，我同样依赖音乐触摸我的灵魂，而在我选出来的五首歌里，是我过去一年的故事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文长约 4800 字，阅读约需 12 分钟，全程无图，请放心食用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;暮冬：你啊-为何不愿停下&quot;&gt;&lt;a href=&quot;#暮冬：你啊-为何不愿停下&quot; class=&quot;headerlink&quot; title=&quot;暮冬：你啊 为何不愿停下&quot;&gt;&lt;/a&gt;暮冬：你啊 为何不愿停下&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;寂寞的人呐 显得不慌忙啊&lt;br&gt;雨下得再大 &lt;em&gt;&lt;strong&gt;你啊 为何不愿停下&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;越冠冕堂皇 越贪嗔痴狂啊&lt;br&gt;折不折又怎样 你是我永不凋谢的花&lt;/p&gt;
&lt;p&gt;Ring - 堪折&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="年度总结" scheme="https://blog.rachelt.one/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一把钥匙一把锁，我的双 PC 工作流</title>
    <link href="https://blog.rachelt.one/articles/my-dual-pc-workflow/"/>
    <id>https://blog.rachelt.one/articles/my-dual-pc-workflow/</id>
    <published>2021-11-09T17:12:36.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>学期初，我终于攒出了人生第一台台机。R7 2700X (Zen+) 和 1060 的配置，时至今日最多中端水平，对于一个 <ruby><rb>使用</rb><rt>忍受</rt></ruby> 了一年轻薄本的人来说，却足以被称为一次飞跃。约两个月后的今天，我设想的两种极端情况（完全抛弃 Gram &#x2F; 完全依赖 Gram）都没发生，而我则已经摸出了一个适合自己的方案：一把钥匙（LG Gram）对应一把锁（台机）。正式开始之前，先从硬件配置说起吧。</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><table><thead><tr><th></th><th>台机</th><th>Gram</th></tr></thead><tbody><tr><td>CPU</td><td>Ryzen 7 2700X</td><td>i7-1065G7</td></tr><tr><td>GPU</td><td>GTX 1060</td><td>Iris G7</td></tr><tr><td>RAM</td><td>8GB 3200 x2</td><td>16GB 2933 x2</td></tr><tr><td>屏幕</td><td>4K (ppi 183.58)</td><td>1080p (ppi 157.35)</td></tr></tbody></table><p>如上所示，我并没有给自己攒出一台秒天秒地的 <ruby><rb>台机</rb><rt>空气</rt></ruby> ，在 2021 年的今天，我不得不在 <ruby><rb>配置</rb><rt>预算</rt></ruby> 上做出不少妥协。好在以前从未将这么强悍的配置（即使中端）作为主力，这些妥协并没有影响我的体验，倒很适合我反复考量这两台机器的使用场景与职能。以下是我考量过后的结果：</p><span id="more"></span><h2 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h2><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><p>除非使用的是 Apple 全家桶，否则文件传输始终是不可避免的一大障碍。我解决这个障碍的主要工具是 <a href="https://landrop.app/">LANDrop</a> ，它提供了无与伦比的局域网内互传体验，使 Android &#x2F; Windows &#x2F; iOS 三个平台传文件变得极为顺手。然而，LANDrop 在 Windows 上偶尔会绑定不了端口，并且传输纯文本很麻烦，因此我还将 <a href="https://snapdrop.net/">Snapdrop</a> 作为另一个方案。它只需要浏览器、即开即用，适合承担较轻的文件 &#x2F; 文本传输工作。除此之外，用 Python 随手跑一个 HTTP server 之类的此前是我的常用解，用于传输文件也足够，只是不方便。</p><p>我在 <a href="https://blog.rachelt.one/articles/my-way-of-backing-up/">《从本地到云端，我的数据备份方案》</a> 中所述的方案，在双 PC 的情况下对 Gram 依旧适用，Documents 等文件夹仍然会被实时备份到 OneDrive。这对于 Gram 的定位来说无比方便，我更多时候是在图书馆、教室等地方使用 Gram，只要关机前网络连接顺畅，那么大部分文件都无需担心同步问题。同时，我会有意识地将正在撰写的文档保存至 OneDrive，这样便能在全平台随时随地阅读、编辑。</p><p>至于台机，由于我在寝室还兼职提供打印服务，台机上存储了各种各样的零散文档，把它们全部传到 OneDrive 浪费空间又占用资源，在我注重备份工作文件的情况下，台机的 Documents 等文件夹没有那么重要，所以我并未采取特殊方案保护它们，只开启了 Windows 自带的内网文件共享， 以便需要的时候台机上的文件可以随时从 Gram 使用。</p><p>当然，还有些文件不适合上传至 OneDrive 也不适合手动共享，例如包含了致死量编译中间体和 <code>node_modules</code> 的 Projects。OneDrive 羸弱的自定义特性使备份无比让人脑梗，好在我大部分项目都开源在了 GitHub，提交频繁的情况下并不需要过于担心代码写到一半宕机，但维护两份代码库太耗精力，每次在 Gram 上编辑后还得先 <code>git commit &amp;&amp; git push</code> 再在台机上 <code>git pull</code> 不算优雅，所以我选择了 <a href="https://github.com/canton7/SyncTrayzor">SyncTrayzor</a> ，一个易上手的 Windows 端 Syncthing 工具，用以在两台 Windows 电脑间共享 Projects 文件夹。利用 Syncthing 的排除文件特性，我能够仅共享所有工程的源代码部分，从而实现迅速、即时的文件同步。</p><p>使用 Syncthing 还有一个好处：把 Gram 当「钥匙」成为可能。</p><h3 id="代码管理与安全性"><a href="#代码管理与安全性" class="headerlink" title="代码管理与安全性"></a>代码管理与安全性</h3><p>言归正传，什么是钥匙？什么是锁？</p><p>就我而言，借助更强的性能，主要用于调试、编译的台机是我给自己设下的锁，我 SSH Key 的存放点，诸多账户恢复代码的保存处，被 BitLocker with PIN 锁上的 Gram 则是那把用于解锁自己的钥匙。</p><p>所以大部分时候，我会在台机上写作或者写代码。机械键盘过硬的手感和台机不俗（至少和 Gram 比起来）的性能，加上 4K 屏提供的绝佳锐利度，让这一过程比起盯着 Gram 的 1080p 小屏敲打着不知说好还是坏的笔记本键盘来说，满足感高了不止一个档次。当我准备好 <code>git commit &amp;&amp; git push</code> ，Syncthing 已经把源代码同步好了，只须在 Gram 上的 WSL 中定位到对应的目录，将代码上传至云端。</p><p>这全程经过了数个只有我本人才能解开的认证步骤，最大化保证了「我是我」。首先，BitLocker with PIN 加密的硬盘，防止了暴力将 SSD 拆出读取数据，也解决了 <a href="https://pulsesecurity.co.nz/articles/TPM-sniffing">TPM 明文传输密钥的安全隐患</a> ；然后，Windows Hello 要求使用指纹或 PIN 才能进入系统，对于电源指纹一体化的 Gram 来说非常方便；最后 WSL 里要求 passphrase 才能使用的 SSH Key、被不同密码保护的 Keybase 和各账户…如果真的有人能够连续突破这几道防线，那个人只能是我吧。</p><p>由于对安全性的高要求，加上目前的 Gram 几乎没有性能压力，我完全开启了 <ruby><rb>基于虚拟化的安全性保护</rb><rt>virtualization-based security, VBS</rt></ruby> ，手动启用了 <ruby><rb>内存完整性</rb><rt>Memory integrity</rt></ruby> 等 ，就是此前在 Windows 11 上被发现会「影响系统性能」并因此被口诛笔伐的那系列功能。虽说无法 100% 保证设备安全，很多时候也像是无用功（ <em>「一普通用户这么在意安全干嘛？怕不是藏了不可告人的东西」</em> ），能够降低风险的事情总归不坏。</p><p>我想过在台机上启用更激进的安全策略，可惜 2000 系及以前的 Ryzen 处理器不在 Windows 官方的支持列表里，不确定是 Zen 2 加入的新魔法还是单纯 Zen+ 及更早产品的性能过于拉胯，总之 VBS 在这种情况下较明显地影响到了用户体验，和 Windows 11 的拉胯相辅相成，以至于我为了彻底禁用 Device Guard、Credential Guard 和可能随着 Hyper-V 一同启用的 <ruby><rb>HVCI</rb><rt>Hypervisor-Protected Code Integrity</rt></ruby> 等功能，连着 secure boot 都一起干掉了。挺无奈的。</p><h3 id="娱乐-也是工作的一部分！"><a href="#娱乐-也是工作的一部分！" class="headerlink" title="娱乐 也是工作的一部分！"></a>娱乐 <del>也是工作的一部分！</del></h3><p>如果让我在这两台设备中选出最佳内容消费工具，那我大概会毫不犹豫地选择 iPad Pro。它具有一些我这两台设备都不具备的特征：长续航、无实体键盘、触摸、屏幕比例方正等，还能夹在床边（依赖京造的长臂夹， <strong>不推荐</strong> ），目前不管是接上 USB DAC 听歌、玩音游还是逛 B 站、用 Kindle app 读书和 RSS feed 都是我的第一选择。</p><p>平时写作、开发，或者哪怕单纯开着电脑坐在桌边写作业，BGM 都很有必要，这时台机上的 Windows 11 红利： <ruby><rb>WSA</rb><rt>Windows Subsystem for Android</rt></ruby> 成了不可或缺的一部分，因为 <a href="https://music.apple.com/">Apple Music 网页端</a> 和 iTunes 都一个德性：难用，Android 端的 Apple Music 客户端完美地解决了这一问题。Gram 则更多使用 Foobar2000 播放我从弃置的前端上转移过来的本地音乐，它们包含了一些游戏的解包 BGM、电台曲目等难以在流媒体平台找到或加入播放列表的部分，以及一些个人收藏、自购的专辑。</p><p>无所谓的有两个：除了音游，甚至连音游在内的所有游戏都由台机负责解决，视频消费…我没有重温电影或剧集，甚至没有看它们的习惯，更不可能收藏了。我对视频消费的最高追求是在 YouTube 或者主要是 B 站看码率只有 3Mbps 的 1080p。无所谓了。</p><p>不过总的来说，在这一方面，毕竟我的娱乐需求偏向「随便」，不刻意，所以也不在意。听歌时，大部分情况下，我会随便抓起离我最近的耳机，使用离我最近的随便什么设备，随便听点收藏过而且没有厌倦的曲目。游戏时，作为自闭单机玩家，就…挺随便的，大部分时候没人管我。视频嘛那更随便了，B 站动态过一遍，把感兴趣的加进「稍后再看」然后随便抽空看完，我随便的娱乐需求就解决了。最不随便的居然是 RSS feed，因为 KindleEar 抓取和 Kindle 推送的限制，我被迫精挑细选，结果倒也不错。</p><h2 id="聊以作结"><a href="#聊以作结" class="headerlink" title="聊以作结"></a>聊以作结</h2><p>目前，我在日常使用中需要两台设备协同的部分，可能连带着使用习惯等等，到这里已介绍完毕。篇幅较短，还请见谅。我还考虑过很多其它的方案来扩展这一体系，例如搭建一台 NAS 作为下载机、存档机，使用闲置的 SSD 安装 Linux 等，但它们有的考验我的预算，还有的配置完成后也只会有吃灰的结局，最终我都没有实行。总之，对于现在的我而言，如此就是最优解了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学期初，我终于攒出了人生第一台台机。R7 2700X (Zen+) 和 1060 的配置，时至今日最多中端水平，对于一个 &lt;ruby&gt;&lt;rb&gt;使用&lt;/rb&gt;&lt;rt&gt;忍受&lt;/rt&gt;&lt;/ruby&gt; 了一年轻薄本的人来说，却足以被称为一次飞跃。约两个月后的今天，我设想的两种极端情况（完全抛弃 Gram &amp;#x2F; 完全依赖 Gram）都没发生，而我则已经摸出了一个适合自己的方案：一把钥匙（LG Gram）对应一把锁（台机）。正式开始之前，先从硬件配置说起吧。&lt;/p&gt;
&lt;h2 id=&quot;硬件配置&quot;&gt;&lt;a href=&quot;#硬件配置&quot; class=&quot;headerlink&quot; title=&quot;硬件配置&quot;&gt;&lt;/a&gt;硬件配置&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;台机&lt;/th&gt;
&lt;th&gt;Gram&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Ryzen 7 2700X&lt;/td&gt;
&lt;td&gt;i7-1065G7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;GTX 1060&lt;/td&gt;
&lt;td&gt;Iris G7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RAM&lt;/td&gt;
&lt;td&gt;8GB 3200 x2&lt;/td&gt;
&lt;td&gt;16GB 2933 x2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;屏幕&lt;/td&gt;
&lt;td&gt;4K (ppi 183.58)&lt;/td&gt;
&lt;td&gt;1080p (ppi 157.35)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如上所示，我并没有给自己攒出一台秒天秒地的 &lt;ruby&gt;&lt;rb&gt;台机&lt;/rb&gt;&lt;rt&gt;空气&lt;/rt&gt;&lt;/ruby&gt; ，在 2021 年的今天，我不得不在 &lt;ruby&gt;&lt;rb&gt;配置&lt;/rb&gt;&lt;rt&gt;预算&lt;/rt&gt;&lt;/ruby&gt; 上做出不少妥协。好在以前从未将这么强悍的配置（即使中端）作为主力，这些妥协并没有影响我的体验，倒很适合我反复考量这两台机器的使用场景与职能。以下是我考量过后的结果：&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="数据" scheme="https://blog.rachelt.one/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用 Indirect Display 虚拟显示器，全屏 Moonlight 串流</title>
    <link href="https://blog.rachelt.one/articles/fake-display-for-moonlight/"/>
    <id>https://blog.rachelt.one/articles/fake-display-for-moonlight/</id>
    <published>2021-10-18T11:17:32.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>前几天终于用上了极为先进的 Moonlight，体验到了在移动端低延迟畅玩 3A 大作（主要是躺在床上推《魔夜》），却也遇到了一些不爽的地方，比如目前移动端设备千奇百怪，常规电脑渲染的 16:9 的画面，几乎不能在 2021 年的移动设备上铺满屏幕。怎么办呢？极客湾选择把用不上的输出接口与用不上的显示器接口连接起来，调整这个不存在的显示器的大小；市面上也有很多 HDMI 诱骗器，几十甚至十几块就能解决问题；我在看过蚊子大佬的博客后，选择动手折腾一个 Indirect Display，试试在不依赖外部设备的情况下，虚拟出第二个显示器用来串流。</p><p>因为不同设备的屏幕分辨率、刷新率不尽相同，使用 Indirect Display 还得信任签名时使用的证书，因此本文不会提供编译好的版本。不过编译并不复杂，具备计算机基础知识即可。</p><span id="more"></span><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>前提条件当然是一台运行 Windows 10 的电脑。都这年头了，能用 Moonlight 串流这个条件不可能不满足吧……？</p><p>接下来安装的是 <a href="https://visualstudio.microsoft.com/downloads/">Visual Studio 2019 社区版</a> 。打开安装程序，勾选「使用 C++ 的桌面开发」这个工作负荷。除此之外，还应当在「单个组件」里勾选你电脑指令集架构对应的，用来缓解 Spectre 影响的编译库，使用英文时它通常就在某个已经勾选的 MSVC 的下方，使用中文时搜索「MSVC 最新」可以很快找到。例如，在我的电脑上，默认勾选了 <code>MSVC…x64/x86 build tools (Latest)</code> ，那么只要再勾选上 <code>MSVC…x64/x86 Spectre-mitigated libs (Latest)</code> ，如图所示。</p><p><img src="install-spectre-mitigated-libs.png" alt="install-spectre-mitigated-libs"></p><blockquote><p>如果你安装 Visual Studio 的时候没有安装 Spectre 缓解库，可以打开安装程序补上，或在编译时无视 Spectre 警告和安全风险，尽管我个人不推荐这么做。</p></blockquote><p>等待安装程序下载 Visual Studio 的这段时间，可以用来获取 GitHub 上 <a href="https://github.com/microsoft/Windows-driver-samples/tree/master/video/IndirectDisplay">微软官方提供的 Indirect Display 示范程序</a> 。对 Git 和 Subversion 熟悉的话随意，不熟悉可以点击 <a href="https://github.com/microsoft/Windows-driver-samples/releases/download/159399/IddSample.zip">GitHub - IddSample.zip</a> 或者 <a href="https://hub.fastgit.org/microsoft/Windows-driver-samples/releases/download/159399/IddSample.zip">备用镜像 - IddSample.zip</a> 下载打包好的 zip 文件。它只有 20KB 大，下载下来后解压到任意一个能找到的地方就行。</p><p>Visual Studio 安装完毕后，我们还缺了编译驱动程序所需的 <a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/download-the-wdk">Windows 驱动程序工具包</a> (WDK)。官方提供的版本已经更新到了 Windows 11，跟着官方步骤走不会出问题，但 Windows 11 的软件开发工具包（SDK）尚未在 Visual Studio 中提供，得单独下载，而且还没有本地镜像…… <a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/other-wdk-downloads">其他 WDK 下载</a> 里的 <a href="https://go.microsoft.com/fwlink/?linkid=2128854">适用于 Windows 10 版本 2004 的 WDK</a> 就能够满足需求了。WDK 安装完毕之后会提示安装 Visual Studio 扩展，保持默认设置。</p><h2 id="代码改动"><a href="#代码改动" class="headerlink" title="代码改动"></a>代码改动</h2><p>打开 Visual Studio，点击「打开项目或解决方案」，找到存放代码的地方，打开 <code>IddSampleDriver.sln</code> ，Visual Studio 会自动加载整个项目。接着，在右边「解决方案资源管理器」里，展开 <code>IddSampleDriver - Source Files</code> ，打开 <code>Driver.cpp</code> ，先不管 <code>Driver.tmh</code> 的报错（生成的时候会自动解决），改动下面几个地方：</p><h5 id="Line-27"><a href="#Line-27" class="headerlink" title="Line 27"></a>Line 27</h5><pre><code class="c++">static constexpr DWORD IDD_SAMPLE_MONITOR_COUNT = 3;</code></pre><p>这一行意思是创建的虚拟显示器数量。默认是 3 个，按需修改吧。</p><h5 id="Line-52-54"><a href="#Line-52-54" class="headerlink" title="Line 52~54"></a>Line 52~54</h5><pre><code class="c++">&#123; 2560, 1440, 144 &#125;,&#123; 1920, 1080,  60 &#125;,&#123; 1024,  768,  60 &#125;,</code></pre><p>这里就是虚拟显示器的显示模式了，三个数字分别代表了宽度、高度和刷新率。可以直接修改已有的数字，如果需要更多显示模式，得将 <code>Header Files</code> 里 <code>Driver.h</code> line 42 的 <code>szModeList</code> 改为相对应的数值（默认是 3）。</p><h5 id="Line-58-75"><a href="#Line-58-75" class="headerlink" title="Line 58~75"></a>Line 58~75</h5><p>这十几行定义了另一个虚拟显示器，用不上可以直接删除。</p><h5 id="Line-772-781"><a href="#Line-772-781" class="headerlink" title="Line 772~781"></a>Line 772~781</h5><p>你应该能够看到数十行像这样的代码：</p><pre><code class="c++">TargetModes.push_back(CreateIddCxTargetMode(3840, 2160, 60));</code></pre><p>这些是驱动向 Windows 汇报的显示模式，三个数字也是宽度、高度和刷新率，它们会出现在显示适配器的「列出所有模式」中。在类似代码后新建一行，把 line 52~54 中自定义的内容以类似格式添加在此。</p><h2 id="编译，安装！"><a href="#编译，安装！" class="headerlink" title="编译，安装！"></a>编译，安装！</h2><p>修改完毕，在上方把 Debug 改成 Release，选择你电脑的指令集架构（一般是 <code>x64</code> ），再打开「生成」菜单，点击生成解决方案。等待进度条走完，出现类似 <code>生成: 成功 2 个，失败 0 个，最新 0 个，跳过 0 个</code> 的输出后，编译好的驱动就已经在 <code>IddSampleDriver.sln</code> 所在的文件夹中，指令集架构对应的文件夹里了（例如 <code>x64</code> 在 x64 文件夹下）。</p><p>为了顺利安装上自制驱动，首先要信任自动生成的证书。打开 <code>IddSampleDriver.cer</code> ，点击「安装证书」，「本地计算机」，「将所有的证书都放入下列存储」然后「受信任的根证书颁发机构」，安装。安装完毕后，关闭证书再打开，会显示这个证书已经受信任。</p><p><img src="install-certificate.png" alt="install-certificate"></p><p>接下来就可以安装设备了。打开「设备管理器」，随便选一项，打开上方「操作」里的「添加过时硬件」，手动安装，一路下一步到「从磁盘安装」，定位到 <code>IddSampleDriver</code> 里面的 <code>IddSampleDriver.inf</code> （外面 <code>Release</code> 文件夹里那个是没签名的装不上），安装。如果一切顺利，打开显示设置就能看到添加的显示器了！卸载也很简单，从设备管理器中移除设备完事。</p><img src="results.png" alt="results" style="width:50%; height:auto;" /><p>当然，在我的试验中，Windows 这个特性的稳定性还…不够让人满意，可能会碰到设备管理器中出现了 IddSampleDriver Device 却找不到第二个显示器的情况，此时你也可以试着以管理员身份运行 <code>Release</code> 文件夹中的 <code>IddSampleApp.exe</code> 或者其它可能行得通的办法，只要能够识别一次，以后就都不会出现问题。Enjoy！</p><h2 id="如果不巧发生问题…"><a href="#如果不巧发生问题…" class="headerlink" title="如果不巧发生问题…"></a>如果不巧发生问题…</h2><p><img src="when-signability-test-failed.png" alt="when-signability-test-failed"></p><p>这个问题最常见的原因是签名工具签名时使用当前时间（中国标准时间是 UTC+8），验证时使用 UTC 时间，导致 0:00~8:00 期间无法以默认设置签名（无法签发未来的证书），通过修改签名设置可以解决这一问题，不过最优解是先睡一觉再继续， <strong>早睡早起身体好！</strong></p><p><img src="when-sign-denied.png" alt="when-sign-denied"></p><p>那么大个 <code>Access is denied</code> 告诉我们，签名工具没有驱动的访问权限（例如丢进了某个磁盘的根目录），将项目文件夹整个移动到用户文件夹（例如桌面）后重新编译就能解决。磁盘已满也会出现这个问题，试试清理一下？</p><h2 id="结果如何？"><a href="#结果如何？" class="headerlink" title="结果如何？"></a>结果如何？</h2><p>在我尝试使用这个显示器串流时，遇到了一点问题…Moonlight 无法选择串流的显示器，会抓取默认显示器的视频流，我们看不到创建的这个显示器的画面，要把这个显示器换成默认几乎不可能。那么如果像极客湾一样把原有的线拔掉呢？</p><p><img src="performance.png" alt="performance"></p><p>就…这样了。低得离谱的帧率、码率（实际感受比这还要卡）和高得离谱的输入延迟兼具，《地平线 4》就算了，连《魔夜》主菜单都卡，显卡的性能被直接腰斩（未测试…甚至全靠 CPU 也有可能？），这就是 HDMI 诱骗器好用的原因吧。不管如何，如果你有类似的需求并且使用的软件支持选择显示器，Indirect Display 的方案或许还挺值得一试的。</p><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>虚拟显示器终极解决方案 IndirectDisplay | <a href="https://qwq.moe/ultimate-virtual-monitor-solution-indirect-display">https://qwq.moe/ultimate-virtual-monitor-solution-indirect-display</a></li><li>How to run Parsec without monitor? Here’s a virtual monitor solution for you (Indirect Display) | <a href="https://archeb.medium.com/how-to-run-parsec-without-monitor-heres-a-virtual-monitor-solution-for-you-indirect-display-ecba5173b86a">https://archeb.medium.com/how-to-run-parsec-without-monitor-heres-a-virtual-monitor-solution-for-you-indirect-display-ecba5173b86a</a></li><li>Indirect display driver model overview - Windows drivers | Microsoft Docs | <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/display/indirect-display-driver-model-overview">https://docs.microsoft.com/en-us/windows-hardware/drivers/display/indirect-display-driver-model-overview</a></li><li>Download the Windows Driver Kit (WDK) - Windows drivers | Microsoft Docs | <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk">https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk</a></li><li>visual studio 2012 - Int2Cat - DriverVer set to incorrect date - Stack Overflow | <a href="https://stackoverflow.com/questions/14148500/int2cat-driverver-set-to-incorrect-date">https://stackoverflow.com/questions/14148500/int2cat-driverver-set-to-incorrect-date</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天终于用上了极为先进的 Moonlight，体验到了在移动端低延迟畅玩 3A 大作（主要是躺在床上推《魔夜》），却也遇到了一些不爽的地方，比如目前移动端设备千奇百怪，常规电脑渲染的 16:9 的画面，几乎不能在 2021 年的移动设备上铺满屏幕。怎么办呢？极客湾选择把用不上的输出接口与用不上的显示器接口连接起来，调整这个不存在的显示器的大小；市面上也有很多 HDMI 诱骗器，几十甚至十几块就能解决问题；我在看过蚊子大佬的博客后，选择动手折腾一个 Indirect Display，试试在不依赖外部设备的情况下，虚拟出第二个显示器用来串流。&lt;/p&gt;
&lt;p&gt;因为不同设备的屏幕分辨率、刷新率不尽相同，使用 Indirect Display 还得信任签名时使用的证书，因此本文不会提供编译好的版本。不过编译并不复杂，具备计算机基础知识即可。&lt;/p&gt;</summary>
    
    
    
    
    <category term="串流" scheme="https://blog.rachelt.one/tags/%E4%B8%B2%E6%B5%81/"/>
    
    <category term="应用" scheme="https://blog.rachelt.one/tags/%E5%BA%94%E7%94%A8/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="Moonlight" scheme="https://blog.rachelt.one/tags/Moonlight/"/>
    
  </entry>
  
  <entry>
    <title>STFW.info 现已正式迁移至 RachelT.one！</title>
    <link href="https://blog.rachelt.one/articles/migrating-from-stfw-info-to-rachelt-one/"/>
    <id>https://blog.rachelt.one/articles/migrating-from-stfw-info-to-rachelt-one/</id>
    <published>2021-10-10T14:12:21.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>Rachel 建站以来的第一次域名迁移已完成！从原来一时兴起注册的 Search The F**king Web 到 Rachel T &#x2F; Tone，希望能够使网站更独一无二！</p><p>STFW.info 将在 2022&#x2F;04&#x2F;22 过期，在这期间，对原域名已迁移部分的访问将被重定向至 RachelT.one 对应的子域名，无需迁移部分保持不变；过期后，对 STFW.info 的访问将不再由我控制。若您收藏了过往文章或订阅了我博客的 RSS，建议在旧域名到期前尽快更新。我对域名迁移导致的不便深表歉意，欢迎您随时通过 <a href="https://rachelt.one/">RachelT.one</a> 中的联系方式向我反馈迁移后出现的问题。</p><span id="more"></span><p>说到这里，博客已经蒙尘半年，感谢您在我不辞而别如此久后仍保持对这个微不足道的私人博客的关注。近期可能会有新文章，但没有对技术的深入探讨；此前承诺的 Nuklear 介绍因太过久远积重难返，发布的可能性较低，即使发布也很难达到理想水准，非常抱歉。我个人已经许久没有接触到前沿技术，甚至许久没有写过代码，历史项目的维护也难以为继，还请谅解。大二以来，作为一名高中化学及格次数屈指可数的化工专业学生，专业课程和每周六天的排课让我喘不过气，更重要的是我不知道是否还有继续发展技术水平的必要，然后就在日复一日的生活中逐渐懒散。很遗憾、很让人失望，半年之后，我还被困在一团白茫茫的雾里，摸不出前进的方向。但是如果我不知道，又有谁能知道呢？</p><hr><h4 id="迁移的域名列表："><a href="#迁移的域名列表：" class="headerlink" title="迁移的域名列表："></a>迁移的域名列表：</h4><table><thead><tr><th>原域名</th><th>新域名</th></tr></thead><tbody><tr><td><a href="https://me.stfw.info/">me.stfw.info</a></td><td><a href="https://rachelt.one/">rachelt.one</a></td></tr><tr><td><a href="https://blog.stfw.info/">blog.stfw.info</a></td><td><a href="https://blog.rachelt.one/">blog.rachelt.one</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rachel 建站以来的第一次域名迁移已完成！从原来一时兴起注册的 Search The F**king Web 到 Rachel T &amp;#x2F; Tone，希望能够使网站更独一无二！&lt;/p&gt;
&lt;p&gt;STFW.info 将在 2022&amp;#x2F;04&amp;#x2F;22 过期，在这期间，对原域名已迁移部分的访问将被重定向至 RachelT.one 对应的子域名，无需迁移部分保持不变；过期后，对 STFW.info 的访问将不再由我控制。若您收藏了过往文章或订阅了我博客的 RSS，建议在旧域名到期前尽快更新。我对域名迁移导致的不便深表歉意，欢迎您随时通过 &lt;a href=&quot;https://rachelt.one/&quot;&gt;RachelT.one&lt;/a&gt; 中的联系方式向我反馈迁移后出现的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="公告" scheme="https://blog.rachelt.one/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>迎接又一次意难平</title>
    <link href="https://blog.rachelt.one/articles/facing-another-i-could-have-had-it/"/>
    <id>https://blog.rachelt.one/articles/facing-another-i-could-have-had-it/</id>
    <published>2021-04-21T17:16:28.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。</p><p>和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。</p><span id="more"></span><h2 id="It-happens"><a href="#It-happens" class="headerlink" title="It happens."></a>It happens.</h2><p>如何描述呢？和一个孩子不讲道理地把所有东西都砸得稀巴烂一样，我原来初具雏形的人生规划，也被一个没有我名字的名单砸得稀巴烂。</p><p>这或许并不全是坏事。推翻一切从头再来，意味着我有了全新的机遇和全新的选择，我可以追求更不一样的发展目标，可以朝着更不一样的自己前进。不过说实话，我也不知道那都可以是什么。从我得到消息的那一刻起，我的大脑一直一片空白，好像一直在想些什么，却什么都没想出来。让这样的我马上决定未来，未免太勉强我自己了。</p><p>曾几何时，我知道我可以不用担心我羸弱的化学知识，反正不久以后它们都会变成选修课学分里干巴巴的数字，随着时间风化；我知道我马上就能光明正大地坐在属于我的实验室工位上，和同专业的人一起努力；我知道我可以凭借我已经拥有和即将拥有的专业知识完成学业，找到一份比较体面的工作，成为一个我一直想成为的人。</p><p>但现在，我什么都不知道了。如果一定要为今天找一个主题，那它一定是「我不知道」。仿佛宕机一般，我再也不能好好思考问题，再也不能顺畅地表达自己。我甚至还没有想透到底发生了什么，只知道我下个学期仍然要做化学实验，仍然要学有机化学、物理化学；只知道浑浑噩噩快要到头的这一年，被无限期地延长；只知道我一直以来对浑浑噩噩大学四年的恐惧，可能注定要成真，而我还浑然不觉。</p><p>此时浑然不觉的我，真的可以就这样从容接受自己、接受现实吗？还是说，我会在某一刻突然清醒，然后抱头痛哭？如果说海啸往往晚于地震，那地震已经来了，海啸呢？</p><p>海啸尚未降临，选择已经将我淹没。我不知道我该做什么了。我应该继续尝试转专业？尽早安定在化工类？跨专业考研？或者……我真的如我所想的，那么热爱着 Computer Science，以至于需要消耗那么多东西，来为我的热爱陪葬吗？</p><p>一直以来，我秉持着「躺平等死」的态度逃避问题，想把一切留到最后一刻再解决。一直以来，我都知道，我总会无处可逃。在大半个学期过去，我好像还什么都没做到时，我突然也什么都不知道了。</p><p>我终究还是期盼着万事顺意，期盼着让未来的自己活得有模有样，期盼着在纷扰繁杂中以我的步调不断向前。我终究不是能看淡的人。</p><p>如果我是那样的人就好了。</p><p>在久远往昔的展望中，我也曾顽强地说出「不再后悔」。时至今日，在踽踽独行的我真的懈怠、逃避了那么多之后，我也不知道我后不后悔了。</p><h2 id="It-happened"><a href="#It-happened" class="headerlink" title="It happened."></a>It happened.</h2><p>这不是我人生中第一次意难平，也不可能是最后一次。我所知道的是，没有人说得清特定的事对特定的人会产生怎样的影响。我们都没办法预知微小扰动带来的未来。</p><p>几年前某个夏日的下午，我落榜了高中的自主招生考试，在座位上哭得稀里哗啦。今天再来回忆，也许当时的成绩不佳从高中一直注定到今天，也许当时的成绩不佳帮我回避了更多的遗憾，也许当时的成绩不佳让我认识了更好的人、行过了更好的路。这些都不重要，重要的是，当我今天回过头凝望我的人生，这一次的难受，也不过是微不足道的曲折。它并没有阻止我在我的高中度过三年。</p><p>也是在几年前某个夏日，我在百般纠结甚至差一点就放弃机会的情况下，最终还是向模拟联合国提交了申请表。我绝对想不到，当时这小小的举动，引发了一系列的连锁反应，戏剧性地改变了我整个高中甚至整个人生的轨迹。</p><p>如果转专业失利是我大学碰到的第一个不如意，它又会带来什么？我不知道，我也不可能知道。人都是走一步看一步的嘛。</p><p>去年这个时候的我对怀念高中生活的大学生嗤之以鼻，今年这个时候的我不争气地希望那段混着蝉鸣的回忆从未终结。在未来真正到来之前，一切都是未知数。</p><p>而我祈祷着明天更好的太阳，祈祷着无数个明天的回望中，我还以不让自己后悔的姿态活着。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。&lt;/p&gt;
&lt;p&gt;和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>从本地到云端，我的数据备份方案</title>
    <link href="https://blog.rachelt.one/articles/my-way-of-backing-up/"/>
    <id>https://blog.rachelt.one/articles/my-way-of-backing-up/</id>
    <published>2021-04-10T01:00:23.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。</p></blockquote><p>我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。</p><p>事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。</p><p>不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows &#x2F; Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。</p><span id="more"></span><h2 id="云端"><a href="#云端" class="headerlink" title="云端"></a>云端</h2><p>需要说明的是，本文提及的所有云端服务，几乎都可以用同类竞品代替，我的选择主要出于个人喜好，尤其是依赖的生态圈。尽管我的选择存在种种缺陷，考虑到首要目的是最小的精力开销备份最多的数据，还请不要介意，也欢迎提出更多建议。</p><h3 id="Google-Photos"><a href="#Google-Photos" class="headerlink" title="Google Photos"></a>Google Photos</h3><p>我主要照片来源为主力 Android 设备。凭借与 Google 生态的无缝融合，拍摄后十秒内照片基本已备份完毕，可以在所有登陆了 Google 账号的设备上访问。</p><p>当然不止这些。考虑到 6 月开始 <a href="https://blog.google/products/photos/storage-changes/">所有照片都会占用云端存储空间</a> ，我把吃灰的初代 Pixel XL 翻了出来，让它重新派上了用场。我在两台设备上安装了 <a href="https://syncthing.net/">Syncthing</a> ，把照片文件夹从主力机共享给 Pixel，然后使用 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> 模块 <a href="https://forum.xda-developers.com/t/advanced-charging-controller-acc.3668427/">Advanced Charging Controller (ACC)</a> 把 Pixel 最大充电量限制到 80%，插上电扔一边就完事了。这样，只要我一连上 Wi-Fi，所有新照片都会自动同步到 Pixel，接着使用无限云端存储备份原图，最大限度保证了图片的安全。此外，我还利用 Syncthing 的 <ruby><rb>仅发送 &#x2F; 仅接收</rb><rt>send only &#x2F; receive only</rt></ruby> 模式，仅将主力机的照片发送至 Pixel，这样当 Pixel 的 32 GB 存储不够用时，我随时都可以使用 Google Photos 的清理本地文件功能，留出更多的空间给新的照片。</p><p>这样做的缺陷也很明显。首先，照片备份完全依赖 Google，万一某一天 Google 彻底无法访问，或者云端存储耗尽，或者 Google Photos 停止服务，我数年攒下的回忆就会消失；其次，Pixel 已发布四年有余，尽管我相信 Google 为它配备了最好的硬件，一旦它的闪存因为频繁大量碎片读写而报废，那照片备份就会进入倒计时；再就是，每次照片备份都会把同样的文件上传两次（尚未测试主力机关闭上传时能否更新照片库），我颇为担心额外的流量开销；而且 Google Photos 偶尔会把同一张照片当两张存，删哪张都不对劲（删除压缩版本：主力机上原图被带着一起删掉；删除原图版本：云端只保留压缩版）。因此，照片备份绝不能只有 Google Photos，还得带上后面将要提到的 <code>rsync</code> 。</p><h3 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h3><p>OneDrive 无疑是 Windows 上文件备份首选，本文的这一部分就是依赖 OneDrive 的多端同步完成的。它在国内的速度出人意料地不错，它在上传大文件时没能跑满带宽，但碎片文件的同步做得很棒，把文件复制进备份文件夹后就会马上开始备份，几乎感知不到延迟。</p><p>这当然只是一小部分。OneDrive 更大的优势在于它深度整合进了 Windows 10，只要登录 Microsoft 账户就会开始同步文件，并且还能够傻瓜式地将「文档」、「桌面」、「图片」这三个文件夹一键移动进备份目录中，再也不用手动上传。方便吗？真的很方便，把「文档」移入 OneDrive 文件夹后我再也不需要在 Office 内手动摁下「保存」，也不需要担心游戏存档没同步上 Steam 云了。</p><p>然而，让人头疼的就是，「文档」除了正儿八经的文档之外，还被很多应用当作垃圾站，简直就是 Android 的内置存储。当我点开 OneDrive 应用一看，发现图片列表里塞满了伊比利亚的海报时，内心也挺复杂的。OneDrive 只能同步单一文件夹的所有内容，不支持多文件夹、不支持排除文件夹，也是个问题。例如，QQ、TIM 会把好几百 MB 大的数据库存在「文档」下的私有目录中，每次退出都会重新上传，只能在 QQ &#x2F; TIM 的设置内改变数据存储目录解决，更何况很多应用的数据存放目录根本就没法改，花费大量上传带宽可能还没能备份完所有文件，别提还有个叫 <code>node_modules</code> 的毒瘤了，它直接打消了我开发目录放「文档」下的想法。</p><p>方便是方便了，问题却迟迟难以解决，因此我其实一直都想把 OneDrive 换成 Google Drive，考虑到它不能在我所有的设备上顺畅使用，我至今仍未迈出第一步。各位如果觉得有不错的备份服务，也可以在评论区留下推荐。总之，OneDrive 的拉胯是本地备份刚需的一大原因。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Android 端极其全面的 Google 备份能够帮我解决大部分需求，从联系人到 Wi-Fi 密码、应用数据，只要我还在 Google 的生态圈中，它们就会在所有接入 Google 的设备上可用。不得不承认的是，这带来了不小的隐私隐患，毕竟天下乌鸦一般黑，作为一个中国大陆人，比起吃相更难看的国产大厂和 iCloud（由云上贵州运营），还是 Google 比较靠谱。</p><p>说到 iCloud，想必这是大部分 iOS 用户的首选。在 iOS 上，它也确实提供了比 Android 上 Google 服务更优的体验。Google 有的它一个不差，Google 没有的（点名 iMessage）它做得相当出色。尽管如此，考虑到那个大大的「云上贵州」以及 iOS 对我而言用来养蛊（指国产应用）的本质，我一直不愿意把所有数据全部交给 iCloud。如果你重度依赖 iOS &#x2F; macOS，iCloud 应当足够满足云端备份需求。</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>云端服务大部分都能找到替代，本地应用就不一定了，比如下面的第一个。</p><h3 id="钛备份Titanium-Backup"><a href="#钛备份Titanium-Backup" class="headerlink" title="钛备份Titanium Backup"></a><ruby><rb>钛备份</rb><rt>Titanium Backup</rt></ruby></h3><p>热爱折腾的 Android 用户应该都听说过「钛备份」的大名，Android 2.X 时代诞生的它一直走到今天。虽然界面「返璞归真」「不忘初心」，功能却鲜有同类能望其项背。除了常规备份还原，它还能把还原的应用安装来源恢复成 Google Play Store，实现照常在 Play Store 上安装更新。这项功能的缺失，是阻碍我切换到其它界面更现代的备份应用的主要原因。</p><p>我目前的设定是每周日凌晨自动备份新安装的 &#x2F; 新版本的用户应用，每周二、周五凌晨自动备份修改过的用户数据，以确保我需要的时候能随时调出备份。只保存在本地也不太靠谱，钛备份能够帮我把文件自动上传到 Google Drive &#x2F; Box &#x2F; Dropbox，这应该很好用，所以我选择下文的 <code>rsync-time-backup</code> 。</p><h3 id="rsync-time-backup"><a href="#rsync-time-backup" class="headerlink" title="rsync-time-backup"></a>rsync-time-backup</h3><p><a href="https://rsync.samba.org/">rsync</a> 是一个方便的文件同步命令行工具， <a href="https://github.com/laurent22/rsync-time-backup">rsync-time-backup</a> 大大提高了使用 <code>rsync</code> 备份文件的便利性。只需要输入源文件夹和目标文件夹， <code>rsync-time-backup</code> 就会自动把文件以类似 macOS 上「<ruby><rb>时光机</rb><rt>Time Machine</rt></ruby>」的方式备份，而且可以在任意平台任意设备上备份、恢复。</p><p>依赖 <ruby><rb>Windows Subsystem for Linux</rb><rt>WSL</rt></ruby> 1 以及 Termux，我一举解决了 Windows 和 Android 双端的文件同步问题。WSL1 上只需要 <code>sudo mkdir /mnt/drive/ &amp;&amp; sudo mount -t drvfs &lt;盘符:&gt; /mnt/drive/</code> 即可将存储盘手动挂载到可访问目录 <code>/mnt/drive/</code> 下，接着就可以从 <code>/mnt/c/</code> 把文件备份过去。Android 则更加方便，不需要手动挂载，直接使用 Termux 访问 <code>/mnt/</code> 下的存储盘就行（可能需要一些权限，而且不一定支持 NTFS）。<code>rsync-time-backup</code> 同时还支持连接远程服务器，如果有条件搭建 NAS 或拥有带 USB 口的路由器，都不再需要手动将备份盘在多设备间换来换去。</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>目前我本地备份文件的传输均通过 <code>rsync-time-backup</code> 完成，所以……也许这篇小短文可以到此为止？那就在这一部分说说以上工具同类们的使用感受吧。</p><p>钛备份这么多年来一直被各种备份工具「追平」甚至「超越」，可它们最多也只能备份和还原数据，距离替代钛备份还有相当长的距离，以至于当我实在忍不了钛备份的时候，除了零星几个 <a href="https://forum.xda-developers.com/t/app-root-5-0-1st-nov-2020-migrate-custom-rom-migration-tool.3862763/">Migrate</a> 和 <a href="https://swiftapps.org/">Swift Backup</a> ，大部分人都劝我接着忍下去。尽管如此，如果你没有那么复杂的需求，你也完全可以使用这两个工具应急。</p><p>我并非 macOS 用户不好评价，Windows 10 上自带的类似功能：「文件历史记录」我还是能吐槽的。它提供了（至少比命令行直观）的图形界面，默认备份用户目录，可以手动指定文件夹，可以备份到网络位置，插上存储盘后每一小时自动备份一次，听起来无比美好，如果可以忽略性能极其糟糕的「设置」应用，并且不在意备份文件不能在其他设备上使用的话。我的电脑在维修点被重置了系统，Windows 便认为这是两台电脑，拒绝为我恢复文件，哪怕是根本和设备 ID 或者当前用户无关的文件夹都不行，最后只能手动把文件复制回来，用 PowerToys Rename 通过正则表达式匹配批量去掉了每个文件后的时间戳，再全部取消只读，才勉强让大部分应用、文件恢复正常（还有几个死活好不了）。尽管它方便，私以为还是 <code>rsync-time-backup</code> 靠谱。</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>数据备份工具当然不止上文提及的这些。如果你拥有小主机甚至 NAS，数据备份会无比方便；如果没有，你也可以像我这样探索适合自己的备份方案。不管怎样，最重要的都是数据本身。追求更简单的数据备份方式当然无可非议，但如果代价是带来更大的安全风险，我还是认为需要再留个后手（例如我备份文件一般存储在 U 盘，最珍贵的数据会在可靠的机械硬盘、两个云端存储都保留一份）。</p><p>希望这篇文章能为你带来一些启发。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。&lt;/p&gt;
&lt;p&gt;事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。&lt;/p&gt;
&lt;p&gt;不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows &amp;#x2F; Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="数据" scheme="https://blog.rachelt.one/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="备份" scheme="https://blog.rachelt.one/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>为什么我不推荐 LG Gram</title>
    <link href="https://blog.rachelt.one/articles/why-not-lg-gram/"/>
    <id>https://blog.rachelt.one/articles/why-not-lg-gram/</id>
    <published>2021-04-06T14:08:28.000Z</published>
    <updated>2022-05-19T18:47:36.820Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 <a href="https://github.com/cdr/code-server">code-server</a> 。</p><p>但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。</p><p>在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。</p><blockquote><p>我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。  </p></blockquote><span id="more"></span><h2 id="太长不看"><a href="#太长不看" class="headerlink" title="太长不看"></a>太长不看</h2><p>就像上面说的那样，我真无法向人掏心窝子地推荐 LG Gram。</p><p>Gram 的拉胯，绝对不只是哪个方面出了问题，而是方方面面都有问题。它的 <a href="./#%E6%80%A7%E8%83%BD">性能</a> 锁死到了最高 15W 的功耗，使用单热管单风扇企图为 i7 散热 ，并且 <a href="./#%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87%E5%92%8C%E4%BA%AE%E5%BA%A6">屏幕分辨率和亮度</a>  、 <a href="./#%E9%94%AE%E7%9B%98">键盘</a> 手感及背光都不尽如人意，还有 <a href="./#%E6%89%AC%E5%A3%B0%E5%99%A8">扬声器</a> 破音、音量过小……这些 <a href="./#%E7%A1%AC%E4%BB%B6">硬件</a> 缺陷， <a href="./#%E8%BD%AF%E4%BB%B6">软件</a> 部分同样兼容性差、不能让人放心， <a href="./#%E5%94%AE%E5%90%8E%E4%B8%8E%E6%9C%8D%E5%8A%A1">售后服务</a> 搅屎棍当得还颇有特色。</p><p>如果你想听听详细的吐槽（约 5000 字），那么请继续往下翻。否则，您可以直接退出，或者跳到我的 <a href="./#%E6%80%BB%E7%BB%93">总结</a> 。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>这大概是 Gram 被诟病得最多，也是对日常使用影响最大的一个问题了。它主要的性能限制并非处理器（正相反它搭载的可是实打实的 10 代顶级移动端 i7），而是为了续航和散热对功耗作出的激进限制。毕竟是来自牙膏厂的 x86-64 架构，远做不到 Apple M1 那种级别的能耗比，15W 的功率限制 (PL1) 让 Gram 在持续高性能需求面前捉襟见肘，尤其是这 15W 还要同时支持 CPU 和 GPU。据一些测试，i7-1065G7 配上至少 40W 的供电才能如鱼得水，15W 嘛…它简直就像是被挂在架子上晒干的咸鱼。</p><p>如果很难从数字感受 15W 有多低的话，这里是一些实际使用体验。</p><p>从打开 DaVinci Resolve 的那一刻开始，掉帧和卡顿就像不断循环的 BGM，以最大音量反复播放，连剪个音频都颇为费劲。当我把 4K H.265 的素材导入进去后，它直接「乐死了」，预览区域动弹不得。</p><p>这对轻薄本要求确实太高了，讲点更实际的，比如外接显示器。4K 分辨率下，虽然日常操作还算流畅只是偶有掉帧，但当我打开 B 站看着视频和弹幕一会儿慢下来一会儿突然加速时…我觉得这方面我还是更喜欢用移动设备。</p><p>游戏性能更不用说。如果你晕 3D，那 Gram 能玩到你吐；如果你不晕 3D，用 Gram 就能体验晕 3D 了。往好处想，至少阻断了一大笔开销不是？不过说实话，画质调到勉强能看清，在 Cyberpunk 2077 上能跑到 7 FPS 也很对得住这颗处理器了。</p><p>我也不是没有尝试过绕过功耗墙，但迄今为止所有的尝试均以失败告终，更何况性能限制并非只有功耗墙。我能做的就是在 BIOS 里降低 50 mV 左右的电压，尽可能降低热量对性能的影响。</p><h3 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h3><p>单热管单风扇压 i7，你怕了吗？我怕了。开个机 CPU 温度 80 起跳 100 封顶，风扇转速拉满，听起来就像是企图用它玩游戏的人无助的哀嚎。处理只是需要稍微高点性能的任务，Gram 的 CD 面都会很快散发出比较明显的热感，以至于我怀疑，这次送修很有可能是长期高温导致的虚焊。</p><p>不仅如此。Gram 底面近乎无孔的设计（只有扬声器，螺丝藏在脚垫下面）严重加剧了散热的难度。它的风扇开口挪到了显示屏下方转轴处，避免放在软表面上导致风口被堵住的同时加大了散热难度，在下面摆个散热底座也收效甚微。</p><p>热量排不出去的结果就是，哪怕绕过了功耗墙，也会很快撞上温度墙而降频，性能暴跌。这也正是我手动调低电压的原因。功耗墙绕不过了，减缓一点撞上温度墙的速度总没问题吧？</p><p>问题挺大的，至少感知不强是真的。</p><h3 id="屏幕分辨率和亮度"><a href="#屏幕分辨率和亮度" class="headerlink" title="屏幕分辨率和亮度"></a>屏幕分辨率和亮度</h3><p>屏幕是 LG Gram 的一大优势，但它还是存在一些小小的问题，比如，只有 1080P（16 寸及以上不是），和峰值亮度不够。</p><p>前者不用说了，正是为了弥补这块分辨率不够的屏幕我才会考虑买个 4K 显示器用来写代码。对比同学的 Redmibook Pro 15，1080P 的字体显示即使是 14 寸 + 已经用上了所有优化方案的情况下都还有掩盖不住的发虚。</p><p>后者嘛，室内无法感觉到明显的差异，我也一直觉得没啥问题，直到我上次在高铁上顶着阳光用它码字，屏幕暗到只能勉强看清楚我写了啥。如果是游戏本还好，没有室外使用场景，可这是专注移动办公的轻薄本，我也只能含泪吐槽了。</p><h3 id="质感"><a href="#质感" class="headerlink" title="质感"></a>质感</h3><p>我身边所有人第一次接触 Gram 的时候，结合它极低的体重，无一例外都觉得它的外壳是塑料。</p><p><del>其实它就是塑料没想到吧嘿嘿嘿。</del></p><p>解释得多了就非常、非常让人懒得再解释下去了。它的外壳真的是金属，而且如果你不小心撞掉一小块漆，USB-C 口插着电把手放到那块掉漆的地方它还能电你。它只是长得很塑料，内里还是挺扎实的。</p><p>但内里扎实有什么用？看到 Gram 不一定能摸到 Gram，看着拉胯那还是拉胯。</p><h3 id="扬声器"><a href="#扬声器" class="headerlink" title="扬声器"></a>扬声器</h3><p>宣传图上说的 DTS:X Ultra 听起来很不错，实际使用感受让人决定把它直接关掉。</p><p>这可能并不是 DTS 的错，毕竟 DTS 做得再好，硬件上的鸿沟终究是软件无法弥补的。Gram 双扬声器的设计，没能节约多少内部空间（那个扬声器大小再塞一对进去都还绰绰有余），还成为了设计的一大败笔。就算一个人在安静的环境下用电脑，我都不会想打开 Gram 的扬声器。</p><p>它拉胯到什么程度呢？哪怕声音只开到 50% 都还是能听到破音，有时我会把声音拉到 100% 将 QQ 电话转接到外放，本就不高的通话质量经过破音这一折腾，<br>简直就是耳朵堕胎的灾难。</p><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>不知道什么原因，我手上的这款 Gram 有比较明显的延迟。平常使用感觉不出来，但一旦操作被简化到触控板&#x2F;键盘轻点，它诡异的延迟就暴露无遗。Montaro 不是音游还能忍，Muse Dash 我用 Gram 玩过一把之后转手就申请了退款。</p><p>至于是什么原因，我到现在也还没有摸清楚，在我外接显示器和键鼠、关闭所有后处理效果后，这一症状没有任何缓解。值得一提的是，接上显卡坞后似乎没有那么严重了（尚未严格测试），可能是 Iris 核显带来的问题？目前我已经打消了在 PC 上玩音游的念头，也就无从查证了。</p><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>Gram 键盘的手感也是长久以来一直被人诟病的点之一，尤其是它软绵绵的回弹。在手感优异的笔记本键盘大行其道的今天，很多时候友商产品线里 Gram 一半价格的产品甚至我写到这里时用的罗技 K380 就足以将 Gram 的手感按在地上摩擦。</p><p>有个不知算不算问题的问题，鉴于 Gram 外壳用料偏软，键盘面用力按压就会有比较明显的下陷。当然，会下陷的只有一小块部位，一般敲键盘也远远达不到能让它下陷的力度，这就见仁见智了。</p><p>当然，Gram 的键盘还是有点优势的，比如键程。它的键程是我摸过所有笔记本里最长的，哪怕和游戏本相比也不遑多让。这又是一个见仁见智的问题：我觉得它一定程度上让手感好了一点，也正因如此一直对它的手感持中立态度，不过也有人认为，过长的键程配合过软的回弹，手感烂上加烂。</p><p>除此之外，Gram 的键位争议不小，不过在 2020 14 寸款上似乎没有体现，至少方向键是很正常的等大的小按键，Fn 功能左右映射到 Home 和 End，上下映射到 Page Up 和 Down 也很贴心。</p><p>再来说说背光。它的背光峰值亮度就跟屏幕峰值亮度一样拉胯，尤其是键盘是白色的背光也是白色的，打开背光后外部稍微有点光，整个键盘就会连个字母都看不见，能派上用场的场景就只有伸手不见五指的深夜一个人码字。</p><p>深夜一个人码字也就算了，至少有点使用场景，更让人无法忍受的是，它的背光不仅亮度低还漏光，亮得还不均匀。有几个字母不管怎么看就是比别的字母亮，而当从侧面看去的时候，缝里透出的光，证明了按键的亮度确实。</p><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>我特别好奇一开始到底是哪篇评测说的鬼话，说「LG Gram 的触控板很大，做工很好，手感很不错」。</p><p>事实上，它的触控板不大（16:10 设备另说），摸起来手感确实很好，只要别按下去。上下两端最大下沉深度和按压所需力度摸起来就像是两个触控板，如果以使用 MacBook 触控板的习惯，很可能从下往上拖动的时候，拖到一半就已经被判定为松开了。</p><p>做工嘛…就更不敢恭维了。从我拿到它的那一天开始，它的四边接缝就不均匀，宽的可以卡进去小拇指指甲，窄的和外壳紧密相贴。更迷惑的是，触控板似乎不是固定的，因为每次剧烈晃动后我把它从包里拿出来，各边的宽窄都会有变化。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="预装第一方"><a href="#预装第一方" class="headerlink" title="预装第一方"></a>预装第一方</h3><p>LG 自家应用虽然不够优雅，但也还算不错。它自带了控制中心、电源管理、阅读模式、屏幕显示、使用指南等应用，我们慢慢讲。</p><p>谢天谢地，Gram 没带 McAfee 也没带一票「电脑管家」，只有一个颇为简洁的控制应用，可调整最大充电量、开盖启动、C 口充电模式等。听起来很不错，但它在某次更新后就没能再打开。更糟的是，大部分设置在 BIOS 里根本找不到，也就彻底不能再修改了。</p><p>除此之外的系统控制，基本上就是 Windows 功能的套壳。电源管理，有点像部分 Android 系统自带的情景模式，没啥槽点（于我而言更没啥使用场景）；阅读模式好像会和 Windows 自带的同名功能冲突，作用也大致相同，都是套个变黄滤镜。</p><p>屏幕显示倒是有点意思，会在部分键盘操作时冒出来给个比亮灯更明显的反馈，比如开启 &#x2F; 关闭大写锁定、调整键盘背光亮度等等。值得一提的是，把它卸载掉之后，别的所有功能都能正常运行，唯独触控板开关指示灯状态再也不变了（快捷键功能一切正常），逼人不得不使出浑身解数再把它找回来——对了，LG 官网上根本找不到它们。</p><h3 id="预装第三方"><a href="#预装第三方" class="headerlink" title="预装第三方"></a>预装第三方</h3><p>抛开那些「还不错」的官方应用，Gram 上带的第三方应用就让人不敢恭维了。它预装了好几个 Microsoft Store 里的，可以进行音频视频和图片编辑的应用，它们价格高昂但用户数量和评价都不算高，使用体验也确实不怎么样，尤其是和那些免费好用的桌面端应用比起来。</p><p>不过，如果只是轻度使用，它们也确实能满足一定程度的需求，这点不假，如果你能忍受它们令人难受的界面和操作逻辑，以及它们由不知名的小开发商发布的话。</p><p>除开这些，Gram 就没有更多的预装应用了。考虑到 UWP 应用都有独立的沙盒并且可以一键卸载，比起那些预装一大堆应用的大厂，也确实挺干净。</p><h3 id="非预装第三方"><a href="#非预装第三方" class="headerlink" title="非预装第三方"></a>非预装第三方</h3><p>这听起来不应该有问题啊？不都是运行在 x86-64 平台上的 Windows 家庭版（Gram 搭载的不是家庭中文版）吗？能有啥问题？</p><p>Intel Extreme Tuning Utility (XTU) 先给了我当头一棒，然后是所有企图监测 GPU 的软件。</p><p>前者以及所有我尝试过的同类软件都不支持调整 10 代及更新的、非原设计支持的产品，这也正是我必须要在 BIOS 里修改电压的原因。后者更气人，不管是不是牙膏厂官方都读不出来这颗 Iris 核显的具体数据，甚至有离谱的时不时告诉我，核显的频率在 4 GHz 和 0 之间反复横跳，而 CPU 不过也才 2 GHz。</p><p>另一个问题来源于驱动。Intel 的驱动更新来源是个谜，配合上国内时好时坏的 Microsoft Store 则有过之而无不及，甚至我电脑送修前备份数据的时候一打开 Microsoft Store 才意识到，原来显卡管理应用一直都有更新，只是从来没装上过。</p><p>糟糕的驱动更新导致部分应用渲染问题难以迅速得到解决，比如 Steam 九大名著之一，《山》。我前几次打开它时，直到我把它关掉都只能看到卡住的白色四边形，直至我插上了外接显卡，它才终于正常工作。</p><h2 id="售后与服务"><a href="#售后与服务" class="headerlink" title="售后与服务"></a>售后与服务</h2><h3 id="保修政策"><a href="#保修政策" class="headerlink" title="保修政策"></a>保修政策</h3><p>另一个槽点来了：LG Gram 一个非常亮眼的点就是极其强大的可扩展性，它堆料近乎顶级，还预留了顶级的扩展位供用户自行定制，但是…用户一旦定制，保修就没了。</p><p>LG 官方的说明原文如下：</p><blockquote><p>「笔记本产品需要添加内存或SSD（固态硬盘）时，须由LG售后指定维修站或指定经销商负责，由顾客付费进行，后续享有LG包修服务，客户要求使用第三方内存或SSD、或自行更换时，LG不提供服务，并且后续不享有LG包修服务。」  </p></blockquote><p>翻译过来也就是说，即使拥有这么强的可扩展性，LG 还是只允许用户在屈指可数质量也参差不齐的官方授权维修点对设备进行定制。就算 Gram 的后盖实在配不上它的可维护性，总该至少给个尝试的机会吧？而且，在我重读数次后发现，似乎只要用户不是在 LG 官方购买的内存条 &#x2F; 硬盘并交由 LG 官方安装，LG 都有权拒绝保修。这对于一款以可扩展性著称的笔记本，实在是不应该。</p><h3 id="维修站点"><a href="#维修站点" class="headerlink" title="维修站点"></a>维修站点</h3><p>这一项的拉胯直接拖了整个保修的后腿。我前前后后一共接触了三家维修点，每一家给我的感觉都不一样。总体上来说，技术人员比接待人员更适合接待人，外包服务比官方维修给人感觉更好，这对于一个 LG 这种体量的公司而言实在是太不应该了。接下来是我比较长的维修记录，若您嫌太长可以点击 这里 直接跳到总结部分。</p><h4 id="重庆商社家维电器有限公司"><a href="#重庆商社家维电器有限公司" class="headerlink" title="重庆商社家维电器有限公司"></a>重庆商社家维电器有限公司</h4><p>这是三家里面我最满意的一家，也是唯一一家实际探访的。</p><p>2020 年暑期内存价格非常实惠，我旅游之余特意在京东上买了根内存条送到重庆，想着重庆有维修点，可以顺路把 Gram 的内存从 8 GB 扩容至 16 GB，就当是在重庆到处逛逛。</p><p>电话询问后，对方表示 LG 笔记本电脑维修有专门的师傅，需要提前预约，并给了我师傅的电话。我和师傅还算聊得开，交流一会儿后对方爽快地答应了维修时间。</p><p>从外观看起来，这家维修点专门承接各大厂商的维修外包，许多品牌的电子设备都在他们家维修，LG 就是其中之一。在我和第一次见到笔记本顾客的师傅有一搭没一搭地聊了几分钟后，师傅把装好内存条的电脑拿回给我并收了¥100 维修费，此次维修告终。</p><p>不得不说，师傅的操作可以用无比娴熟来形容，实在不敢相信他是第一次实际维修以难拆出名的 Gram。维修过程很愉快，但此次维修后师傅并未给我开具维修单，也未在 LG 的系统里留下维修记录，留下了一个小问题。</p><h4 id="长沙乐广电器维修服务有限公司"><a href="#长沙乐广电器维修服务有限公司" class="headerlink" title="长沙乐广电器维修服务有限公司"></a>长沙乐广电器维修服务有限公司</h4><p>我对 LG 售后服务的失望从这家开始。明明在官网上的维修范围里白纸黑字包含了「笔记本电脑」，当我准备抽空去一趟，想一个电话打过去先求救+预约时，得到的答复却是非常慵懒傲慢的「我们暂时并不提供笔记本电脑维修服务」，然后扔给了我售后服务热线的电话。</p><p>我还能怎么样？全湖南估计也就这一个维修点了，还不给我修笔记本，只能乖乖去找北京。</p><h4 id="北京乐金电子技术服务中心"><a href="#北京乐金电子技术服务中心" class="headerlink" title="北京乐金电子技术服务中心"></a>北京乐金电子技术服务中心</h4><p>与北京总维修点接触了几次后，我深深地感受到，一开始要是没找长沙维修点而是直接打电话给了当年帮我装内存的师傅，可能这个问题已经结了。</p><p>当我一个电话打到 <a href="tel:4008199999">4008199999</a> 也就是 LG 售后服务热线时，我连笔记本电脑该转接哪个键都没听到，又一次深刻意识到了笔记本电脑业务在 LG 中国的式微。没办法，转接家用电子吧。对面的人工客服倒是挺靠谱，记录下了我的问题类型、姓名和电话，告诉我稍后会安排专人打电话回来。</p><p>第二天（周一）上午，我成功接到了被标记为北京乐金电子技术服务中心的电话（奇怪的是，我在写下本文时，官网上查询服务点全北京范围内和寄修的收货地址附近都没有这家）。直到我电脑寄出前，与我联系的一直是一位语气比长沙乐广还要慵懒还要傲慢口音还操着点京腔，每次我提问题或要求重复听起来都很不耐烦的女士。我与她交谈数次后，她要求我将发票和凭证寄给指定的地址，维修前的交流到此为止。</p><p>顺丰把快递送到北京后，我接到了另一个京腔操着口音的电话，来自 LG 售后点的维修师傅。这次电话交流相当愉快。对方在无维修记录、无维修单，并且明确知道内存非 LG 官方指定的情况下仍为我免费处理，也接受了我拆机维护、清灰的请求，还同意维修完毕后运行三天以保证问题短期内不再复现。</p><p>不久后，我从顺丰处顺利取回电脑，该次维修圆满结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里已经 5500 字，我依然觉得前文一定还有遗漏。Gram 为数不多的优势就是轻薄和长续航了，但在 PD 高容量充电宝大行其道的今天，维持一整天的续航并不是什么难事，这又在 Gram 的坟上盖了一抔土。</p><p>可我依然觉得我会买 LG Gram。我就是喜欢它塑料般用两根手指就能拎走的机身，就是喜欢它干干净净的自带系统，就是喜欢它不管从哪个角度都一样好看的屏幕，还有足以维持我在咖啡店码一下午字，不需要带任何其它配件的续航。我更喜欢那种轻便的感觉，这种感觉胜过一切不满，让我享受与它共同出门的每一天。</p><p>即使它具备这么多缺点，最重要的还是我不曾也不会后悔购入 LG Gram，并且我还有极强的更新至最新款的欲望（奈何没钱）。LG Gram 根本不是一台尽善尽美的电脑，但它在它的垂直领域确实占据了独一无二的位置。我不推荐任何人在不明确自身需求的情况下贸然选择 Gram 作为主力机，但如果你身边的朋友碰巧拥有一台 Gram，那还蛮值得试试的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 &lt;a href=&quot;https://github.com/cdr/code-server&quot;&gt;code-server&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。&lt;/p&gt;
&lt;p&gt;在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="LG Gram" scheme="https://blog.rachelt.one/tags/LG-Gram/"/>
    
  </entry>
  
  <entry>
    <title>站在普通人的角度，谈谈教育、兴趣、Linux 与编程</title>
    <link href="https://blog.rachelt.one/articles/education-interest-linux-and-programming/"/>
    <id>https://blog.rachelt.one/articles/education-interest-linux-and-programming/</id>
    <published>2021-03-17T17:51:15.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？</p><p>尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。</p><blockquote><p>本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。</p></blockquote><span id="more"></span><h2 id="当我们谈论现实"><a href="#当我们谈论现实" class="headerlink" title="当我们谈论现实"></a>当我们谈论现实</h2><p>我记得有听好友吐槽过教科书的不伦不类。它们既想激发学生对学科的兴趣，又想保持自身的绝对严谨，其结果就是往往写了很多复杂的公式和推理，却并没有带来什么实际意义，甚至都没能告诉学生这些理论知识能用来干什么。</p><p>这是一个很大的问题。一方面我们抱怨着现在的学生对学习越来越不感兴趣，另一方面我们把教科书写得越来越让学生提不起兴趣。</p><p>当我们不是因为学科之美，而是因为应试、因为绩点、因为越来越严重的内卷化而不得不学习某个学科的时候，它已经变味了，已经像饱受诟病的那样，「我又不可能买个菜还算个解析几何」。</p><p>不仅仅我们的教育是这样。每一个站在风口的行业，面临的都是这样的困境。我很小很小的时候，所有人都在学乐器学书画；我读初中了，所有人都在学机器人；我上大学了，大人们疯狂往计算机里挤，小朋友们也开始学少儿 Python 了。虽然在所有人都往人多的地方走的世界无可厚非，虽然确实真的有很多人藉此培养了自己的热爱，但对于更多的只是因为「它在风口上」、「怕孩子掉队」而一头扎进去的人，这值得吗？</p><p>在我看来，教科书、兴趣班甚至每个对某学科比常人多懂一些的人应该做的，不是摆架子摆身段昭告天下这门学科有多科学、多严谨、多复杂，学习它能带来多少好处，能帮助人在什么竞争中又出人头地一分。恰恰相反，是要让大部分人感受到这门学科有多诱人，让人知道为什么历史上有那么多名人，沉醉于这个学科带来的愉悦。</p><p>所有行业都应如此。Linux 之所以诱人，不是因为它历史有多么悠久，不是因为它配置起来有多复杂，更不可能是因为它只向有兴趣的人开放，而是因为，当我第一次在键盘上敲出那些命令，让看起来就很高端的、疯狂输出各种字符的窗口只围着我一个人转；当我花了好几个小时第一次编译出自己的嵌入式系统，随便抓起个 U 盘烧录完成功启动一台微型电脑；或者更早之前，当我执行 <code>sl</code> 之后看见一辆停不下来的火车从屏幕这边开到了屏幕那边时，内心涌起的兴奋感和成就感，就算用多少本 Linux 史书都压不下去。</p><p>就像我之所以能从容面对藏在各种各样的代码里各种各样的 bug 而丝毫不泄气，能够花一整个下午只是为了稳定一个很简单的特性，不是因为我用的语言有多先进，不是因为我写出来的代码性能有多优异，只是因为我满足了自己或者身边人的某个微不足道的需求，而满足这些需求带给我的成就感，胜过读完十本《从入门到精通》。</p><p>停止把这一切妖魔化吧。不管是数学还是物理，是 Linux 还是编程，它们对大部分人而言都不过只是一种与世界相处的方式，很多时候我们却一直在强调我们所懂的东西有多么深奥和高级，一直在为这一切设置无形的门槛，一直在劝退每一个试图了解这一切的人。「只有特别感兴趣的人才会深入钻研」没错，但是不试试，又怎么能知道自己是不是感兴趣呢？实在不行就当盲人摸象了吧，摸了象的盲人好歹能在某一天再次摸到象时意识到这是象，被「象很大很高很重一脚能把你踩死」这种话吓住连象都不敢摸的盲人，下次见到象也只有干瞪眼的份儿。</p><p>总有一天，我们都会负起自己该负的责任，成为各行各业各领域不可或缺的那一代人。到那时，难道我们还要设置门槛，劝退那些稍稍感兴趣的、还在犹豫的人吗？</p><p>至少我拒绝。如果我有机会，我会毫不犹疑地扔掉那些初步接触时根本不重要的死板而繁杂的理论。</p><p>一直以来，我也确实是这么做的。我想鼓励身边更多的人找寻 Linux 和编程的乐趣，想让他们知道编程不是改改代码看看输出就完事儿了，而是经常甚至马上可以派上用场的东西，如果有想做的东西大可一步一个脚印地做出来没人看笑话，Linux 也不是萌新之敌不会随随便便就让电脑爆炸，正相反，每条正确的指令带来的正反馈和命令行带来的强掌控感让人欲罢不能。在学习的过程中必然会碰到很多艰难险阻，而且会发现自己还有太多太多不知道的东西，那都不重要。重要的是，兴趣被调动起来了，然后一切都好说了。</p><p>话又说回来，那些理论真的不重要吗？当然不，否则也不会几乎所有人都从理论谈起。非要让我说的话，初次了解时，知道「这是个啥」确实很重要，除此之外的那些长篇大论，就留到兴趣使然时再说吧。</p><h2 id="当我们谈论我"><a href="#当我们谈论我" class="headerlink" title="当我们谈论我"></a>当我们谈论我</h2><p>我接触编程的具体时间已经很模糊了。很久以前，当我还是个 MC 玩家时，我第一次接触了我的「万恶之源」：ModPE。它采用 JavaScript 的基本语法，实现了一些能在 Minecraft PE 中改变游戏局势的功能。</p><p>在游戏里，当你不再需要挖一整个下午才能挖到一点点钻石，而是可以写几行代码直接刷满几箱子的钻石，你会选择哪个？这就是我初次真切地感受到编程带来的「成就感」。</p><p>那之后在社交平台上的成就暂且不提，借着 ModPE 的机会，我逐渐跟着各种现在看来很稚嫩的教程开始访问 Android 系统提供的诸多功能，直到我成功绕过游戏创建了第一个现在看来也很稚嫩的悬浮窗。很稚嫩，但作为一丢丢刺激、一丢丢兴奋和一丢丢成就感已经够了。以此为契机，我开始逐渐接触 Java 与 Android 开发。</p><p>在这之后，就是上架应用，获得微不足道又确实让人欢呼雀跃的下载量，甚至还有来自那么几个人的捐赠。</p><p>在这之后，就是逐渐接触越来越多的东西，学到越来越多的知识，开始思考、了解这一切的本质，开始逐渐向着独当一面进化。</p><p>尽管如此，在我已经懒得关注那些数字的今天，我还是很怀念第一行代码带给我的最初的感动。那是几乎改变了我整个人生轨迹的力量。</p><p>所以我其实并不觉得自己就有什么特别不一样的地方，我只是碰巧多会了一门手艺而已，这本质上和隔壁张三会木工楼上李四会弹琴一样，只是给了我一个稍微有点不同的与世界相处的方式。</p><p>家里书桌书架坏了，张三可以自己修，我们在忍和换之间还能选择；《底特律》的开场音乐尤其动人，李四可以自己把它弹出来，我们可以静静欣赏或者在内心大呼「卧槽牛逼」；教务系统少了好看的界面，会编程的人自己写一个，其他人还能忍受，又不是不能用。懂得如何更好地与世界相处确实会带来一些差异，但它远远没到被神化成一个不可或缺的技能的地步。</p><p>大部分人不会木工不会弹琴不会编程，他的一辈子照样可以过得很快乐。</p><p>一些时候的一些人，明明比普通人多了那么多能与世界好好相处的方式，过得却并不快乐。</p><hr><p>希望读完这篇并不短的随笔的你，在面对世俗的现实时，过得能更加快乐。</p><p>至少你可能还有写下人生中的第一行饱含着自由与激情的代码，或是执行人生中第一条不是因为「教程」这么说而是因为你想这么做的指令，或是摸出积满尘土的乐器感受遥远的生疏和热爱，或是不为了不挂科只是单纯地想要了解一门学科而翻开一本书的机会嘛，不是吗？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？&lt;/p&gt;
&lt;p&gt;尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>归于平凡的 18 岁，致终将平凡的自己</title>
    <link href="https://blog.rachelt.one/articles/to-the-years-forthcoming/"/>
    <id>https://blog.rachelt.one/articles/to-the-years-forthcoming/</id>
    <published>2021-02-18T16:00:30.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>如此平凡的晚上，伴着半梦半醒时远方传来的烟花声，人生中平凡的另一年悄然而至，或者已经开始，无声无息。</p><p>我就这样迎来了自己的成年，迎来了获知此前的期待早已失去意义的一刻。</p><p>在这一刻，我想回头看看自己。</p><span id="more"></span><h2 id="归于平凡"><a href="#归于平凡" class="headerlink" title="归于平凡"></a>归于平凡</h2><p>我想了很久该如何总结自己 18 年以来的人生，到最后我发现我承担不起。</p><p>就像一千个读者心里有一千个哈姆雷特，重要的不是活在作家心中的角色，而是角色在每个观众心中的投影。</p><p>就像我可以是在学术上咬死不放的暴躁学长，可以是不温柔不可爱但是噎死人第一名的逗比，也可以是在某些问题上有所见解的倾听者，更可以是数年前激起不大不小的风波的千古罪人。</p><p>那些几近被遗忘的，浩如烟海的过往并未因无人在意而毫无意义。它们组成了如今「我」的每一块碎片，牵一发而动全身。我在意地注视着它们，为自己保留放不下的傲气，在平凡的往复中忘却了存在的定义。</p><p>所以我选择把定义「我」这一任务，不负责任地交给每一个试图找到我的定义的人。</p><p>而在我眼里，至少我过去一直都是一个忠于自己的、平凡的人。</p><h2 id="终将平凡"><a href="#终将平凡" class="headerlink" title="终将平凡"></a>终将平凡</h2><p>我身边不平凡的人很多，但我从最开始就没想象过不平凡的自己。我胸无大志，幻想着平凡的生活，现在依然。</p><p>我找不同的理由逃避，我像极了吃不到葡萄的狐狸。</p><p>即使如此，我对平凡与生活的热爱，从一开始就占了上风。从偶尔挥笔写下供以后的自己理解的思绪，到 B 站娜娜子 <a href="https://space.bilibili.com/30751170">@cookie-NANA</a> 动态里一点一滴的快乐，再到身边某条陈旧的街道和快要消逝已然无法分辨的字迹，它们让我感觉我确确实实地活过，而非一个匆匆离去的过客。</p><p>我大概很难成为什么不一样的人。与生俱来的表现欲消失后，剩下的就只有对被关注的紧张与害怕。漏洞也好缺点也好，问题没人发现就不能得到解决，可我连跨出舒适圈让它们被指出的勇气都没有。</p><p>所以我很开心身边有那些人，也自私地希望身边那些人能和我一起度过时光之海，前往不知在何处的彼岸。</p><p>我也很开心能认识许多不一样的人、见识许多不一样的东西，在时光之海的浪潮冲刷掉粉饰与浮华后，还能让我留下一些用以珍藏。</p><p>我更开心的是能一直像如今的自己一样，平凡地倾听与被倾听、贴近与被贴近，不因种种桎梏畏首畏尾，不因弱点和软肋偶尔自然流露而紧张。再直肠子、再神经大条，也总会有我能信任的人、能做到的事。</p><p>或许将平凡贯彻到底，也能成为一种不平凡吧。</p><hr><p>这就是一个孩子在踏入黄金时代前，说不上是总结或者展望的，堆砌辞藻的陈词滥调。非常感谢你读到这里。</p><p>未开的荼蘼终归要绽放，正如久远的往昔也会随风而去。我不知道我如今的期望能在存留多久，这也正是我把它们存留于此的原因。很多年后我可能会感慨，可能会觉得可笑，也可能会感激自己，从一开始就没有动摇。</p><p>但是还没到那一天呢。</p><p>谁说得准呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如此平凡的晚上，伴着半梦半醒时远方传来的烟花声，人生中平凡的另一年悄然而至，或者已经开始，无声无息。&lt;/p&gt;
&lt;p&gt;我就这样迎来了自己的成年，迎来了获知此前的期待早已失去意义的一刻。&lt;/p&gt;
&lt;p&gt;在这一刻，我想回头看看自己。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>「分区存储」是个啥？</title>
    <link href="https://blog.rachelt.one/articles/scoped-storage-in-reality/"/>
    <id>https://blog.rachelt.one/articles/scoped-storage-in-reality/</id>
    <published>2020-11-12T02:20:35.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>书接上回。</p><p><a href="../android-storage-behavior-change/">前文</a> 我们说到，Android 10 引入的「分区存储」成为了不少媒体、用户、开发者关注的焦点。关于这一特性的文章层出不穷，但很可惜，这些文章要么只是概览，要么和官方一样说得一套一套的让人丈二和尚摸不着头脑，还有些搞错了分区存储的定位和原理。加上 iOS 和 Sandboxie 等前辈在应用隔离方面的成功实践，大部分人一看到「分区存储」这几个字，首先想到的就是这些前辈，进而理所当然地以为 Android 的分区存储 &#x3D; 给应用挂载独立的存储空间，不管应用怎么造作都不会影响到用户和其他应用。</p><p>理想很美好，可惜事实并非如此。我们慢慢讲。</p><blockquote><p>本文大部分论断囿于作者的能力、阅历和经验，仅代表作者的理解与推断，还请广纳思想，避免偏听偏信。</p></blockquote><span id="more"></span><h2 id="咋回事儿？"><a href="#咋回事儿？" class="headerlink" title="咋回事儿？"></a>咋回事儿？</h2><p>关于「分区存储」，引用官方在 <a href="https://developer.android.com/training/data-storage#scoped-storage">Android 文件和数据存储概览</a> 里的描述：</p><blockquote><p>为了让用户更好地管理自己的文件并减少混乱，以 Android 10（API 级别 29）及更高版本为目标平台的应用在默认情况下被赋予了对外部存储空间的分区访问权限（即分区存储）。此类应用只能访问外部存储空间上的应用专属目录，以及本应用所创建的特定类型的媒体文件。</p></blockquote><p>前文里已经粗浅地将开发者方面文件访问的历史变化捋了捋，少数派的这篇文章： <a href="https://sspai.com/post/61168">《还存储空间一片清朗：Android 的「沙盒」机制何时到来？》</a> 讲得也比较透彻，尤其是用户体验和隐私方面，在此不再展开细说。</p><h2 id="那它到底是什么？"><a href="#那它到底是什么？" class="headerlink" title="那它到底是什么？"></a>那它到底是什么？</h2><p>就应用启用分区存储后的实际文件访问行为而言，这里要再强调一遍前文强调过的内容：至少在 Android 10 上， <strong>分区存储只是关掉了应用的存储权限</strong> 。</p><p>启用了分区存储的应用，能够访问的内容限于：</p><ul><li>应用的专属存储目录（ <code>Android/data</code> 文件夹下）</li><li>媒体文件（要访问其他应用的文件需要申请权限）</li><li>用户通过 <ruby><rb>存储访问框架</rb><rt>Storage Access Framework</rt></ruby> （SAF）授权的其他文件</li></ul><p>等等，是不是搞错了什么？这三样可都不是新面孔。最后这个……还用说吗？这可是老朋友了，Android 5.0 Lollipop 开始几近成为完全体，从完全存储权限迁移到 SAF 也没有想象中那么费劲。第二个更早，连最早被引入 Android 的时代都难以追溯（很可能和 Android 1.0 一样老），只是在 Android 10 上，一些特性因为分区存储受到了更严格的限制。第一个在 Android 2.2 Froyo 上已经存在，比分区存储这个概念产生整整早了九年。再过三年，2013 年的时候，Android 4.4 KitKat 已经让应用不需要额外申请权限就能访问自己的专属存储目录了。</p><p>由此可见，所谓「分区存储」给应用分配的「沙箱」，从七年前开始存在至今，并且这七年来几乎没有变过。</p><p>除非应用申请暂时关闭分区存储，否则应用能访问的文件范围仅限于此。分区存储除了对媒体文件施加了一些额外的限制，其余都和关闭了存储权限没啥两样。至少现在，与其把分区存储看成一种新行为，一种新标准可能更加确切。</p><h2 id="为什么说-Android-11-是「一次跃进」？"><a href="#为什么说-Android-11-是「一次跃进」？" class="headerlink" title="为什么说 Android 11 是「一次跃进」？"></a>为什么说 Android 11 是「一次跃进」？</h2><p>Android 11 带来了一个很大的改变：位于 <code>Android/data</code> 目录下的文件不能被其它应用访问。</p><p>这乍看起来是一个令人窒息的操作（当然它也的确是），让应用放在 <code>Android/data</code> 下错误日志之类的文件或文件夹对用户隐藏，给以往很多理所当然的操作带来了巨大的困难，甚至直接成为不可能。</p><p>然而，这却是 Android 分区存储的拼图中，颇为重要的一块。Android 10 发布后，不少应用因各种原因（比如适配最新 Android 版本的需要和 Google Play Store 的威逼）开始接受分区存储，开始规范自身的行为，开始将 <code>Android/data</code> 作为自身文件存储的根目录。即使是 QQ 和微信这类「老顽固」，也已经在将数据迁移到 <code>Android/data</code> （虽然迁移得让人扼腕）。经过了一年的过渡，在 Android 11 推出的时候，顺水推舟让应用的存储目录不再对用户和其他应用可见，从而形成的，不正是用户一直渴望的，不管应用怎么造作都不会影响到用户和其他应用的「沙箱」吗？</p><p>说得确切些，「分区存储只是关掉存储权限」，并不意味着分区存储不是沙箱机制。和其他沙箱不同的地方在于，分区存储并不是动态地将应用放到独立存储空间中运行（Rikka 的 <a href="https://sr.rikka.app/">存储空间隔离（存储重定向）</a> 一直在做的事情），而是给应用提供一套行为规范，让应用主动利用系统给应用分配的独立存储空间。这个「系统给应用分配的独立存储空间」，就是 Android 11 上被系统保护起来的 <code>Android/data</code> 。</p><hr><h3 id="跋：不算科普的絮叨"><a href="#跋：不算科普的絮叨" class="headerlink" title="跋：不算科普的絮叨"></a>跋：不算科普的絮叨</h3><p>如本节标题一样，原以为本文会写成一篇小小的科普，没想到写着写着推断 <del>（阴谋论）</del> 占了上风，自然也就不会像正经的科普一样可靠。不管怎么说，还是希望各位能够多提出意见、发表感慨。思想的碰撞，无论是对参与方还是对旁观者，或许都有所裨益。</p><p>本文的资料主要来源已经在文中或前文以超链接形式给出，感谢对应的作者以及读到此的各位对本文的莫大贡献。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;书接上回。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../android-storage-behavior-change/&quot;&gt;前文&lt;/a&gt; 我们说到，Android 10 引入的「分区存储」成为了不少媒体、用户、开发者关注的焦点。关于这一特性的文章层出不穷，但很可惜，这些文章要么只是概览，要么和官方一样说得一套一套的让人丈二和尚摸不着头脑，还有些搞错了分区存储的定位和原理。加上 iOS 和 Sandboxie 等前辈在应用隔离方面的成功实践，大部分人一看到「分区存储」这几个字，首先想到的就是这些前辈，进而理所当然地以为 Android 的分区存储 &amp;#x3D; 给应用挂载独立的存储空间，不管应用怎么造作都不会影响到用户和其他应用。&lt;/p&gt;
&lt;p&gt;理想很美好，可惜事实并非如此。我们慢慢讲。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文大部分论断囿于作者的能力、阅历和经验，仅代表作者的理解与推断，还请广纳思想，避免偏听偏信。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.rachelt.one/tags/Android/"/>
    
    <category term="开发" scheme="https://blog.rachelt.one/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="存储" scheme="https://blog.rachelt.one/tags/%E5%AD%98%E5%82%A8/"/>
    
    <category term="分区存储" scheme="https://blog.rachelt.one/tags/%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>写给所有人的 Android 文件访问行为变更</title>
    <link href="https://blog.rachelt.one/articles/android-storage-behavior-change/"/>
    <id>https://blog.rachelt.one/articles/android-storage-behavior-change/</id>
    <published>2020-11-08T16:44:50.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>Android 初代发布至今已有 12 年，这些年间，Android 一直因系统版本碎片化而饱受诟病。据 Google 数据，在统计范围内仍有 26.3% 的设备运行着 Android Marshmallow 及以下版本的系统，而升级到 Pie 及以上的设备更是只占了 39.5%。面对如此繁杂的系统版本，应用的兼容性是个大问题，尤其是文件访问方面的资料太杂乱分散，带来麻烦又浪费时间。本文以 Poweramp LRC Plugin 的开发为契机写就，希望能帮助此后跳进存储这个大坑里的开发者，以及想了解不同系统版本差异的用户。</p><span id="more"></span><blockquote><p>本文探讨对象为 Android 原生 &#x2F; 类原生系统，深度定制系统带来的其他问题（点名批评一些国产砍了 DocumentsUI <sup><a href="#Android-4-4-KitKat-19">这是什么？ </a></sup> ），不会也无法在此提及。</p><p>下文范围限于通用文件访问，访问媒体文件或作为提供者的场景仅作补充，可能不够严谨。</p></blockquote><h2 id="Android-4-4-KitKat-以前-18"><a href="#Android-4-4-KitKat-以前-18" class="headerlink" title="Android 4.4 KitKat 以前 (~18)"></a>Android 4.4 KitKat 以前 (~18)</h2><p>众所周知，在 KitKat 以前的 Android 设备上，各路应用群魔乱舞，可谓「自启与保活齐飞，权限滥用共提权漏洞一色」，Android 4.1 之前连单独的读取权限都还没有。这一阶段，申请存储权限的应用能访问整个设备的存储空间（包括外置存储，如 TF 卡等）。那段时间的文件访问方式五花八门，应用可以通过 <code>GET_CONTENT</code> 和 <code>PICK</code> 两个 <ruby><rb>意图</rb><rt>Intent</rt></ruby> 的 <ruby><rb>行为</rb><rt>action</rt></ruby> 打开其它应用以选择文件，随后通过得到的 <ruby><rb>链接</rb><rt>URI</rt></ruby> 读取文件或对文件执行特定操作。前者获取到的 URI 只会允许应用读取内容，无法获取文件而不需要存储权限，后者则能使应用获取到指向文件本身的 URI，却并没能改变「群魔乱舞」的状况。</p><p>事实上，当时流行的解决方法（甚至被称为「正确」方法）是将 <code>PICK</code> 获取到的 URI 根据格式和来源解析并获取对应的文件路径，再通过 Java 提供的文件读写方案操作文件。获取路径的过程很复杂（也很脏），但它以添加几十行前人摸索出来的方法为代价，延续了许多开发者 Java 的操作习惯，或者单单只是绝对路径更「方便」，再加上文件系统直至 Android 10 才对应用封闭，这一方案「长盛不衰」。</p><blockquote><p>关于 <code>GET_CONTENT</code> 和 <code>PICK</code> ，官方的表述较难理解，同时由于写下此文时找不到合适的测试设备，虚拟机镜像也早已无处可寻，以上只是大概且很可能有所疏漏，建议使用前参考 <a href="https://developer.android.google.cn/reference/android/content/Intent#ACTION_GET_CONTENT">官方 ACTION_GET_CONTENT 文档</a> （只有英文）并多次测试，若有错误欢迎指出。</p></blockquote><p>不过，何必非得弄得这么脏？应用已经有了整个存储的读写权限，自己造一个文件选择器也不是什么难事。除此之外，经历过那段时期的人一定忘不了 <code>/sdcard/</code> 、 <code>/storage/emulated/0/</code> 等等绝对路径。如此，花样层出不穷，用户体验严重割裂，粗放管理（以及粗放管理下积累起来的过时资料）或许就是一大堆问题的起源、今日文件存储问题的开始。谁知道呢？</p><h2 id="Android-4-4-KitKat-19"><a href="#Android-4-4-KitKat-19" class="headerlink" title="Android 4.4 KitKat (19)"></a>Android 4.4 KitKat (19)</h2><p>从 KitKat 起，Android 引入了一套全新系统「<ruby><rb>存储访问框架</rb><rt>Storage Access Framework</rt></ruby>」，也就是 SAF，以及对应的 <ruby><rb>标准 UI</rb><rt>DocumentsUI</rt></ruby> 。 <a href="https://developer.android.google.cn/about/versions/kitkat#44-storage-access">官方描述</a> 如下：</p><blockquote><p>新的<strong>存储访问框架</strong>让用户能够在其所有首选文档存储提供程序中方便地浏览并打开文档、图像以及其他文件。用户可以通过易用的标准 UI，以统一方式在所有应用和提供程序中浏览文件和访问最近使用的文件。</p></blockquote><p>用大白话来说，使用 SAF，应用可以打开一个文件选择界面，使用户在标准 UI 内从所有 <ruby><rb>文档提供程序</rb><rt>document provider</rt></ruby> （作为文件来源的应用，比如照片、网盘）中选择文件，并将其授权给应用。引入 SAF 统一了用户体验，增加了文件来源（以往只能从某个应用选择，现在可在一个地方看到所有应用），也不要求通过 SAF 读写文件的应用获取存储权限。标准 UI 集成了 <code>GET_CONTENT</code> 的支持，也就是说，本身并没有适配 SAF 的应用也可以 0 成本通过标准 UI 选择文件，并保持与原来相同的行为（只要没用脏方法）。同时，Android 开始收紧外置存储的访问，应用必须请求读写权限才能操作外置存储，并且 <a href="https://www.androidcentral.com/kitkat-sdcard-changes">外置存储限制不小</a> 。这也造成了一揽子依赖 SD 卡的应用在系统更新到 KitKat 后停止工作，带来了不少抱怨。</p><p>KitKat 的 SAF 提供了 <code>CREATE_DOCUMENT</code> 和 <code>OPEN_DOCUMENT</code> 两个 action，分别对应创建文件和打开文件。 <code>GET_CONTENT</code> 并没有消失，它仍能像此前一样用于读入数据，而 SAF 提供给应用的是文件的「长期、持续访问权限」。例如，如果应用需要导入头像，那么它只需要 <code>GET_CONTENT</code> 即可，但若应用需要剪裁头像并保存到原文件，则必须使用 <code>OPEN_DOCUMENT</code> 。</p><p>随着 SAF 一同进入 KitKat 的，还有 <ruby><rb>内容解析器</rb><rt>ContentResolver</rt></ruby> 的新方法： <a href="https://developer.android.google.cn/reference/android/content/ContentResolver#openFileDescriptor(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal)">openFileDescriptor</a> 。它返回 <code>ParcelFileDescriptor</code> ，提供来自 Java 的 <ruby><rb>文件描述符</rb><rt>FileDescriptor</rt></ruby> ，与实际的文件对应，可以使用 Java 的文件读写方案读取。文件描述符只指向文件内容，提供基础的读写，但不包含文件路径，也没有 Java 常用的 <ruby><rb>文件</rb><rt>File</rt></ruby> 的复杂功能。根据 <a href="https://developer.android.google.cn/training/secure-file-sharing/request-file#OpenFile">官方的描述</a> ，</p><blockquote><p>由于客户端应用只会收到文件的内容 URI，因此，在此过程中可确保文件的安全。由于此 URI 中不包含目录路径，因此客户端应用无法发现和打开服务器应用中的任何其他文件。只有客户端应用可以访问该文件，而且必须具有服务器应用授予的权限才能访问。</p></blockquote><h2 id="Android-5-0-Lollipop-21"><a href="#Android-5-0-Lollipop-21" class="headerlink" title="Android 5.0 Lollipop (21)"></a>Android 5.0 Lollipop (21)</h2><p>Android 在 Lollipop 上进一步扩展了 SAF 的功能，允许应用使用新增的 action <code>OPEN_DOCUMENT_TREE</code> 请求用户授予某个目录下所有文件和文件夹的完全权限。由于标准 UI 具备外置存储的访问权限，应用可以通过这一新增特性再次取得 SD 卡权限，尽管通过 SAF 访问文件与此前有较大出入，但终归算是能用。</p><p>但是，秉着「能不做为什么做」的理念，诸多应用仍旧固守传统的文件访问方式，即便它们可以申请访问整个存储空间并获得类似的权限。</p><h2 id="Android-6-0-Marshmallow-23"><a href="#Android-6-0-Marshmallow-23" class="headerlink" title="Android 6.0 Marshmallow (23)"></a>Android 6.0 Marshmallow (23)</h2><p>Marshmallow 带来了 <ruby><rb>运行时权限</rb><rt>Runtime Permission</rt></ruby> ，针对 Marshmallow 及更新的 Android 版本开发的应用，不仅需要像以前一样在清单文件中声明，还需要在使用权限的时候由用户手动许可，才能够使应用获取权限。理想很美好，但没有统一规范的结果就是应用针对的 Android 版本提高了，滥用权限还是没变。在国内最常见的是，当应用第一次启动时，弹出一堆授权窗口，用户只能选择同意，否则，有点良心的应用会好好说明为什么需要权限，中等的是重复请求授权，没良心的直接不给用。</p><p>另一项重大的改动在于 <ruby><rb>可采用的存储设备</rb><rt>Adoptable Storage</rt></ruby> ，它允许用户将 SD 卡等外置存储格式化并作为内置存储使用，从而大幅增大存储空间。这与本文主题关系不大，但值得注意的是应用通过系统方法获取到的缓存文件夹等会随着应用安装的位置而变动，一定程度上避免了应用使用绝对路径访问文件。但…真的有人将 SD 卡这么用么？随着主流设备逐渐淘汰手机的 Micro SD 卡槽，这一特性也成为历史。</p><h2 id="Android-7-0-Nougat-24"><a href="#Android-7-0-Nougat-24" class="headerlink" title="Android 7.0 Nougat (24)"></a>Android 7.0 Nougat (24)</h2><p>Nougat 将应用间共享文件限制得更加严格，禁止将附带文件路径（ <code>file://</code> ）的 URI 暴露给任何其他应用，只能提供 <code>content://</code> URI。当然，只要一直遵循规范，无论是文档提供程序还是普通应用都不会在这里撞墙。</p><p>可能导致问题的是另一项特性： <ruby><rb>虚拟文件</rb><rt>Virtual Files</rt></ruby> 。此前的文档提供程序所提供的 URI 必须对应实际存在的文件，但在一些情况下，存储的文件或许并不能直接使用。考虑到这个问题，Nougat 提供了不需要对应实际文件的虚拟文件，其无法使用传统的文件读写方案读取，需要采取 <a href="https://developer.android.google.cn/about/versions/nougat/android-7.0?hl=zh_cn#virtual_files">特殊的方法</a> 获得文件输入流。</p><blockquote><p>虚拟文件本身概念抽象，加上官方的描述自相矛盾且 Nougat 以后就从未提及，使用到它的应用不多，相关的文章更是少之又少，能够把一切说清的几乎没有，因此本文暂且将其搁置不论。没有碰到最好，万一碰到了，可以参考这篇文章： <a href="https://commonsware.com/blog/2016/09/06/virtual-files-faq.html">Virtual Files FAQ (Sorta) - CommonsWare</a> ，目前能找到的最详细的描述。</p></blockquote><p>此外，Nougat 还提供了 <ruby><rb>作用域目录访问</rb><rt>Scoped Directory Access</rt></ruby> 以及一系列特定的存储目录（称为「标准外部存储目录」），例如图片、音乐等，在获得用户对这些存储目录的授权后，应用即获得了这一目录的完整权限。这有点像是 <code>OPEN_DOCUMENT_TREE</code> ，同样不需要声明权限，同样可以获得完全权限，但应用获得的路径由应用决定，免去了用户选择这一步骤。尽管如此，应用已经对完全读写权限的使用习以为常，因而这一特性的实际使用场景十分有限。其具体文档已经无处可寻，大概和下文将提到的、 Android 10 推出的 <ruby><rb>分区存储</rb><rt>Scoped Storage</rt></ruby> ，或者 Android 提供的强大的媒体文件访问脱不了干系。</p><h2 id="Android-8-0-Oreo-26"><a href="#Android-8-0-Oreo-26" class="headerlink" title="Android 8.0 Oreo (26)"></a>Android 8.0 Oreo (26)</h2><p>SAF 在 Oreo 被进一步增强，带来了三个新特性。</p><p>针对尚未下载的云端文件，Android 允许第三方的文档提供程序提供新型「可寻址的文件描述符」，这种文件描述符以及 <a href="https://developer.android.google.cn/reference/android/os/storage/StorageManager#openProxyFileDescriptor(int,%20android.os.ProxyFileDescriptorCallback,%20android.os.Handler)">新的使用方法</a> （以 <code>ProxyFileDescriptorCallback</code> 作为回调）使应用每次对文件进行操作的时候都会唤起文档提供程序并动态地加载应用所需内容，要多少就加载多少，从而避免了文件提供给应用时，文件必须全部下载到设备上。</p><blockquote><p>事实上，虽然该特性是全新的，但文件描述符还是那个 <code>ParcelFileDescriptor</code> ，只是使用方法变了而已。</p></blockquote><p>此前，媒体文件不能像文件一样被操作（例如移动、复制、删除），媒体管理器（相册、音乐播放器等）要让某个媒体文件变成可以操作的文档，只能在存储空间里面一个一个文件夹找（遍历）。Oreo <a href="https://developer.android.google.cn/reference/android/provider/MediaStore#getDocumentUri(android.content.Context,%20android.net.Uri)">引入的新操作</a> 允许媒体文件的 URI 与文档的 URI 互相转换，从而为媒体管理器提供了极大的方便。尽管如此，这种操作并不会同步授予应用对应文件的权限，应用仍然需要使用 SAF 获取用户许可才能操作文件。</p><p>最后一个新特性允许应用「从文件系统的根目录中确定路径」，根据官方的描述，可以满足有如下需求的应用：</p><blockquote><ul><li>您的应用使用可以显示特定文档位置的“另存为”对话框。</li><li>您的应用在搜索结果视图中显示文件夹并且如果用户选择某个文件夹，应用必须加载此特定文件夹内的子文档。</li></ul></blockquote><p>之所以这个特性写得这么保守又简短，是因为 Android 开发者文档根本没有说如何利用这种路径，而且这个特性的讨论度低得吓人，貌似作用就只有展示给用户。下面附上一段个人的测试结果，仅供参考，如果用不上的话可以跳过不看。</p><blockquote><p>根据测试，这个特性仅对通过 <code>OPEN_DOCUMENT_TREE</code> 获取到的文档树 URI 生效，如果对 <code>OPEN_DOCUMENT</code> 获取到的文档 URI 使用则会报 <code>java.lang.SecurityException</code> ，提示需要只有系统应用才能获取的 <code>MANAGE_DOCUMENTS</code> 权限。并且，这个特性有时会给出 <code>raw: /storage/emulated/0/XXX</code> ，而有时只会给出类似 <code>primary:XXX</code> 或者 <code>home:XXX </code> 的路径（后者 <code>home</code> 估计意为文档的主目录，前者大概是「标准外部存储目录」？），挺混乱的。</p></blockquote><h2 id="Android-9-Pie-28"><a href="#Android-9-Pie-28" class="headerlink" title="Android 9 Pie (28)"></a>Android 9 Pie (28)</h2><p>Pie 上对文件访问改动很少，唯一的差异是进一步提升了应用文件的安全性：针对 Pie 及更高版本开发的应用「无法使用所有人都可访问的 Unix 权限与其他应用共享数据」，也就是无法使应用自身存储的数据对所有应用开放。</p><h2 id="Android-10-29"><a href="#Android-10-29" class="headerlink" title="Android 10 (29)"></a>Android 10 (29)</h2><p>Android 10 带来的「 <ruby><rb>分区存储</rb><rt>Scoped storage</rt></ruby> 」是近年 Android 更新讨论的焦点之一。从 Android 10 开始，所有针对 Android 10 及更高版本开发的应用，除非使用特殊方法，否则都无法访问传统的存储空间。应用只能访问自己的专属文件或缓存文件夹，或通过系统提供的标准方法访问位于存储空间的媒体文件，要么就必须使用 SAF 配合系统标准方法。这意味着此前所有的「脏方法」，在针对的 Android 版本提升后全部失效。为了确保开发者积极适配 Android 的新特性，Google 目前还要求新应用上架 Google Play Store 及老应用更新时，针对的 Android 版本必须为 Android 10 以上。也就是说，只要是这几个月在 Play Store 更新过的 Android 应用，基本都适配了分区存储规范。</p><p>但是，分区存储并没有从实质上解决文件和文件访问方式混乱不堪的问题。首先，Google 为了给应用更多的缓冲时间，预留了 <a href="https://developer.android.google.cn/training/data-storage/files/external-scoped#opt-out-of-scoped-storage">一个标记</a> ，允许应用暂时通过老方法访问存储空间。而且 Android 作为开放的系统，不说那些直接提供安装包给用户的，大型的应用分发渠道（应用商店）远不止 Play Store 一家，虽然各家商店都有自己的规范，但各家商店审核不严格（点名批评所有国民级应用），而且这些规范都又老又旧，仿佛来自上个世纪。最后也是最重要的是，分区存储并不是类似于 iOS 或者 Windows 上 Sandboxie 的应用沙箱，至少在 Android 10 不可能是。正相反，从行为上而言，它只是 <strong>关掉了应用的存储权限</strong> 。</p><p>关于分区存储，在此就先按下不表。三言两语不一定能讲清楚，而若要详尽解答各个问题，可能就要另起一篇文章了。总之，对于本文，知道分区存储只是关掉存储权限即可。</p><p>除了分区存储，Android 10 在文件方面还作出了数项改进。</p><p>为了防止媒体文件在写入时被修改，Android 10 上的应用可以 <a href="https://developer.android.google.cn/training/data-storage/files/media#pending-media-files">标记媒体文件为待处理</a> ，从而获取对媒体文件的独占访问权限，推测其效果大概类似于 Windows 上的「文件被占用」。</p><p>同样是写入媒体文件，Android 10 默认会按照文件类型将媒体文件存储至对应文件夹，也 <a href="https://developer.android.google.cn/training/data-storage/files/media#provide-hint">给了应用指定存放路径的自由</a> 。例如，使用系统标准方法存储、不指定路径的图片默认在 <code>Pictures</code> 文件夹，应用也可以选择将其保存在 <code>Pictures/我的应用</code> 里。为了防止这个特性被滥用（比如明明是个图片却要丢进音乐里），Android <a href="https://developer.android.google.cn/reference/android/provider/MediaStore.MediaColumns#RELATIVE_PATH">作出了相应的限制</a> 。</p><p>在 Android 10 上，不同的外置存储拥有各自唯一的名称。如果应用需要记录文件的来源，或者控制文件存储到哪个外置存储， <a href="https://developer.android.google.cn/training/data-storage/files/external#unique-volume-names">这个特性</a> 便能派上用场。</p><h2 id="Android-11-30"><a href="#Android-11-30" class="headerlink" title="Android 11 (30)"></a>Android 11 (30)</h2><p>文件访问及分区存储在 Android 11 上迎来了一次跃进。</p><p>Android 10 用于通过老方法访问存储空间的标记，在针对的 Android 版本提升到 Android 11 后不再可用，为了适应部分应用（比如文件管理）的需要，新的权限 <code>MANAGE_EXTERNAL_STORAGE</code> 应运而生。申请这个权限的应用和此前一样，拥有对存储空间的完整访问权限。根据观察，暂且可以把这个权限当作原来标记的替代品，其功能相差不大。当然，Google 可不是傻瓜，毕竟是自己造出来的规范，自然不会让随便什么阿猫阿狗都能挂着这个权限在 Play Store 上招摇过市。具体的使用范例、条件等可以查阅 <a href="https://developer.android.google.cn/training/data-storage/manage-all-files">管理所有文件的官方文档</a> 。</p><p>在 Android 11 上，Java 提供的传统文件访问方案被部分带了回来：只要拥有媒体文件的读写权限（例如应用专属目录的文件或是应用自身创建在存储空间的媒体文件），应用就可以通过 <a href="https://developer.android.google.cn/training/data-storage/shared/media#direct-file-paths">直接文件路径</a> 读取这些媒体文件。当然，这种方案受到分区存储的限制，强行访问应用不该访问的地方会导致报错。</p><p>Pie 引入的特性在 Android 11 上又进了一步：针对 Android 11 开发的应用不但不能让自己的数据对所有应用开放，也不能访问其他针对 Oreo 及以下版本的应用开放的数据。</p><p>受影响的还包括应用位于 <code>Android</code> 目录下的外部存储目录。以前，这些目录的访问限制很少，只要应用没有启用分区存储并且拥有存储权限，它就几乎能在这里肆意妄为。现在，无论是停用分区存储还是使用 SAF 请求用户授权， <code>Android/data</code> 目录都不再对应用开放（虽然它还在那里），意味着分区存储正朝着 Google 预想的方向前进，并且已取得一定成效。Android 11 的 SAF 对 <code>OPEN_DOCUMENT_TREE</code> 的限制不止于此。针对 Android 11 开发的应用无法再请求用户授予对各个存储设备（包括自带的存储空间和外置存储，例如 SD 卡）根目录以及系统下载目录的权限，提高用户的隐私安全。</p><hr><h3 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h3><p>作为一个文笔不精阅历不深的摸鱼开发者，花了快 5500 个字，终于讲完了 KitKat 以后各个 Android 版本之间文件访问的差异，本文也从一开始的科普向逐渐转为了文末的四不像。本文不够清楚，更不够深入浅出，也没有什么深度，只是尽可能还原这些特性本貌的同时偶尔穿插个人的见闻、体验与感受，还请各位多多包涵、多多指教。</p><p>本文的资料来源主要是 Android 官方提供的行为变更文档、Stack Overflow 的诸多提问者与回答者以及 Google 找到的其他网站，特此向这些作者、开发者与网站运营者致以敬意。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 初代发布至今已有 12 年，这些年间，Android 一直因系统版本碎片化而饱受诟病。据 Google 数据，在统计范围内仍有 26.3% 的设备运行着 Android Marshmallow 及以下版本的系统，而升级到 Pie 及以上的设备更是只占了 39.5%。面对如此繁杂的系统版本，应用的兼容性是个大问题，尤其是文件访问方面的资料太杂乱分散，带来麻烦又浪费时间。本文以 Poweramp LRC Plugin 的开发为契机写就，希望能帮助此后跳进存储这个大坑里的开发者，以及想了解不同系统版本差异的用户。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.rachelt.one/tags/Android/"/>
    
    <category term="开发" scheme="https://blog.rachelt.one/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="存储" scheme="https://blog.rachelt.one/tags/%E5%AD%98%E5%82%A8/"/>
    
    <category term="行为变更" scheme="https://blog.rachelt.one/tags/%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用 OBS 和 Virtual Cable 私人直播</title>
    <link href="https://blog.rachelt.one/articles/stream-privately-with-obs-and-virtual-cable/"/>
    <id>https://blog.rachelt.one/articles/stream-privately-with-obs-and-virtual-cable/</id>
    <published>2020-09-14T14:53:41.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>明天就能玩到心心念念的原神了，作为从漫画发布起就一直关注的云旅行者，在因为时间和年龄错过了内测之后，终于有机会到提瓦特大陆一睹期待已久的美景。欢喜之余，自然想让亲近的人与自己分享这份激动。</p><p>这就带来了问题。鉴于隐私、年龄等因素，在 B 站直播并不是个好主意。最好的平台当然是 QQ，它不需要双方再额外装上其它令人生畏的国产软件。然而，我所用的 TIM PC 端 2.3.2 版内建的「屏幕分享」并不包括系统音频，也无法捕捉 OBS 混音处理后的音频。OBS 强大，可面对 QQ 这种私有协议+客户端也无计可施。VB-Audio Virtual Cable 能够设置为实体麦克风的侦听输出，但若要将系统音频全部塞进去（考虑到大部分游戏并不支持设置音频输出设备），就只能将默认音频输出设置为 Virtual Cable，带来了对面说话 -&gt; 通过 Virtual Cable 播放给对面的套娃场景，更别说在各种各样的地方指定输出设备得有多复杂了。</p><p>还好，OBS 论坛里的 <a href="https://obsproject.com/forum/threads/obs-as-an-audio-input-virtualcam-but-for-audio.116802/">这篇帖子</a> 的博主和我有一样的疑惑，并且帖子里给出了可以用的回答。本文以中文将其记录，并改造成了 QQ 可用的版本，同时提供了其它场景可能可行的解决方案。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p><a href="https://obsproject.com/">Open Broadcaster Software (OBS)</a> - 混音</p><blockquote><p>对，只拿来当混音台。太委屈这么强大的工具了，所以如果你有更好的选择，只要它支持同时内录和麦克风录制并且可以播放到指定设备，就可以用它替代 OBS，也欢迎向我推荐。</p></blockquote></li><li><p><a href="https://vb-audio.com/Cable/">VB-Audio Virtual Table</a> - 输出混音后的音频</p></li><li><p>手和脑</p></li></ol><h2 id="音频调试"><a href="#音频调试" class="headerlink" title="音频调试"></a>音频调试</h2><p>首先打开 OBS Studio 配置音频。OBS 提供了友好的简体中文界面，找到位于下方的「混音器」并不难。在这里，你能看到「桌面音频」和「麦克风&#x2F;Aux」，前者代表了系统音频，而后者则来自系统默认的麦克风。默认情况下，只需要对这二者进行混音即可。当然，为避免奇奇怪怪的问题导致抽风（比如默认麦克风被修改）或是只希望录制来源于特定窗口的音频，左侧「来源」对音视频源的自定义设置极其丰富。在那儿添加了一个音频源之后，就能在「混音器」里找到了。我的图片中添加了一个指定了输入设备的「音频输入捕获」。</p><p>设定好之后，点击右下角的「开始录制」就能测试音频了。你可以播放音乐并以正常姿势说几句话，同时不断调整混音器中的音量。录制完毕后，在资源管理器的「视频」文件夹后可以找到录制结果。播放它，找到最舒适的音量大小，然后在 OBS 中修改音量即可。</p><h2 id="音频输出"><a href="#音频输出" class="headerlink" title="音频输出"></a>音频输出</h2><p>在调试完毕确认可以使用后，点击「混音器」里任意一个音频源右下角的齿轮图标，进入「高级音频属性」。</p><p><img src="1.png" alt="Screenshot 1"></p><p>在「高级音频属性」面板中，将你需要使用的所有音频源的「音频监听」设置为「仅监听」或「监听和输出」。对于这篇文章的目的而言，这两者都一样，但如果你还想在游戏的同时通过 OBS 录制，那就只能选择「监听和输出」。</p><p><img src="2.png" alt="Screenshot 2"></p><p>随后，转向左上角文件 -&gt; 设置，打开「音频」选项卡，调整「监听设备」，将其修改到此前装好 Virtual Cable 后新出现的 CABLE Input。</p><p><img src="3.png" alt="Screenshot 3"></p><p>这样，当其它应用将 CABLE Output 作为麦克风时，它能录制到的音频就只有在 OBS 混音完成后的音频和其它（如果有）应用通过 CABLE Input 输出的音频。</p><p>万事俱备，只差最后一步。打开 TIM &#x2F; QQ，进入设置，快速定位到「音视频通话」选项卡，此时应该能够看到自定义麦克风的选项。剩下的步骤已经很明确了，配置完毕后找个好友或者自己开小号，使用 QQ 自带的「屏幕分享」，看看效果吧！</p><p><img src="4.png" alt="Screenshot 4"></p><p>再多说一句，若你并不使用 QQ 的「屏幕共享」，希望能够将 OBS 录制的视频也作为视频源，可以体验这个插件： <a href="https://obsproject.com/forum/resources/obs-virtualcam.949/">OBS Virtualcam</a> ，具体使用方法在插件说明里讲得很清楚，在此不再赘述。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;明天就能玩到心心念念的原神了，作为从漫画发布起就一直关注的云旅行者，在因为时间和年龄错过了内测之后，终于有机会到提瓦特大陆一睹期待已久的美景。欢喜之余，自然想让亲近的人与自己分享这份激动。&lt;/p&gt;
&lt;p&gt;这就带来了问题。鉴于隐私、年龄等因素，在 B 站直播并不是个好主意。最好的平台当然是 QQ，它不需要双方再额外装上其它令人生畏的国产软件。然而，我所用的 TIM PC 端 2.3.2 版内建的「屏幕分享」并不包括系统音频，也无法捕捉 OBS 混音处理后的音频。OBS 强大，可面对 QQ 这种私有协议+客户端也无计可施。VB-Audio Virtual Cable 能够设置为实体麦克风的侦听输出，但若要将系统音频全部塞进去（考虑到大部分游戏并不支持设置音频输出设备），就只能将默认音频输出设置为 Virtual Cable，带来了对面说话 -&amp;gt; 通过 Virtual Cable 播放给对面的套娃场景，更别说在各种各样的地方指定输出设备得有多复杂了。&lt;/p&gt;
&lt;p&gt;还好，OBS 论坛里的 &lt;a href=&quot;https://obsproject.com/forum/threads/obs-as-an-audio-input-virtualcam-but-for-audio.116802/&quot;&gt;这篇帖子&lt;/a&gt; 的博主和我有一样的疑惑，并且帖子里给出了可以用的回答。本文以中文将其记录，并改造成了 QQ 可用的版本，同时提供了其它场景可能可行的解决方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="串流" scheme="https://blog.rachelt.one/tags/%E4%B8%B2%E6%B5%81/"/>
    
    <category term="应用" scheme="https://blog.rachelt.one/tags/%E5%BA%94%E7%94%A8/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="直播" scheme="https://blog.rachelt.one/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>一个男生使用了 7 天 Apple Watch，这是他的生活发生的变化</title>
    <link href="https://blog.rachelt.one/articles/7-days-with-apple-watch/"/>
    <id>https://blog.rachelt.one/articles/7-days-with-apple-watch/</id>
    <published>2020-08-12T14:12:51.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p><del>建议改成：一个男生背叛了 7 天 Android…</del></p><p>不管「背叛了 Android」是不是实话，「背叛了 Android 阵营的智能可穿戴设备」是真的。</p><blockquote><p>本文约 4100 字，阅读约需 10 分钟。作者使用的设备为 Apple Watch Series 4 | 40 mm | GPS 版，搭载 watchOS 6.2.8。本文很长，全程无图，还请包涵。</p></blockquote><hr><p>几个月以前，我还是个傻傻地以为自己对 Android 的忠诚就像对外语系的忠诚一样牢不可破的毛头小子。后来，因为种种因素，我的志愿几乎全填了工科系，还入手了 iPhone 8 用国产软件大呼真香（参见前文），现在，就连一直渴望拥有的 Galaxy Watch &#x2F; Wear OS 设备，都被我换成了 Apple Watch Series 4。</p><p>网上关于 Apple Watch 的文章很多很多，但 Apple Watch 给不同的人带来的感受，自然会因经历不同、使用场景不同等原因而不尽相同。这是我，一个 Android 开发者&amp;爱好者、Windows 用户，直到半个月前都从来没有亲自接触过 Apple 生态的人，在初步接触并依赖其生态（尤其是深度使用智能可穿戴设备）后所写下的感悟。</p><span id="more"></span><h2 id="为什么是-Apple-Watch-？"><a href="#为什么是-Apple-Watch-？" class="headerlink" title="为什么是 Apple Watch ？"></a>为什么是 Apple Watch ？</h2><p>要回答这个问题，我们得先来看看智能穿戴设备的现状。目前，市面上的可穿戴设备百花齐放，异彩纷呈，呈了又呈。某宝搜索「智能手环」和「智能手表」都能得到整整 100 页搜索结果，从一线国际大厂到不知名山寨小厂，人人都想挤进这个已经趋近饱和的红海分一杯羹。</p><p>但是，目前市售的「智能穿戴设备」，真的智能吗？大部分仅能实现运动追踪、心率检测的手环暂且不提，不妨看看 Wikipedia 对于「智能手表」的定义：</p><blockquote><p><strong>智能手表</strong>（<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E6%96%87">英文</a>：<strong>Smartwatch</strong>）是安装有<a href="https://zh.wikipedia.org/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F">嵌入式系统</a>、用于增强基于<a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%90%98">报时</a>等功能的腕部<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E8%A1%A8">手表</a>，其功能相似于一台<a href="https://zh.wikipedia.org/wiki/%E4%B8%AA%E4%BA%BA%E6%95%B0%E7%A0%81%E5%8A%A9%E7%90%86">个人数码助理</a>。早期智能手表既可以执行<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AE%A1%E7%AE%97%E5%99%A8%E6%89%8B%E8%A1%A8&action=edit&redlink=1">计算</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BF%BB%E8%AF%91">翻译</a>或者操作<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8E%8C%E4%B8%8A%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F&action=edit&redlink=1">掌上电子游戏</a>等基础功能，中期智能手表则实现了<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A9%BF%E6%88%B4%E5%BC%8F%E9%9B%BB%E8%85%A6">可穿戴式电脑</a>的功能。大多数智能手表可以运行<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8B%95%E8%BB%9F%E4%BB%B6%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F">流动软件应用程序</a>，一些可以运行<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E5%8B%95%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">移动操作系统</a>，少数有着完整的<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E8%A1%A8%E6%89%8B%E6%9C%BA">移动电话</a>功能。其他的功能大多与便携式多媒体播放有关，比如播放<a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E9%A2%91%E5%B9%BF%E6%92%AD">调频</a><a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%94%B5">广播</a>与音频或视频文件，以及通过<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99">蓝牙</a>耳机收听。</p></blockquote><p>也就是说，许多厂商冠以「手表」之名的，其实无法被列入「智能手表」的行列，只能算是「大多数」之外的「少数」，或者就是被许多网友戏称为的「大手环」。手环不好吗？当然不，手环很好，尤其是最近的小米手环 5，它香到让一个已经入了 Apple Watch S4 的人垂涎三尺。如果没有智能手表相关需求，我会让向我征求建议的人直接买它。</p><p>让我想入手一款「智能手表」的，另有原因。</p><p>进入高三的第四个月，我入手了一块二手的 Moto 360 Sport ，企图尝鲜 Wear OS。当时的想法是，反正就两百来块钱，就算很垃圾很垃圾，只要体验到了 Wear OS 就不算亏。没想到，在接下来不到一个月的时间中，我不断吐槽着 Moto 360 Sport 的垃圾，一边深深地感受着 Wear OS 的魅力。它陪着我跑完了人生中跑得最快的一次长跑测试（当然还是很慢），让我养成了晚自习课间跑步的习惯，养成了下教学楼必揣蓝牙耳机的习惯，也养成了每天看看自己的 Heart Points 并尽力达成目标的习惯。这让我在突然将主力设备切换回戴了一年有余的小米手环 3 NFC 版时，产生了很强的落差感。现在想想，「毕业后买可穿戴设备」的想法起源于很早以前，可如此坚定地说「毕业后买块表」，确实是在那之后。</p><p>既然如此，为什么最终却选择了 Apple Watch，而非我大加赞赏的 Wear OS，或是非常欣赏的 Gear &#x2F; Galaxy Watch 设备呢？</p><p>正如我前文所提到的那样，Apple 十分擅长建立一个完善而封闭的生态。Apple 的生态不一定是最开放的，社区不一定是最庞大的，然而凭 Apple 的号召力，便能够轻而易举地让开发者围着它转。最明显的例子就是 Apple Pay，它从在国内正式上线起就成了大众关注的焦点，甚至间接地推动国产厂商纷纷推出自家系统的预装钱包。尽管如此，无论怎样发展，在中国大陆用得最爽、各家银行支持最完备、用起来最能给人安全感的，一直是 Apple Pay。就算抛开这些，单论刷卡体验，Apple Pay 几乎秒响应这一项，已经够让人扔掉国产设备了。</p><p>另一个原因是系统的完成度 &#x2F; 可靠度。放到智能穿戴设备上来说，我不希望我的手表三天两头出各种千奇百怪的 bug，也不希望在我脱离手机只有 Wi-Fi 的时候，我还要考虑怎样才能访问手表的语音助手。我更不希望它的底层让一块配置本就不高的智能手表承受太多它不应承担的重量，比如跑一个 Android，享受计时器熄屏后就被杀掉，或是同时开音乐和跑步就分分钟暴死在我面前。当然，优化上乘同样也是 Apple 良性生态的体现。</p><p>那 Wear OS 真的就没有一点好处了么？当然不。我到现在为止还会被 Wear OS 的动画所折服，还会在一些交互的小细节上发现 Google 的认真，还会想再次体验那些初见不经意，实际用起来却离不开的亮点。更重要的是，跑在手表上的 Android，仍旧吸引人。可惜，Wear OS 的生态实在过于残缺，生态又恰恰是决定消费者选择的重要因素。现在来看小米手表的失利，其实就是 Wear OS 及其生态在中国大陆的失利。</p><h2 id="有何感慨？"><a href="#有何感慨？" class="headerlink" title="有何感慨？"></a>有何感慨？</h2><blockquote><p>事先声明，对公司的好感不代表对其特定产品的好感，公司的作风也不代表产品的品质。</p></blockquote><p>即使是市面上最好的智能手表，最终还是免不了被归类于「大手环」。没错，Apple Watch Series 4 拥有一块够用的屏幕，能够安装诸多第三方应用，有着不错的开发者支持，在我使用它的这些天，它的用处却与小米手环 3 如出一辙，甚至还不如后者。Apple Watch 能记录步数并转化为热量或距离，小米手环也能；Apple Watch 能为一天的活动设置目标，小米手环也能；Apple Watch 能发出久坐提醒，小米手环也能；Apple Watch 能全天候测量心率，小米手环也能；Apple Watch 能刷公交卡，小米手环也能；Apple Watch 能用 Siri ，小米手环 4 以后的 NFC 版也有小爱同学；Apple Watch 最多两天一充，小米手环续航两周；Apple Watch 不能自动监测睡眠，但是小米手环能。</p><p>「不是有很多第三方应用能够提供相当不错的睡眠监测体验吗？」</p><p>是这样没错，这是 Apple Watch 的优势。然而，比起在各种良莠不齐的应用之间互相比较、换来换去（甚至找不到足够科学 &#x2F; 精确的），还要忍受对于试用来说高昂的付费和最大 48 小时的退款处理（再次夸奖 Play Store 的一键后悔药），官方推出的睡眠记录功能，无疑会大大改善用户体验。当然，watchOS 7 上 Apple 将要推出官方的睡眠追踪，免除了用户自行选择应用之苦，比较让人期待。</p><p>这还只是睡眠追踪。在 App Store 里有着数不尽的应用可供选择，这些应用足够强大，可因为手表自身的特性以及我个人的使用习惯，许多应该交由手机完成的事情或是我用不上的功能我都没有强行分配给它。当我筛选掉大部分我并不需要的功能之后，剩下来的应用，似乎也不多了。</p><p>顺带一提，Apple Watch 上虽然有网易云音乐，但还处在一个相对来讲「不好用」甚至「不能用」的状态。无法查看歌单，无法搜索歌曲，「我喜欢」播放的甚至不是我点过红心的歌，下载没有下载进度，我连在下载哪首歌都不知道…我以后再也不说 Wear OS 的网易云音乐是残废了，我终于见到真正的残废了……</p><p>当然，还有值得夸的地方，比如呼吸。每天送来的呼吸提醒，让我开始关心精神的放松。一分钟的正念冥想短暂，却让人有达成的动力。还有活动圆环，我将其设置在 700 大卡，为了达成给自己设定的目标，我这些天每天出门晨跑，虽然只有三公里（或者更少，根本达不到 700 大卡，还好我有下午出门散步的习惯），也算是开始运动了。</p><p>并且，藉由 Apple 的算法，Apple Watch 对我个人各项指标的了解可以说做到了极致。除了「静息心率」、「步行平均心率」、「健身记录」这些大家都有 <del>（你说 XXX 没有？抬走）</del> 的东西，Apple 还提供了「心率变异性」、分离的「活动能量」与「静息能量」、「心率恢复」、「最大摄氧量」……看着自己的身体指标随着坚持锻炼逐渐改善，内心想必会满溢着成就感吧。</p><p>最重要的是，Apple 生态圈内的一切健康数据，从步数到经期，从呼吸、睡眠到性行为，都能在 iOS 自带的「健康」应用中查阅或录入（当然有些只能手动录入）。这是生态带来的、其它智能穿戴设备无可比拟的优势。Android 这边或许有个 Google Fit 可以一战，那国内呢？难怪 Apple 生态能「真香」。</p><p>Apple Watch 继承了 iPhone 的支付体验，比起小米手环 3 NFC 版，刷公交卡快多了。至于别的…因为我身处某不知名小县城，本地的店铺基本上都支持但只支持蓝绿二维码作为移动支付手段。即便是美宜佳或者蜜雪冰城这种从体量和定位上都应该标配 POS 机的地方，都只配备了扫码机，甚至只有二维码。二维码已经几乎垄断了小额支付，导致银行卡沦落到购买大件的专属。上次刷 iPhone 的 Apple Pay 是在本地的大型超市，但我还没到可以把逛超市变成日常的地步（因为抑制不住自己花钱），所以刷卡暂时还没用上。一定要说的话，受限于手表自身各种因素所以没有 iPhone 那么「闪」，但总归会比憨憨二维码快吧？大概。</p><p>再说说重量吧。比起小米手环 3 或者手环这一品类，作为手表的 Apple Watch 确实重不少。习惯了小米手环后换到 Apple Watch 看起来就是 20 克到 40 克的变化，实际发生的时候「异物感」仍然存在。轻量是几乎所有手表都无法企及的、手环独占的优势。当然，适应期只有最开始的几天。后来，情况逐渐演变成了：能够感知到 Apple Watch 的存在，却并不觉得这种重量让人不适。习惯于使用手环的人，在切换到手表之前建议稍加关注。</p><p>无论可自定义功能和第三方应用如何，是「智能手环」还是「智能手表」，其最终作用都相差不大，都会融入使用者生活，成为难以发觉但又不可或缺的一部分。从这个角度来讲，Apple Watch 确实就是一个「大手环」。褪去浮华的包装，真正能留住人的，不仅仅是生态本身，更是生态所带来的人文关怀。Apple Watch 提供了 Apple 一直致力于提供的完整的辅助功能体验，尽管这对于我来说起不到什么作用。真正让我关心的，是将我上面所述的那些褪去「功能」的外皮后所剩下的灵魂。这种灵魂体现在每一次 Apple Watch 提醒我起来活动，体现在每一次 Nike Run Club 在我跑完步后都让不一样的人用不一样的话语传递相同的鼓励，也体现在「健康」应用内的种种提醒与设置，这在近年来频频出现的 Apple Watch 以各种方式拯救生命的新闻中已经被展现得淋漓尽致。</p><p>这才是 Wear OS 乃至一众 Android 阵营的智能穿戴设备缺少的东西。市面上的很多产品都在模仿 Apple Watch，可皮毛的模仿不足以体现出公司产品灵魂所向，尤其是如果这个公司还既 996 又 251。这种人文关怀同样体现在了 Apple 这么多年积攒的广告中。每年的贺岁档广告，从《老唱片》、《三分钟》到《一个桶》、《女儿》，说白了都是在做营销，但它能给人在别家广告中找不到的感动。这是我不喜欢 Apple 的一些产品，不喜欢 Apple 高昂的定价，却对这家公司颇有好感的原因。</p><p>说到这里，我仍然看好 Wear OS 的发展。其原因我已无从知晓，也许就是一个 Google 出品，一个 Android base，一个开放生态，或者只是一个按下表冠后环形展开应用列表的流畅动画（Xiaomi’s Apple Watch clone 出来挨打）以及种种类似的细节……甚至听起来就十分不可靠的「回忆」，初次使用智能手表时的 bittersweet。其实挺奇妙的，这种理由居然也能成为选择某一平台 &#x2F; 系统的驱动力。但它就这样发生了。因此，我不会停止，也从未停止期盼。</p><h2 id="或许就此止步"><a href="#或许就此止步" class="headerlink" title="或许就此止步"></a>或许就此止步</h2><p>写着写着，一篇本来应该像前文一样的总结，变成了一个老叔叔（迫真）的自言自语。如果你还想问我是否推荐，我只能说不推荐。小米手环 5 NFC 版是性价比更更更高的选择。但如果你需要一块智能手表并且恰好拥有 iPhone…除了 Apple Watch，还有什么更好的选择吗？</p><p>感谢你阅读到这里。</p><p>Rachel</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;建议改成：一个男生背叛了 7 天 Android…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;不管「背叛了 Android」是不是实话，「背叛了 Android 阵营的智能可穿戴设备」是真的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文约 4100 字，阅读约需 10 分钟。作者使用的设备为 Apple Watch Series 4 | 40 mm | GPS 版，搭载 watchOS 6.2.8。本文很长，全程无图，还请包涵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;几个月以前，我还是个傻傻地以为自己对 Android 的忠诚就像对外语系的忠诚一样牢不可破的毛头小子。后来，因为种种因素，我的志愿几乎全填了工科系，还入手了 iPhone 8 用国产软件大呼真香（参见前文），现在，就连一直渴望拥有的 Galaxy Watch &amp;#x2F; Wear OS 设备，都被我换成了 Apple Watch Series 4。&lt;/p&gt;
&lt;p&gt;网上关于 Apple Watch 的文章很多很多，但 Apple Watch 给不同的人带来的感受，自然会因经历不同、使用场景不同等原因而不尽相同。这是我，一个 Android 开发者&amp;amp;爱好者、Windows 用户，直到半个月前都从来没有亲自接触过 Apple 生态的人，在初步接触并依赖其生态（尤其是深度使用智能可穿戴设备）后所写下的感悟。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://blog.rachelt.one/tags/iOS/"/>
    
    <category term="Apple Watch" scheme="https://blog.rachelt.one/tags/Apple-Watch/"/>
    
    <category term="Android" scheme="https://blog.rachelt.one/tags/Android/"/>
    
    <category term="Google" scheme="https://blog.rachelt.one/tags/Google/"/>
    
    <category term="Wear OS" scheme="https://blog.rachelt.one/tags/Wear-OS/"/>
    
    <category term="智能穿戴" scheme="https://blog.rachelt.one/tags/%E6%99%BA%E8%83%BD%E7%A9%BF%E6%88%B4/"/>
    
  </entry>
  
  <entry>
    <title>当我从 Android 迁移到 iOS</title>
    <link href="https://blog.rachelt.one/articles/on-migrating-from-android-to-ios/"/>
    <id>https://blog.rachelt.one/articles/on-migrating-from-android-to-ios/</id>
    <published>2020-07-31T02:05:17.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个 Android 折腾爱好者与 <del>已经没脾气了的</del> 谷粉，对我而言，iOS 曾经是最「不黑不快」的系统，它由内而外的封闭以及 Apple 的孤傲与开放、先进、自由的 Android 形成鲜明对比。然而，随着时间的推移以及 Apple 的不断努力，iOS 确实在进步，变得越来越用户友好，再加上近年 Google 的作风和隔壁 Apple 越来越像（通过 GMS 和残缺 AOSP 控制手机厂商、逐步缩紧用户可折腾的空间），我也终于在某宝购入了一台 iPhone 8 作为自己的<ruby><rb>备用</rb><rt><del>主力</del></rt></ruby>机。这篇文章将向各位阐述我使用 iOS 这几天内感受到的系统间的鸿沟，以及自身的一些看法与感悟，希望对各位有所帮助。</p><blockquote><p>本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。<br>本文中 Android 以 Google Pixel 搭载的 Android 10 及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态&#x2F;跨平台联动。</p></blockquote><h2 id="为什么是-iOS-？"><a href="#为什么是-iOS-？" class="headerlink" title="为什么是 iOS ？"></a>为什么是 iOS ？</h2><span id="more"></span><p>Android 对国产应用的压制出了名的糟糕，国产应用的自造生态带来加大功耗、频繁唤醒等等问题的同时，其对权限的滥用却至今找不到比较好的解决办法。近年来 Google 和国家部门一直在努力，但收效甚微。同时，国产软件在 Android 端的优化堪忧，有时好不容易推了终于流畅的新版本，下个版本的垃圾代码又让整个应用「一朝回到解放前」。</p><p>此外，我是个比较严重的系统洁癖，主力机用着 <code>出国魔法</code> 享受着 Google 生态带来的便利的同时，一直希望能将国产应用彻底隔离。Island 虽然能够创造一个独立的工作用户，但终究无法避免国产应用到处拉屎，而 iOS 却能彻底让国产应用的屎不被看见，也能使其更服从系统所给出的规范。</p><h2 id="对-iOS-评价如何？"><a href="#对-iOS-评价如何？" class="headerlink" title="对 iOS 评价如何？"></a>对 iOS 评价如何？</h2><p>国产应用用着太爽了。另外还是看下文吧。</p><p>非要太长不看版的话，iOS 很难满足老 Android 用户对手机的一些基础性需求。从 <strong>返回键</strong> 到 <strong>强大而全面的通知管理</strong> 再到 <strong>勿扰模式</strong> 等等等等（详见下文），如果你重度依赖依赖这些中的任何一个，不要来 iOS。但如果你愿意接受一些功能的缺失来换取 <strong>原彩显示</strong> 、 <strong>全局夜间模式</strong> 或是包含国产软件优化在内的等等 iOS 有但 Android 完全没有或很难满足的功能，那也没有更好的选择。</p><h2 id="具体呢？"><a href="#具体呢？" class="headerlink" title="具体呢？"></a>具体呢？</h2><p>下文将分为两部分细细讲解我所遇到的 iOS 与 Android 的差异。「软件」部分为第三方应用能够以较低成本完美解决的问题，其内容也更大程度上与我的偏好应用有关，「系统」部分则相反。开始之前，我们再回顾一遍文前语。</p><blockquote><p>本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。<br>本文中 Android 以 Google Pixel 预载系统及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态&#x2F;跨平台联动。</p></blockquote><h3 id="系统优势"><a href="#系统优势" class="headerlink" title="系统优势"></a>系统优势</h3><table><thead><tr><th align="center">粗列</th><th>细数</th></tr></thead><tbody><tr><td align="center">国产软件优化</td><td>这是让我选择 iOS 的最大原因，无须多言。</td></tr><tr><td align="center">原彩显示</td><td>最让人大呼「真香」的还是原彩显示。影响色准，但在暖色光环境中（比如餐馆），与其拿出一台惨白甚至泛蓝的 Android 机，还是自动变成暖色的 iPhone 看着舒服。</td></tr><tr><td align="center">权限管理</td><td>和 Android 上那坨不断优化却总还是屎的屎比起来，iOS 的权限管理值得夸奖的是 Android 缺乏的可使用网络控制。其它的方面倒也感知不强。</td></tr><tr><td align="center">Taptic Engine</td><td>爽啊，可惜系统输入法用不到。系统输入法很烂反倒成了一个值得庆幸的点，它让我毫不犹豫地投入了讯飞输入法的怀抱，享受着打字震动的舒适。</td></tr><tr><td align="center">夜间模式</td><td>0202 年居然还有系统不能无缝自动过渡到夜间模式，还有大批应用不能随系统切换？？？我讲完了。</td></tr><tr><td align="center">生物识别</td><td>Android 乱七八糟的授权、五花八门的生物识别支持和千奇百怪的硬件在 iOS 上干干净净，大家都用一个规范，没人嚷嚷不安全。不需要 Riru &#x2F; Xposed 就能指纹支付，真好。</td></tr><tr><td align="center">付款</td><td>我希望我能设定一次付款方式然后全世界通用，而不是每次在一个新应用付款就得登陆一次 PayPal 或者录入一次银行卡，或者更脏地跳转到隔壁蓝绿钱包。</td></tr><tr><td align="center">可选应用语言</td><td>当我发现 iOS 居然可以针对应用改变语言时，Android 铁粉流下了热泪。对我而言，日常用英语，要给人看手机时临时给几个应用换中文，在 iOS 无比方便。</td></tr><tr><td align="center">快速设置面板</td><td>对，就是以前 Android 通知栏的设置面板点击 Wi-Fi 名字会展开的那个东西，Google 将其扔掉而 Apple 把它放进了 iOS。整体效果还不错。</td></tr><tr><td align="center">延迟</td><td>「音游杀手」先不说，即使是硬件和优化顶尖的 Pixel 、Galaxy S，延迟和 iPhone 比起来仍然有差异*。这是 Android 的问题，不是堆料加钱能轻易解决的，长久以来也从未被重视，不然也没那么多人买 iPad 玩音游。除此之外，K 歌时的实时耳返，也是 Android 用户永远的痛。</td></tr><tr><td align="center">续航</td><td>1800 mAh 的 iPhone 8 比 4000 mAh 的 1+7T Pro 用的时间长（7T Pro 使用时长不到 iP8 三分之一）、用的电少，尽管硬件方面差别很大，但我不相信 iOS 在续航上比起 Android 没优势。</td></tr><tr><td align="center">系统细节</td><td>整体上来看 iOS 打磨得还是很用心，抬手亮屏放下熄屏（Google 进来挨打），动画顺畅，大部分情况下操作符合直觉，值得夸奖。</td></tr></tbody></table><h3 id="系统劣势"><a href="#系统劣势" class="headerlink" title="系统劣势"></a>系统劣势</h3><table><thead><tr><th>粗列</th><th>细数</th></tr></thead><tbody><tr><td>通知管理</td><td>稀烂。Android 的通知类别设计真的令人舒适。iOS 上我要关通知只能全关，不能只关闭「杂项」或者「群组通知」。就算这个按下不表，连重要通知打断勿扰这种关键功能都不存在…告辞。</td></tr><tr><td>未读通知提醒</td><td>iP 8 解锁很快，没注意通知中心就能回到锁屏前应用，状态栏没有任何异样，过十几分钟关了上个应用才发现桌面上有红点，好评，孩子很满意。</td></tr><tr><td>勿扰模式</td><td>稀烂。这个和通知管理同源，又和下文的设置项呼应。Android 上极其细致的设置让我能够放心地将勿扰模式一直开着而不担心漏掉任何我需要的东西，但 iOS 信息和通知都不能区分开…告辞。</td></tr><tr><td>设置项</td><td>简洁做过头了叫简陋。我不觉得只有我一个人不喜欢千禧年风格的拨号盘按键音，也不觉得只有我一个人认为自动旋转控制应该能轻松被找到，等等。这个太杂太乱但烂得不明显所以和整体散发着「不行」的勿扰模式分开了。</td></tr><tr><td>设置层级</td><td>Android 上设置分类和应用设置独立真的是很好的 practice。至少我不用翻来翻去找本来应该在「连接」（姑且这么叫吧）部分的 AirDrop，不用惊讶地发现「个人热点」居然又是子菜单又是主菜单，更不用在系统设置里找某个应用的设置。</td></tr><tr><td>返回层级</td><td>我不太理解 iOS 上对「返回」的实现，有时我要右滑，有时我要下滑，有时我要点击一个看起来是让我下滑的地方，有时我右滑然后整个页面在下滑或缩小，有时我只能点那个小箭头或「取消」……？？？</td></tr><tr><td>动画</td><td>「成也萧何，败也萧何。」这是返回层级混乱的扩充与延伸。视觉效果的优异尽管会让人觉得很「流畅」，但也引入了逻辑混乱、动画拖沓这些无法避免的问题，最典型的例子是打字时「不跟手」「输入慢」。有时我更需要一台指哪打哪的设备，而不是不管我干啥，总得耐心等动画结束的憨批。</td></tr><tr><td>分屏</td><td>屏幕小，但「我可以不用，你不能没有」，这都什么年头了，一边水群一边看测评，或是一边看网页一边记灵感，真的这么难吗？</td></tr><tr><td>推送</td><td>大一统的推送服务香吗？香。香的同时也带来了一些问题，比如消息虽然被推送了但并不会预载，点击跳转后还要过一段较长的时间才能让我看到通知对应的消息，有很强的割裂感，FCM 也会有但在我使用的应用中并没有这么夸张，就…见仁见智吧。</td></tr><tr><td>输入框</td><td>对，这是最大的槽点，iOS 「自作聪明」地将单行输入框设定为只能定位到单词，别说 Android 的光标放大了，连自由定位都没有提供，尽管输入法处 3D Touch 用习惯了也不能说不能用，但不能「所按即所得」同样让人「膈应」。</td></tr><tr><td>双击亮屏</td><td>我说完了。</td></tr><tr><td>系统封闭</td><td>想用旧版本？不行。想挂 SSH？不行。想连 Linux ？准备折腾吧。想本地装 Linux 就像 Termux？想 peach。</td></tr><tr><td>应用商店付款</td><td>比起 Play Store，App Store 不能在购买时选择付款方式无疑为自己减了分。一旦设置默认付款方式就无法在应用内购买时临时更换，如果有需要还得换到另一个应用改，至少我觉得挺麻烦的。</td></tr><tr><td>应用商店退款</td><td>两小时内即刻生效的后悔药是 Play Store 最让人舒适的地方。</td></tr><tr><td>旋转屏幕</td><td>难道还有旋转屏幕的方案比 Android 上设备一旋转就自动蹦出的小按钮更加方便吗？</td></tr><tr><td>快速选择内容</td><td>Pixel 上多任务页面中，可以直接长按选中一些在应用内不支持选择的文本（使用 OCR）的那个功能，虽然看起来很鸡肋，但是从一些地方复制几次链接就能感受到这功能的方便了。</td></tr></tbody></table><h3 id="软件优势"><a href="#软件优势" class="headerlink" title="软件优势"></a>软件优势</h3><table><thead><tr><th>粗列</th><th>细数</th></tr></thead><tbody><tr><td>Apple Pay</td><td>得益于系统深度整合及 Apple 自身的号召力，Apple Pay 出门刷卡、乘坐公共交通都超级方便。但为什么又是「软件」呢？因为 Android 和更多小店都支持蓝绿钱包。</td></tr><tr><td>九折？</td><td>就这。</td></tr></tbody></table><h3 id="软件劣势"><a href="#软件劣势" class="headerlink" title="软件劣势"></a>软件劣势</h3><table><thead><tr><th>粗列</th><th>细数</th></tr></thead><tbody><tr><td>输入法</td><td>我在 Android 上选择能下滑输入符号、提供「选择文本」面板、纠错和词库极其智能…的 Google 拼音。目前还没在 iOS 端发现 alternative，那个 Gboard 屑得让人嗦不出话，讯飞堪用，但也只是堪用而已，习惯国产输入法的话应该会好适应一点。</td></tr><tr><td>自带应用</td><td>「拨号键盘」应该是个本质功能吧，但为什么又和其他功能同级而且还放在右边？「页面内查找」应该用得挺频繁的吧，但为什么非要我在地址栏键入内容才能在页面内搜索，而且还如此难以察觉？</td></tr><tr><td>愿望单</td><td>穷孩子：我能不能把想等打折的应用加进愿望单然后等打折？App Store: No.</td></tr></tbody></table><hr><p>写到这里回望全文，其实更像是个人记录，从头到尾都是自说自话，甚至看起来是在为 iOS 挑刺。Android 当然也有自己糟糕的地方，但可能是出于长期的使用，我个人已经很难注意到一些细节部分的提升，但对细节部分的不足甚至缺失却十分敏感。两个系统没有孰优孰劣，我只是站在一个 Android 用户和多年老粉的角度，尽最大努力描述一种「culture shock」。</p><p>上面列举了很多让我个人不习惯的地方，可 iOS 真有这么不堪吗？当然不是，否则其受欢迎程度实在是让人难以理解。我也会持续使用并适应 iOS ，也许在一些问题随着习惯改变而解决的同时，另一些问题又会浮出水面。无论如何，欢迎在下方讨论，更欢迎提出不同观点。感谢你能认真地读到现在。</p><hr><p>*：数据来自 <a href="https://superpowered.com/latency">Superpowered</a> 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个 Android 折腾爱好者与 &lt;del&gt;已经没脾气了的&lt;/del&gt; 谷粉，对我而言，iOS 曾经是最「不黑不快」的系统，它由内而外的封闭以及 Apple 的孤傲与开放、先进、自由的 Android 形成鲜明对比。然而，随着时间的推移以及 Apple 的不断努力，iOS 确实在进步，变得越来越用户友好，再加上近年 Google 的作风和隔壁 Apple 越来越像（通过 GMS 和残缺 AOSP 控制手机厂商、逐步缩紧用户可折腾的空间），我也终于在某宝购入了一台 iPhone 8 作为自己的&lt;ruby&gt;&lt;rb&gt;备用&lt;/rb&gt;&lt;rt&gt;&lt;del&gt;主力&lt;/del&gt;&lt;/rt&gt;&lt;/ruby&gt;机。这篇文章将向各位阐述我使用 iOS 这几天内感受到的系统间的鸿沟，以及自身的一些看法与感悟，希望对各位有所帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。&lt;br&gt;本文中 Android 以 Google Pixel 搭载的 Android 10 及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态&amp;#x2F;跨平台联动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么是-iOS-？&quot;&gt;&lt;a href=&quot;#为什么是-iOS-？&quot; class=&quot;headerlink&quot; title=&quot;为什么是 iOS ？&quot;&gt;&lt;/a&gt;为什么是 iOS ？&lt;/h2&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://blog.rachelt.one/tags/iOS/"/>
    
    <category term="Android" scheme="https://blog.rachelt.one/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>写给初烧的 HiFi 耳机系统入烧指北</title>
    <link href="https://blog.rachelt.one/articles/new-to-hufi-cookbook/"/>
    <id>https://blog.rachelt.one/articles/new-to-hufi-cookbook/</id>
    <published>2020-02-03T12:10:42.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY?"></a>WHY?</h2><h3 id="为什么要入烧"><a href="#为什么要入烧" class="headerlink" title="为什么要入烧"></a>为什么要入烧</h3><p>很简单——为了满足自己的耳朵对音乐的要求。不同品牌不同价位不同风格的设备，给人的感觉完全不一样。初烧，意即初次涉猎发烧，是对 HiFi （高保真）的初次追求，或者说，是对满足自己耳朵的声音的初次追求 <del>（毕竟 HuFi）</del> 。不需要一直<ruby><rb>深入</rb><rt><del>烧钱</del></rt></ruby>，即便浅尝辄止，入手一套适合自己日用、能够给自己带来享受的音频设备，应该也是相当重要的一件事。鉴于初烧预算、便携度等限制，本文仅探讨耳机系统，不会涉及到更好更 HiFi 也更贵更玄学的音箱系统。</p><h3 id="为什么要写这篇文章"><a href="#为什么要写这篇文章" class="headerlink" title="为什么要写这篇文章"></a>为什么要写这篇文章</h3><p>音频设备一般符合「一分钱一分货」定律（当然超出其使用价值的话也会有「一块钱两分货十块钱三分货」的操作），对于初烧而言尤其如此。这篇文章旨在通过容易理解的语言，帮助各位避开可能存在的坑，以使把钱花在刀刃上。</p><p><del>事实上是看到身边太多人买智商税实在忍不下去决定干脆写篇文章代替一个一个解释半天</del></p><span id="more"></span><h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW?"></a>HOW?</h2><h3 id="了解基础知识"><a href="#了解基础知识" class="headerlink" title="了解基础知识"></a>了解基础知识</h3><p>众所周知，HiFi 行业鱼龙混杂，价格也好、描述也好，争议往往是一波又平，一波又起。这其中，私以为可以分为两派：一派以老烧为首，强调以感知参数作为主要指标来评判耳机；另一派以声学工程师为首，强调以客观数据作为主要指标来评判耳机。尽管在一些地方，这两派撕得水深火热，不停地否定对方提出的一些观点、结论，但事实上谁也离不开谁。类似于声场、解析度、耳机素质、空气感这样的感知参数，属于容易听出来、也最容易被注意到的部分，是普通人评价任意一款耳机不可避免的用语，而事实上这些感知参数的形成，又与客观数据，例如音色、频响曲线、动态范围等，密不可分。而且，感知参数派在评价耳机时也会涉及部分声学术语，客观数据派也必须依赖于主观听感才能够给出最终的耳机评价。</p><p>综上，对于新入坑的小白，推荐从耳机大家坛新手入门区的这两篇帖子开始：</p><blockquote><p><a href="http://www.erji.net/forum.php?mod=viewthread&tid=1742106">耳机入门–写给耳机初级发烧友（新手常见的七大误区）</a><br><a href="http://www.erji.net/forum.php?mod=viewthread&tid=82690">基础知识汇总</a></p></blockquote><p>虽然这两篇帖子年久失修，但毕竟都是一些难以随时间而改变的知识（可能即使全世界音频巨头同时发话要重新定义一些概念，短时间内习惯都不会彻底改变，何况这种情况并不会发生），也要感谢这两篇帖子，让本文成为可能。</p><p>而同时， <del>家境平韩的</del> 声学工程师大佬「鬼斧神工119」（知乎、B 站、微信公众号都能找到），从心理声学角度论述了一些描述音质的参数在客观数据上的反映，可以参见：</p><blockquote><p><a href="https://www.zhihu.com/people/dai-yu-xiao-72">鬼斧神工119 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/31392770">用科学的方式解释和破除HiFi中的一些所谓的玄学。 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/48449952">什么是音质？哪些因素影响音质？怎样提升耳机和音箱系统的音质？ - 知乎</a><br>太多了根本选不过来</p></blockquote><p>不需要把相关资料全部都读完（这方面的文章、书籍等太多了根本读不完），这个也不会出现在任何一年的高考所以不必太深入，只需要了解概念及其定义，确保不会指鹿为马也不会被轻易误导即可。两派都有值得借鉴的东西，相信哪些，不相信哪些，都是个人的选择。</p><h3 id="分清主次"><a href="#分清主次" class="headerlink" title="分清主次"></a>分清主次</h3><p>音频设备基本满足水桶效应，即任何一个环节出现短板都会影响最终的结果。对非短板的提升仍然能够提升整体素质，但对短板的加强是整体提升最快的方式。从声音的产生到其被传递到耳朵，大概会经过如下途径：</p><p><strong>歌手、录音设备→媒介（流媒体、 CD 等）→数模转换、信号放大→线材→耳机发声单元→共振→耳朵</strong></p><p>通常，第一环节（歌手、录音设备）不会有太大问题（要这里出丢人问题还开什么公司），最后环节（耳朵）也不会有太大问题（除非你的耳朵严重老化），因而我们需要尽力优化的就是从媒介到耳机的环节。</p><p>媒介，或称音源，主要以 320 kbps 编码的 MP3 格式出现，无损格式近年也变得触手可及。音源对声音的影响，远远不及后面二者。主观听感上，聆听流行乐时 320 kbps 与无损区别不大（可通过 ABX 测试验证）。不过，在有损压缩为 MP3 的过程中，确实有可能损失一部分人耳可感知的细节。因此，如果对音质有所追求，无损格式必不可少。</p><p>数模转换、信号放大属于播放器与耳放的问题。初烧阶段接触到的播放器与耳放，除非实在钱多得没地方花，仍然是一个很重要的影响声音的因素。失真不低、底噪极高等等缺陷，仍然不可忽视。不过当预算向上走，到达 2 字头四位数或更高，比起继续优化播放器，在耳机上做文章更值得考虑。</p><p>因为耳机负责了声音的产生与传导，决定了最终声音的频响与失真，是对整个系统影响最大的部件，往往也是需要花钱的环节。看看那些层出不穷的单元、分频、封装 <del>、溢价</del> ……就算你不曾发烧肯定也没少听说。而线材对信号传导的影响极其微小，以至于可以忽略不计，所以请千万不要在线材上投入过多，只要不存在过量的损坏导致失真就行。</p><p>共振同样不可忽视，包括耳套和佩戴方式。举个例子，当你把耳机用力向耳朵里摁（尤其是平头塞），可以相当明显地察觉到某个频段或整体的声音有所改变。因此，尽管耳机自带的原厂耳套一定是最能贴合这个耳机的设计的，但为了耳朵能听到更好的声音，也可以考虑更换记忆海绵套、三节套，或是像山灵这种原厂提供的不同调音风格的硅胶套。并且，也请务必确保耳机佩戴到位。这不是玄学，这是物理学。</p><p><strong>TL;DR: 对于可以花钱的环节，花钱优先级为：耳机&gt;播放器&gt;耳套&gt;耳放&gt;&gt;&gt;线材</strong> ，其中耳放可根据耳机和播放器调整优先级，不过初烧阶段有个像样的播放器用来推动耳机就够了。</p><h3 id="量力而行"><a href="#量力而行" class="headerlink" title="量力而行"></a>量力而行</h3><p>这才是最重要的点。不管你是学生还是刚步入职场的年轻人，是富豪还是生活在普通的白领家庭，在谈到发烧时，都不得不注意量力而行。</p><p>对 HiFi 感兴趣却未曾接触过除了手机附赠和低端价位的耳机的人，认为自己的耳朵不行、听不出音质区别可能很正常（至少本人是听周围想花钱入烧又把钱败到了别的地方的好些人这么说），不过当你实际试听一款拿得出手的音频系统时，就会发现其实多花这几百上千元挺值得的，可以感受到和百元塞相比质的提升（耳朵确实不好的人当我没说）。</p><p>那么为什么又要「量力而行」呢？很简单，因为你的耳朵终究有上限。￥99 到 ￥999 如果称为一个飞跃，那么 ￥999 到 ￥9999 的提升，大概有一半以上是溢价。拜物教让许多「老烧」盲目追求或许并不起眼的「提升」，这本身不可批判，毕竟人家赚的钱人家爱怎么用怎么用，但如果你读到了这里，我个人而言<strong>相当不建议</strong>你走向这个极端。￥9999 与其在音频设备上打水漂，不如分一半去三亚旅游（够七日了），或者去给喜欢的人买施华洛世奇。<strong>毕竟，追求音乐带给人的快乐，而非对比不同耳机有什么连声学仪器都难以检测的差异，才是发烧的根本意义。</strong></p><p><strong>单反穷三代， HiFi 毁一生。</strong></p><hr><blockquote><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/75482749">人耳的听觉极限 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/77437991">HiFi 系统的木桶效应与选购策略 - 知乎</a><br><a href="https://www.bilibili.com/video/av84349781">零差别测试简介 - Bilibili</a><br><a href="https://zhuanlan.zhihu.com/p/61491668">入耳式耳机耳套终极对比测评</a></p></blockquote><blockquote><p>延伸阅读：<br>（这里原来想去耳机大家坛找点推荐，不过转了一圈都不太满意…还是读鬼斧神工大佬的客观数据来得靠谱）<br><a href="https://www.zhihu.com/question/26914296/answer/883384313">有哪些便宜但音质特别好的耳机推荐？ - 鬼斧神工119的回答 - 知乎</a><br><a href="https://www.zhihu.com/lives/1046574455110823936">入坑耳机别走弯路：耳机入门详解 - 知乎 Live</a><br><a href="https://www.zhihu.com/lives/1108382018655789056">耳机发烧少走弯路！耳机选购指南 - 知乎 Live</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;WHY&quot;&gt;&lt;a href=&quot;#WHY&quot; class=&quot;headerlink&quot; title=&quot;WHY?&quot;&gt;&lt;/a&gt;WHY?&lt;/h2&gt;&lt;h3 id=&quot;为什么要入烧&quot;&gt;&lt;a href=&quot;#为什么要入烧&quot; class=&quot;headerlink&quot; title=&quot;为什么要入烧&quot;&gt;&lt;/a&gt;为什么要入烧&lt;/h3&gt;&lt;p&gt;很简单——为了满足自己的耳朵对音乐的要求。不同品牌不同价位不同风格的设备，给人的感觉完全不一样。初烧，意即初次涉猎发烧，是对 HiFi （高保真）的初次追求，或者说，是对满足自己耳朵的声音的初次追求 &lt;del&gt;（毕竟 HuFi）&lt;/del&gt; 。不需要一直&lt;ruby&gt;&lt;rb&gt;深入&lt;/rb&gt;&lt;rt&gt;&lt;del&gt;烧钱&lt;/del&gt;&lt;/rt&gt;&lt;/ruby&gt;，即便浅尝辄止，入手一套适合自己日用、能够给自己带来享受的音频设备，应该也是相当重要的一件事。鉴于初烧预算、便携度等限制，本文仅探讨耳机系统，不会涉及到更好更 HiFi 也更贵更玄学的音箱系统。&lt;/p&gt;
&lt;h3 id=&quot;为什么要写这篇文章&quot;&gt;&lt;a href=&quot;#为什么要写这篇文章&quot; class=&quot;headerlink&quot; title=&quot;为什么要写这篇文章&quot;&gt;&lt;/a&gt;为什么要写这篇文章&lt;/h3&gt;&lt;p&gt;音频设备一般符合「一分钱一分货」定律（当然超出其使用价值的话也会有「一块钱两分货十块钱三分货」的操作），对于初烧而言尤其如此。这篇文章旨在通过容易理解的语言，帮助各位避开可能存在的坑，以使把钱花在刀刃上。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;事实上是看到身边太多人买智商税实在忍不下去决定干脆写篇文章代替一个一个解释半天&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="HiFi" scheme="https://blog.rachelt.one/tags/HiFi/"/>
    
  </entry>
  
  <entry>
    <title>Dating While Dying [译]</title>
    <link href="https://blog.rachelt.one/articles/dying-while-dating/"/>
    <id>https://blog.rachelt.one/articles/dying-while-dating/</id>
    <published>2020-01-01T14:39:44.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。</p></blockquote><blockquote><p>本文来自纽约时报，原文作者 Josie Rubio ，文章源地址： <a href="https://www.nytimes.com/2019/08/24/opinion/sunday/dating-while-dying.html">Opinion | Dating While Dying - The New York Times</a> 。译文对原文部分句子语序略有修正，以符合中文需要。鉴于原标题在表意上的无可替代性，将其保留不译。</p></blockquote><p>某个晚上，当我和一个朋友去酒吧与我在约会软件上认识的人见面时，她问：“你对这些人都说了什么？”我打开资料页，把手机递给了她。</p><p>“我身患癌症，所以如果你想约我出去逛，马上行动！”第一行这么写道。</p><p>“很不错嘛。”她笑了笑说。</p><span id="more"></span><p>一年前，当治疗收效不佳而我日渐病重时，陪伴我 12 年的男友去伦敦出了趟差，在那儿他与一个老朋友，最近分手的普拉提教练，“重建联系”。那之后他为自己定了去欧洲的单人旅程，我偶然听到他说他坐在她摩托车的后座上骑车转悠，抓着她臀部的时候有多么有趣。他也说他很享受一个人走走而不用思考癌症的感觉。显然，还有我。</p><p>就这样了。我们的关系到此为止。我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。</p><p>我的癌症没有离开。它被当慢性病对待。我肯定会死于它了，如果我没被公交车撞上的话。（为什么人们总是把那当作死于癌症的替代品？“你可不知道！”他们欢快地说，“你也可能明天被公交车撞上！”）医生们用治疗、注射和输血为我买来时间与健康。我还能健康几个月，如果幸运的话。但总体上，很可能没多少时间了。</p><p>事实上，我已准备好死去而非再去约会。从一些人对我所说看来，作为一个 40 多岁的单身妇女，我可能也<em>已经</em>死了。</p><p>分手后，我拒绝去约会。我知道病情恶化前我只会有有限的时间与我关心的人在一起了。为什么我还会想去见陌生人？然而，朋友们推着我去。有时就是字面意思。在哥本哈根的 Octoberfest 上，我拜访的朋友将我带入一群身着皮裤醉醺醺地唱着跳着 Time Of My Life 的丹麦人时声明：“你不能让你最后的经历如此糟糕。”</p><p>回家后，我的决心弱化了。某天晚上，我在音乐会上看到了前任和他离开我去追求的那个女人。我不觉得伤心或嫉妒，只是很轻松，是她而非我在吧台上放下信用卡为他的酒水买单。是时候迈出脚步了。</p><p>一个朋友帮我注册了约会软件。另一个朋友——乐意做我约会软件向导[1]的那个人——帮我搞定了资料页与照片。“这个人有张与 Bill Murray 一起的照片。”我第一次轻滑时注意到。“Tinder 上全是 Bill Murray 的照片。”我朋友睿智地说。</p><p>自我六年前确诊癌症起，我已有泵入静脉的毒物，插入脖子的管道，被移除的器官，施在身上的放射纹身。我剃了好几次头。我咳出过小块食道。医生们给我做了腰椎穿刺，还以一根针固定了我的骨髓。但以约会为名见一个陌生人还是让我心中充满恐惧。“我宁愿去做骨髓活组织检查。”我在赴约十多年来的第一次约会前这么和我朋友聊道。</p><p>但我去了。还不错。有趣，事实上。所以我摆脱不了，又约了几次。</p><p>在某次美妙的约会后，我认识到一个惨重的事实：我只能提供现在，无法提供有希望的未来。“你不知道。”一个朋友和我说。</p><p>“因为我明天可能就被公交车撞上？”我以虚弱的微笑回应道。一个月内，我鼻青脸肿，弄缺颗牙，擦破膝盖。那天早上，我差点走下路缘，闯入一辆驶来的面包车的路。淋浴时滑倒而死的可能性看起来正在排挤癌症。</p><p>“不，”她回答，“因为你可能 90 岁时还在和我抱怨约会的事。”</p><p>随着一切推进，我会定下一些约会规则，然后打破它们。我为自己付账，因为换别人来付感觉交易性太重。此外，为我<em>与</em>前任付了数年账后，这看起来仍像个好主意。首次约会时我通常不吃东西，因为那场面会很丑陋。</p><p>然后，在一次见面饮后，某人要求我与他共进晚餐，坚持付钱。在我像个中世纪国王般狼吞虎咽掉一块鸭胸时，我告诉他，我不吃小羊，因为它们很可爱，不吃章鱼，因为它们很聪明，但吃鸭子就没事，因为我读到它们可能是恋尸癖者。“如果你想想，”我对裹着大豆蜂蜜汁的熏鸭动叉子时说，“被吃掉是它们死后会发生的<em>第二</em>糟糕的事。”</p><p>我很擅长约会对话。癌症？恋尸癖？话题随便挑。</p><p>一个癌症晚期的人能在约会应用上做什么？我想，我与所有人想要的一样。我想要一个一起度过时光的人。他会告诉我我很好看。只是这都只为短多了的一段时间。病情再度严重时，我也不期待任何人陪着我。我的上一段关系让我感觉像个负担。事实上，他与我在一起相当幸运。我现在知道了。</p><p>我也曾（现在仍）害怕取得进展并伤害别人。那感觉很自私。但若我喜欢某人，我全情投入。人们可能会认为这是因为癌症，但我向来如此，从 1992 年 7 月 4 日我 14 岁时的第一次约会，从树木覆盖的林间空地上我坐在第一任男友的四轮车上，看着附近 SeaWorld 的焰火起。</p><p>我必须回家，但不想带回初吻。我们在流星下许过愿后，我就有了所需的引子。“你知道我这一年一直想做什么吗？”我说，提及自从他穿着 Guns ’n’ Roses 的 T 恤走进我九年级新生第一天的英语课时我就萌芽的迷恋。</p><p>“什么？”他问。</p><p>“吻你。”我说。然后我们在焰火下亲吻。</p><p>当某人最近发消息了解我们下次约会时我想做什么时，我回答：“我希望这不算太快，但我想做一件事，就是在除了下着雨的街角外的某地吻你。”显然，我还是那个 14 岁的我。</p><p>癌症给我留下伤疤，放射纹身和 Mediport ，但那次糟糕的关系给我留下了我有时无法看到的疤。我道歉太多，比如这次我把约会的纸巾打下了桌。“没问题，”他疑惑地看着我说，“我不会冲你大喊大叫。”我意识到我在等他责备我，就像前任会做的那样。</p><p>那个让我打破一些规矩的男人让我粉碎更多。我在他的坚持下勉强而糟糕地起舞，却全程笑着度过。我越过餐厅的桌子，与他十指相扣。我在公共场合从他那偷走亲吻。有时我都不认识我自己了。</p><p> 我很开心，也很难过。</p><p>死亡不是个抽象概念。我一周一周，一刻一刻地活着。我活得充实，但我向来如此。在新的治疗后，有时我甚至可以不考虑癌症地走走。我同意我前任的观点：这感觉不错。1992 年的第一场约会以来，我就想找个人，感受我生命的一部分安定下来。但从 28 岁到 40 岁，我也仅是停留。说到这儿。</p><p>当我前任在分开那天吻别我时，我想：“这会是最后一次有男人吻我了。”</p><p>一些事弄错终究还不错。</p><hr><p>[1] 原文为 Sherpa ，夏尔巴人，经常作为登山向导。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文来自纽约时报，原文作者 Josie Rubio ，文章源地址： &lt;a href=&quot;https://www.nytimes.com/2019/08/24/opinion/sunday/dating-while-dying.html&quot;&gt;Opinion | Dating While Dying - The New York Times&lt;/a&gt; 。译文对原文部分句子语序略有修正，以符合中文需要。鉴于原标题在表意上的无可替代性，将其保留不译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;某个晚上，当我和一个朋友去酒吧与我在约会软件上认识的人见面时，她问：“你对这些人都说了什么？”我打开资料页，把手机递给了她。&lt;/p&gt;
&lt;p&gt;“我身患癌症，所以如果你想约我出去逛，马上行动！”第一行这么写道。&lt;/p&gt;
&lt;p&gt;“很不错嘛。”她笑了笑说。&lt;/p&gt;</summary>
    
    
    
    
    <category term="译文" scheme="https://blog.rachelt.one/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>9102 的年度总结，献给陪伴至今的各位</title>
    <link href="https://blog.rachelt.one/articles/2019-2020/"/>
    <id>https://blog.rachelt.one/articles/2019-2020/</id>
    <published>2019-12-31T12:45:09.000Z</published>
    <updated>2022-05-19T18:47:36.816Z</updated>
    
    <content type="html"><![CDATA[<p>春去秋来，一年将逝，一年伊始。</p><p>Rachel 高中生涯最后的 150 天，即将揭开序幕。</p><p>过去的一年，由于种种因素影响，最终没能好好地陪伴各位。社交也好，社团也好，忙于日常的自己占据了大部分时间，另一个作为极客、开发者的 Rachel ，露面则越来越少。</p><p>将来的一年，期待着随着 NCEE 的结束以及自用一大堆设备的更新换代，能与各位分享更多。</p><p>不管如何，今年的年度总结 ，想与各位分享生活中的 Rachel 。</p><span id="more"></span><h3 id="年度单曲：《夏代孝明-プラネタリウムの真実》（天象仪的真相）"><a href="#年度单曲：《夏代孝明-プラネタリウムの真実》（天象仪的真相）" class="headerlink" title="年度单曲：《夏代孝明 - プラネタリウムの真実》（天象仪的真相）"></a>年度单曲：《夏代孝明 - プラネタリウムの真実》（天象仪的真相）</h3><p><a href="http://music.163.com/m/song?id=1347638431"><img src="https://s.mxmcdn.net/images-storage/albums4/7/2/2/9/4/7/41749227_800_800.jpg" alt="Gänger (Album art)" style="zoom: 25%;" /></a></p><blockquote><p>专辑封面来自 Musixmatch ，点击可跳转至网易云</p></blockquote><p>思考了很久，最终还是选定了这首《天象仪的真相》。夏代孝明的声音很暖，很能打动人心。这首歌本身素质也特别高，尤其是词，连续几个月霸占了咱日历上为数不多的空白位置。</p><p>可那些都很难成为这首歌占据这个位置的理由。从《久远寺有珠》，到《心拍数#0822》，这些歌都很出彩，会喜欢它们的人也远多于《天象仪的真相》，一度让 Rachel 难以抉择。</p><p>事实上，《天象仪的真相》给 Rachel 带来了一种难以言喻的熟悉与陪伴感。不知道是谁曾给过 Rachel 这样的感觉，但一听到夏代孝明的声音，就仿佛那个人一直在身边。有时耳机里播着这首歌，躺在床上回忆自己的一天，也会想到，这样活下去，或许也挺好。</p><p>希望你也能想起某个能给你力量的人。</p><blockquote><p>天象仪描绘出的未来</p><p>微不足道的天体与感情</p><p>与今晚 2 时的天体一同歌唱吧</p><p>不需要什么理由</p><p>我在你的身边</p><p>想要描绘出那样的日子呢</p><p>每一分每一秒</p></blockquote><h3 id="年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你-｡i-i｡-】》"><a href="#年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你-｡i-i｡-】》" class="headerlink" title="年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你(｡ì _ í｡)】》"></a>年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你(｡ì _ í｡)】》</h3><p><a href="https://www.bilibili.com/video/av19740421"><img src="https://img.vim-cn.com/6c/d2cb87e3b1964d2d338ce41db4d0387ef3a2b6.png" alt="Cover" style="zoom: 25%;" /></a></p><blockquote><p>视频封面来自哔哩哔哩，点击可跳转至原视频</p></blockquote><p>与《天象仪的真相》不同，选出这个几乎是不假思索。在最孤独最无助最无法支撑自己见到明天的那些夜晚，当夕阳的余晖隔着迎风起舞的露露和一层屏幕照耀着 Rachel，脸上不知何时就已泛起微笑。</p><p>这个视频已经被 Rachel 安利过给无数人无数次了。从 8102 的某个下午开始，它一直是 Rachel 的小宝藏。希望大家也能在露露的舞中找到力量。</p><p>明天也要努力活下去啊。</p><blockquote><p>尽管胆怯 不过现在的话能说出口呢</p><p>将地球最后的 告白</p></blockquote><h3 id="年度游戏：《魔法使いの夜》（魔法使之夜）"><a href="#年度游戏：《魔法使いの夜》（魔法使之夜）" class="headerlink" title="年度游戏：《魔法使いの夜》（魔法使之夜）"></a>年度游戏：《魔法使いの夜》（魔法使之夜）</h3><img src="https://img.vim-cn.com/eb/0deaf301c3d924438b851a6d099acef2a5a2c1.png" alt="Screenshot" style="zoom: 50%;" /><blockquote><p>CG 截图，来自 Rachel 的 Twitter</p></blockquote><p>又一个不假思索选出来的项。Rachel 一直以为自己对 Gal 不会感兴趣，先前玩过的也从没有耐心推完，直到今年摸到了 2012 发售的《魔法使之夜》。作为补全型月世界观的必做功课，型月四花旦中仅靠一款作品就能得到一席之地的《魔法使之夜》具备着其特有的魅力。无论是穿插着非正常因素的同居物语和「不愧是蘑菇」的人物与世界观，还是众主创跳票数年换来的、甚至连动画都不一定能做到的视觉小说体验，《魔法使之夜》在未来，可能只能被其续作超越了。</p><p>所以蘑菇到底什么时候出《月姬 R》和《魔夜 2》啊！</p><p>你们给 FGO 氪的每一单就是《月姬 R》和《魔夜 2》坟头上的一把土啊！</p><p><del>型月发售《魔 2》日，家祭无忘告乃翁</del></p><blockquote><p>那是一句咒语。<br>包含着她那些复杂想法的诀别。</p><p>那是能够倒回某人的幸福时光的，青色的魔法之声。</p></blockquote><h3 id="年度电影：《Fate-x2F-stay-night-Heaven’s-Feel-Ⅱ-lost-butterfly》（命运之夜——天之杯II-：迷失之蝶）"><a href="#年度电影：《Fate-x2F-stay-night-Heaven’s-Feel-Ⅱ-lost-butterfly》（命运之夜——天之杯II-：迷失之蝶）" class="headerlink" title="年度电影：《Fate&#x2F;stay night [Heaven’s Feel] Ⅱ.lost butterfly》（命运之夜——天之杯II ：迷失之蝶）"></a>年度电影：《Fate&#x2F;stay night [Heaven’s Feel] Ⅱ.lost butterfly》（命运之夜——天之杯II ：迷失之蝶）</h3><img src="https://img.vim-cn.com/2b/3cc1e443eeed8e2a6e45773c5f36dd8202003f.png" alt="Poster" style="zoom: 25%;" /><blockquote><p>正式海报来自豆瓣</p></blockquote><p>《天气之子》和《复仇者联盟 4》都差点抢走这个位置，也都给 Rachel 留下了深刻的印象。然鹅，与《魔法使之夜》同源的《迷失之蝶》，是 Rachel 今年看得最爽的一部电影，也代表了 Ufotable 最高的制作水准。 </p><p>还需要过多解释吗？明年 NCEE 之后《春之歌》也差不多该在国内上映了，我 ** 看爆！</p><h3 id="年度感谢：陪伴至今的各位"><a href="#年度感谢：陪伴至今的各位" class="headerlink" title="年度感谢：陪伴至今的各位"></a>年度感谢：陪伴至今的各位</h3><p>从开始码字开始，不知不觉已经过了好几个小时了。打磨来打磨去，总也打磨不出一个能让自己满意的结果。还想分享的东西太多太多，比如 HiFi ，比如英语，比如模联，但限于本文的布局，要插入些什么实在太难。</p><p>2019 走了，崭新的 2020 即将来临。未来很长，感谢各位一路陪 Rachel 走来，也希望各位能一直陪 Rachel 走下去。那时各位面前的 Rachel ，一定也会和从前，也和这篇文章一样，自顾自地说个不停吧。新的一年，还请各位多多包涵。</p><blockquote><p>本文所用全部影像资料之著作权均归属于原作者，以非盈利方式使用。若对著作权有异议，请及时通知 Rachel 以予删除。你可以在 <a href="https://me.stfw.info/">这里</a> 找到联系方式，或直接 <a href="mailto:291054446@qq.com">发函</a> 。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;春去秋来，一年将逝，一年伊始。&lt;/p&gt;
&lt;p&gt;Rachel 高中生涯最后的 150 天，即将揭开序幕。&lt;/p&gt;
&lt;p&gt;过去的一年，由于种种因素影响，最终没能好好地陪伴各位。社交也好，社团也好，忙于日常的自己占据了大部分时间，另一个作为极客、开发者的 Rachel ，露面则越来越少。&lt;/p&gt;
&lt;p&gt;将来的一年，期待着随着 NCEE 的结束以及自用一大堆设备的更新换代，能与各位分享更多。&lt;/p&gt;
&lt;p&gt;不管如何，今年的年度总结 ，想与各位分享生活中的 Rachel 。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
