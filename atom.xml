<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rachel&#39;s Blog | Rachel030219</title>
  
  <subtitle>Where dreams converge</subtitle>
  <link href="https://blog.rachelt.one/atom.xml" rel="self"/>
  
  <link href="https://blog.rachelt.one/"/>
  <updated>2024-01-11T15:26:20.256Z</updated>
  <id>https://blog.rachelt.one/</id>
  
  <author>
    <name>Rachel030219</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023，另一个角度</title>
    <link href="https://blog.rachelt.one/articles/2023-2024/"/>
    <id>https://blog.rachelt.one/articles/2023-2024/</id>
    <published>2024-01-11T00:52:39.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>认识不认识的摄影人都在用照片总结自己过去的一年，思考了很久要不要凑这个热闹。想来并没有特别珍贵、值得留存的回忆，更没有足够出彩的照片，拿出来也撑不住场面。</p><p>不过细想，或许还是需要一份以图为主的快速回顾。</p><p>故有此文。</p><blockquote><p>前方致死量图片警告。为保证阅读质量，大部分图片仅展示压缩版本，可点击图片查看原始大图。</p><p>文中所有图片均以 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh-hans">知识共享 署名-非商业性使用-相同方式共享 4.0</a> (CC BY-NC-SA 4.0) 协议授权免费使用。部分图片另有 <a href="https://unsplash.com/@rachel2brich/">Unsplash</a> 版本，由 Unsplash 分发的图片遵循 <a href="https://unsplash.com/license">Unsplash License</a> 。</p></blockquote><span id="more"></span><style type="text/css"> .post .content img { max-height: 80vh !important; } </style><p>一月阳完，去了大连。旅顺、东港、海之韵，星海广场、动物园。过年。《流浪地球》，聚会、爬山。</p><p>二月换了 a6000，将就地索尼 35、太苦玛 55。然后生日趴、长沙。然后面基、修机。《星铁》不如《P5R》，索尼 18-135 就还行。</p><p><a href="02.jpg"><img src="02.webp" alt="02"></a></p><p><a href="03.jpg"><img src="03.webp" alt="03"></a></p><blockquote><p>摄于大连，星海广场。</p></blockquote><p>三月备考雅思、收寄明信片，吹春夜湘江的风。对我来说的《崩坏3》完结，陪它走了整整六年。</p><p><em>且行且看，尽力而为；不要害怕，不要后悔。</em></p><p><a href="09.jpg"><img src="09.webp" alt="09"></a></p><p><a href="10.jpg"><img src="10.webp" alt="10"></a></p><blockquote><p>摄于长沙，微软售后所在大楼、我校。</p></blockquote><p>考完后追日落与雨后樱花，追上了雨前洋湖及胶片复兴潮。《铃芽》还可以，彭耕记牛逼。</p><p><a href="11.jpg"><img src="11.webp" alt="11"></a></p><p><a href="12.jpg"><img src="12.webp" alt="12"></a></p><p><a href="19.jpg"><img src="19.webp" alt="19"></a></p><p><a href="13.jpg"><img src="13.webp" alt="13"></a></p><p><a href="14.jpg"><img src="14.webp" alt="14"></a></p><blockquote><p>摄于长沙，碧沙湖、植物园、洋湖。</p></blockquote><p>四月实习，接着上海面基。膝盖查出问题，《宇宙探索编辑部》浩瀚无垠。</p><p>沪国！你可真是个沪国。Steam Deck 不太合我意，还是看看远处的「契约已成，相聚必胜」吧。</p><p><a href="15.jpg"><img src="15.webp" alt="15"></a></p><p><a href="16.jpg"><img src="16.webp" alt="16"></a></p><p><a href="17.jpg"><img src="17.webp" alt="17"></a></p><p><a href="18.jpg"><img src="18.webp" alt="18"></a></p><blockquote><p>摄于益阳、上海。</p></blockquote><p>五月面基，开福寺、象鼻窝。橘子洲烟花猝不及防，沸焰音乐节如期而至。索蔡 55 ZA 实在是菜，Pixel 6P 乏善可陈。《摄影小史》尚可一读，《孤星》剧情相当震撼，可惜，任天堂就是世界的主宰！</p><p><a href="20.jpg"><img src="20.webp" alt="20"></a></p><p><a href="20.5.jpg"><img src="20.5.webp" alt="20.5"></a></p><p><a href="21.jpg"><img src="21.webp" alt="21"></a></p><blockquote><p>摄于长沙，开福寺、梅溪湖、中山亭。</p></blockquote><p>六月，猫猫。嘿嘿，猫猫。徐记海鲜后，换上 iPhone 12 mini 去兴马洲，参加学长毕业礼，喜提 MBA M1。</p><p><a href="22.jpg"><img src="22.webp" alt="22"></a></p><blockquote><p>摄于我校。</p></blockquote><p>七月，回家奋战秋招。跑长沙面基，学台球，吃甜品，维护「大学生活质量指北」，拍下了青蓝色的天空。</p><p><a href="24.jpg"><img src="24.webp" alt="24"></a></p><blockquote><p>摄于家。</p></blockquote><p>八月带着腾龙 17-70，降落青岛前途径虎头窝。住在好朋友家就是不一样。可惜长江轮渡虽好，比不上黄海的波涛。</p><p><a href="26.jpg"><img src="26.webp" alt="26"></a></p><p><a href="27.jpg"><img src="27.webp" alt="27"></a></p><p><a href="28.jpg"><img src="28.webp" alt="28"></a></p><p><a href="30.jpg"><img src="30.webp" alt="30"></a></p><p><a href="31.jpg"><img src="31.webp" alt="31"></a></p><p><a href="32.jpg"><img src="32.webp" alt="32"></a></p><p><a href="33.jpg"><img src="33.webp" alt="33"></a></p><blockquote><p>摄于武汉、青岛、长沙。</p></blockquote><p>九月，专业实训，读博尔赫斯和《鼠疫》，读《艺术的“地缘政治”里没有应许之地》。看城下人来人往，城上层层叠叠。 《奥本海默》相当惊喜，ChiliChill 余音绕梁，回家过国庆。</p><p>十月，校友群面基，学着成为更好的人，往返于湖南省人医。《惊奇》很好玩，《Fate&#x2F;Samurai Remnant》一般般，感觉不如原神音乐会，我直接爽翻。</p><p><a href="34.jpg"><img src="34.webp" alt="34"></a></p><p><a href="35.jpg"><img src="35.webp" alt="35"></a></p><p><a href="36.jpg"><img src="36.webp" alt="36"></a></p><blockquote><p>摄于长沙，北辰大悦城、IFS、天心阁。</p></blockquote><p>十一月，秋末暖阳、offer、仰望咖啡、开福寺银杏。米 13 真香。</p><p><a href="38.jpg"><img src="38.webp" alt="38"></a></p><blockquote><p>摄于长沙，开福寺。</p></blockquote><p>十二月，沸焰，圣诞，面基。租了索尼 10-20，买了适马 18-50。《霍格沃茨之遗》勉强，She Her Her Hers 很顶，《爱乐之城》无敌。</p><p><a href="39.jpg"><img src="39.webp" alt="39"></a></p><blockquote><p>摄于长沙，荟聚。</p></blockquote><p>跨年在武汉，和朋友们一起的记忆，现在回想依旧无比幸福——</p><p><a href="40.jpg"><img src="40.webp" alt="40"></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;认识不认识的摄影人都在用照片总结自己过去的一年，思考了很久要不要凑这个热闹。想来并没有特别珍贵、值得留存的回忆，更没有足够出彩的照片，拿出来也撑不住场面。&lt;/p&gt;
&lt;p&gt;不过细想，或许还是需要一份以图为主的快速回顾。&lt;/p&gt;
&lt;p&gt;故有此文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前方致死量图片警告。为保证阅读质量，大部分图片仅展示压缩版本，可点击图片查看原始大图。&lt;/p&gt;
&lt;p&gt;文中所有图片均以 &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh-hans&quot;&gt;知识共享 署名-非商业性使用-相同方式共享 4.0&lt;/a&gt; (CC BY-NC-SA 4.0) 协议授权免费使用。部分图片另有 &lt;a href=&quot;https://unsplash.com/@rachel2brich/&quot;&gt;Unsplash&lt;/a&gt; 版本，由 Unsplash 分发的图片遵循 &lt;a href=&quot;https://unsplash.com/license&quot;&gt;Unsplash License&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="年度总结" scheme="https://blog.rachelt.one/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    <category term="摄影" scheme="https://blog.rachelt.one/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>色彩可视化：从图片制作 CIE 1931 色谱</title>
    <link href="https://blog.rachelt.one/articles/converting-image-to-cie-1931-diagram/"/>
    <id>https://blog.rachelt.one/articles/converting-image-to-cie-1931-diagram/</id>
    <published>2024-01-04T15:42:26.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来，针对色彩的讨论都是「玄学」重地。无论是手机还是相机、镜头，评测里绝对少不了大谈特谈一番「色彩」，却又鲜有人真能说出个门道。若设备有明显色彩倾向，或许还能用上个「偏黄」「发绿」之类字眼，对于「佳能拍人像、尼康拍风景」，或者「苹果真实而寡淡、小米浓郁而偏暖」，听着就只是一种刻板印象了。</p><p>但这又确实是一个，长久以来一直都可以严谨量化的领域。哪怕以 1931 年国际照明委员会提出 CIE RGB &#x2F; XYZ 色彩空间作为起点，至今也已有八十余年，甚至比现行使用最广泛的 JPEG (ISO&#x2F;IEC 10918-1:1994) 标准都要早半个世纪。到今天，几乎所有图片都会附带一个 ICC 文件，专门用来完成色彩管理工作；无论是还原到线性 gamma，还是从线性 gamma 转换至 CIE &#x2F; PCS XYZ 再进一步绘出 CIE 1931 色谱，哪怕不是非常简单，至少也有标准可循。</p><p>这也是一个，长久以来一直欠缺严谨量化的领域。1931 年画出的那个舌形图至今仍具有相当理论价值，可即使是 DXOMARK 这类专业评测，都鲜有针对镜头色彩的测试；DPReview 曾经有 <a href="https://www.dpreview.com/reviews/nikond2x/13">相关对比</a> ，给出 CIELUV 的色域分布，但它最多只能算是同一相机不同输出模式的比较，不具备太多参考意义。至今可能只有先看走得最远，他们在 <a href="https://www.bilibili.com/video/BV1yG411r7Gk/">视频</a> 里提到，日后将与中国计量科学研究院合作，把色彩表现能力纳入评测内容。尽管视频中的评测方式不一定适用于计算摄影，如果他们后续开始对色彩进行客观评价，那也是评测行业一个不小的进步。</p><p>触动我的则主要是群友的博客： <a href="https://www.wavechaser.xyz/optics-imaging-zh/2020/1/abyss-p1-hanabi">《「所谓玄学」Part I：给色彩，打上花火》</a> 。在这篇博客里，群友波波通过限定环境标板测试与实拍测试，证明了色彩的可量化性，并且通过标板的测试结果，成功解释了不同镜头在实拍测试中的表现。然而，中国计量科学研究院、标板、严格到色温的光照条件，这些名词离普通人都太远了。有没有办法直接从照片获得色彩分布呢？</p><span id="more"></span><p>当然有。我做了一个 Python 脚本，只要喂进图片就能生成对应的色谱图：</p><p><img src="python-screenshot.webp" alt="Python script screenshot"></p><h2 id="常见问题与太长不看"><a href="#常见问题与太长不看" class="headerlink" title="常见问题与太长不看"></a>常见问题与太长不看</h2><h3 id="咋整啊？"><a href="#咋整啊？" class="headerlink" title="咋整啊？"></a>咋整啊？</h3><p>我将小工具开源在 <a href="https://gist.github.com/Rachel030219/1bdf6c6eb63115a9a61eb27618ecb579">Gist</a> ，可遵循 GPLv2 协议自由分发使用，也可直接下载文件 <a href="picture_to_cie_diagram.py">picture_to_cie_diagram.py</a> 。本地准备好 Python 3 环境，安装 <a href="https://exiftool.org/">ExifTool by Phil Harvey</a> ，运行 <code>python3 -m pip install numpy matplotlib colour-science imageio PyExifTool</code> ，再执行 <code>python3 picture_to_cie_diagram.py &lt;图片路径&gt;</code> 即可。如果 <code>&lt;图片路径&gt;</code> 是 <code>test.jpg</code> ，那么生成的色谱图会被保存到 <code>test_diagram.jpg</code> 。</p><p>这个小工具可以读写绝大多数图片文件，但更推荐使用 TIFF ，尽量避免使用 JPG 和 PNG，以最大化保留信息、还原色彩。</p><h3 id="整这些有啥用啊？能让-XX-拍照比-YY-强吗？"><a href="#整这些有啥用啊？能让-XX-拍照比-YY-强吗？" class="headerlink" title="整这些有啥用啊？能让 XX 拍照比 YY 强吗？"></a>整这些有啥用啊？能让 XX 拍照比 YY 强吗？</h3><p>没用，不能。在影响镜头成像的因素中，和锐度等因素比起来，色彩终究是一个比较靠后的选项，或者说，鲜少听说因为镜头 B 全方位拉胯、唯独色彩比 A 好，就会从 A 换到 B 的情况。对于手机来说更是如此，且不说根本没有镜头可以更换，在高度风格化的计算摄影中，能保留多少镜头色彩，还要打一个大大的问号。</p><p>但它依然有所意义。波波博客证明了「色彩可以被量化」，而我想解决的是「色彩如何量化」。通过这套方案，所有人都能够从任意 RGB 图片绘制 CIE 1931 色谱图，前期环境有多么严格受控，结果就多么符合实际。哪怕只是将两台手机拍的照片放在一起，也能看出它们色彩倾向的差异。</p><p>话又说回来，「色彩倾向」没有优劣，只有偏好。工具不会说话，也不提供目标；具体如何解释它产出的结果，就要交给使用工具的人了。</p><hr><p>接下来，如果还有兴趣，我们讨论一些硬核内容：</p><h2 id="先从色彩原理说起"><a href="#先从色彩原理说起" class="headerlink" title="先从色彩原理说起"></a>先从色彩原理说起</h2><blockquote><p>本文默认读者具有中国大陆大学理工科的基本数学知识，作者并非数字图像处理、数字传媒或相关专业学生，本部分仅希望粗略且尽量浅显地普及前置知识，若有偏颇还请指正。</p></blockquote><p>色彩原理，很大程度上是线性代数的魔法。如我们所熟知的那样，任何颜色基本都由三维构成：在颜料这种减色系统中，我们有红黄蓝，以及印刷工业里常见的青、品红、黄 (CMY)，它们和黑 (K) 一起组成了 CMYK；在光这种加色系统中，我们听得最多的是红绿蓝 (RGB)，博学多闻的读者会知道 YCbCr、L*a*b*、HSL。对于人眼，大部分人感知色彩的视锥细胞也是三种：L、M 和 S，它们是「三维」的本质。</p><p>光是知道有三维还不够。一位老前辈，Grassmann，告诉我们色彩感知大体上是线性的。通俗地说，假设一束光 A 和一束光 B 混合后，人看到的颜色和一束光 Z 相同，我们把它写为：</p><pre><code class="highlight plaintext">Z = A+B</code></pre><p>如果此时两边同时混入一束光 C，人对它们的感知仍然相同，即：</p><pre><code class="highlight plaintext">Z+C = A+B+C</code></pre><blockquote><p>注意，这里的 <code>+</code> 并不是简单加和，而是「颜色混合」。</p></blockquote><p>这个定律就如同数学里 1+1 &#x3D; 2 一样基本，它表示无论何种色彩感知，最终都可以变成由三个值描述的、色彩空间里的某一个点，并且通过线性变换，就能够在不同色彩系统之间转换。</p><p>好学的读者会问：但是三维系统下所有人眼可见不可见的颜色都有，那也太不直观了，不是要作一张图吗？能不能使用一个二维坐标系就把色彩表示出来呢？</p><p>这就要请出 CIE XYZ 坐标系了。简单来说，这个坐标系抽象出了三个维度，其中 Y 轴严格遵循人眼对明度的感知函数 <code>V(λ)</code> 设置，X 和 Z 轴则可以保证坐标系中所有值都大于 0，方便在 1931 年进行计算，除此之外的规定不再赘述。总之，一旦拥有了 XYZ 坐标系，我们就成功地将明度 Y 从色度中分离。接着，我们可以对整个坐标系进行归一化：</p><pre><code class="highlight plaintext">x = X / (X + Y + Z)y = Y / (X + Y + Z)z = Z / (X + Y + Z) = 1 - x - y</code></pre><p>容易看出，只需要有 xyz 其二，再加上 XYZ 其一，就能完整表示整个 XYZ 坐标系。考虑到只有 Y 是独立的明度，将它和 xy 组合起来，就形成了 CIE xyY 色彩空间，而这 xy，就是我们所需、完整且好看的二维色度了。</p><h2 id="理论懂了，实际操作呢？"><a href="#理论懂了，实际操作呢？" class="headerlink" title="理论懂了，实际操作呢？"></a>理论懂了，实际操作呢？</h2><p>为了获得 xy，首先要获得 XYZ。Python 的 colour-science 包提供了很多有用的工具，不仅有从不同色域 RGB 转换至 XYZ 的矩阵，甚至还可以直接对 numpy 矩阵进行运算。这还不够，我们知道，图片通常都会经历一个 gamma 编码过程。这一过程非线性，它会不可避免地影响色彩，所以在转换前，我们还需要将 gamma 编码后的图像解码至线性。</p><p>简单来说，gamma 编码是一个高效利用码率的机制，通过在编码的时候，将更多空间用在人眼敏感的暗色区间，这样就能使用同样大小的文件，记录更多人眼可见的信息。</p><p><img src="gamma-correction.webp" alt="Gamma correction"></p><p>绝大部分情况下，图片文件使用 gamma 2.2，如上图所示。原始图像文件是对角线，通过 gamma 编码得到蓝色曲线，这样更多码值就被分配到了阴影部分。后续如果需要处理，例如从中提取色彩，则再通过橙色曲线变换，将蓝色曲线解码得到原始对角线。用公式来描述就是一个这样的过程：</p><pre><code class="highlight plaintext">O = I^(1/2.2)</code></pre><p>其中 O 是输出，I 是输入。由于 JPEG 文件中已经是 gamma 编码后的 O，为了得到 I，我们可以像这样进行运算：</p><pre><code class="highlight plaintext">I = O^2.2</code></pre><p>这样就得到了原始的线性图像。当然，由于目前大部分图片文件都会附带一个 ICC 描述文件，我们可以直接从 ICC 里面得到 TRC 函数、转换矩阵 (matrix) 以及中间色彩空间 (PCS, 通常是 XYZ) 。借助图片和显示设备的 ICC 描述文件，通常正确的颜色管理过程如下：</p><p><img src="color-management.webp" alt="Color management"></p><p>最终得到 device：在显示器上准确的 RGB 值。我们的工作只需要前一半，通过图片中编码的 RGB 值，经由 TRC 函数得到线性的 RGB (linear) ，最后通过转换矩阵得到 XYZ (connection) 。TRC 代表 Tone Reproduction Curve，意为「色调再现曲线」，处理输入到输出之间的亮度关系，它可以是一个描述了 <code>[0.0, 1.0]</code> 区间的矩阵，也可以是一个函数，具体内容可以参见 ICC.1: 2022 标准。</p><p>当然，阅读源码可以知道，经过 TRC 转换后，我们并没有进一步使用 matrix 计算得出 PCS XYZ。这是因为它作为 profile connection space，虽然与 CIE XYZ 大致相同，不过白点是 D50，而非常用的 D65；为了控制变量，我们忽略 ICC 提供的转换矩阵，直接统一使用 colour-science 提供的计算方法。</p><p>除此之外，ICC 标准还定义了许多种不同的转换模型，例如 LUT 以及多个转换方式混合使用的方案。这个工具仅对最典型的 RGB 下矩阵 &#x2F; TRC 模型给出支持，主要是因为我在使用中没有碰到使用其他模型的情况，难以测试。如果遇到使用 LUT 的 ICC 描述文件，也可以贴在评论区，以便进一步提供支持。</p><p>总之，借助 TRC 和 colour-science ，我们现在成功将 RGB 转换到了 CIE XYZ，接下来就是计算 xy。这一步很简单，能够直接使用 numpy 进行，但为了优化及控制变量，我们依旧使用 colour-science。</p><p>终于可以绘图了！这一步使用 matplotlib，功能非常全面的绘图库，优化做得也不错，绘制一张两千四百万个散点的图片，即使是 8GB RAM 的 Mac 也毫无压力。从维基百科找到 SVG 的 CIE 1931 色度图后，可以很方便地从中提取出图片的 path，进行亿点点简单的坐标变换，就能将它塞进 <code>[0.0, 1.0]</code> 的坐标系中。当然也可以自己转换自己画，只是开发时偷了点懒。</p><blockquote><p>原型开发过程中，本来使用的是 R，它的 brew 版调用 Quartz 绘图，直接吃爆了 40GB RAM 被杀掉；R Studio 画不出结果，Windows 下能出结果但卡得要命，所以惨遭弃用，好在群友给出了初版 Python 代码，详见感谢部分。</p></blockquote><p>最后，我们还需要为点着色。为了得到好看、直观、准确的色谱图，我们不使用原像素颜色，而是自己指定点亮度，或者说 xyY 中的 Y，再将 xyY 转换至 XYZ 后映射到 sRGB 空间。</p><h2 id="那么，前期该如何控制呢？"><a href="#那么，前期该如何控制呢？" class="headerlink" title="那么，前期该如何控制呢？"></a>那么，前期该如何控制呢？</h2><p>实验设计的关键是控制变量。以下将给出两个使用例，仅供参考。</p><h3 id="测试不同镜头的色彩表现"><a href="#测试不同镜头的色彩表现" class="headerlink" title="测试不同镜头的色彩表现"></a>测试不同镜头的色彩表现</h3><p>参考波波博客，可以将镜头转接至同一款相机，在受控（或相同）光照条件、相同视角、相同白平衡与曝光下，对相同被摄物进行拍摄，将 RAW 使用相同工具，例如 <a href="https://github.com/ncruces/dcraw">dcraw</a> 或者 <a href="https://ss64.com/mac/sips.html">Apple SIPS</a> 转制成相同色域的 16 bit TIFF，再使用这个工具进行对比。这里照搬一段波波的博客：</p><blockquote><p>限定环境下使用 3200K 钨灯作为主光源，搭配 Full CTB 高温滤纸矫正色温至 5500K Daylight；辅助使用 6200K 氙电弧闪光灯补全高温光谱，使用 -3EV 引闪程序补偿。</p><p>拍摄目标为 x-rite ColorChecker Classic 24-Patch  Target，面对它的 18% 灰色块人工锁定白平衡并确立 EV±0。拍摄时均采用 f&#x2F;4.0 光圈，以改善画质、减少暗角并增大景深。</p><p>……</p><p>后期统一使用 RawDigger（基于 dcraw）转制 16bit TIFF，Debayer 目标色域 Adobe RGB，不加载任何矫正 Profile（包括内含的强制 Profile 也被绕过），不使用厂商提供的 CCM。之后所有 TIFF 均被统一映射到 Linear Gamma，再统一通过提供的转换矩阵保形映射到 CIE XYZ 制作 Chromaticity 图表。所有图片均会被二次校正曝光，以排除通光量差异或闪光灯可能造成的照明差异的影响。</p></blockquote><p>前期控制变量自然是越严格越好。例如，尽管光度并不影响色度，前期不同曝光却会实实在在影响相机所能接收到的色彩，具体可以参考波波博客，这里就不再赘述。</p><h3 id="测试不同手机的色彩倾向"><a href="#测试不同手机的色彩倾向" class="headerlink" title="测试不同手机的色彩倾向"></a>测试不同手机的色彩倾向</h3><p>与上面针对镜头的单项测试不同，色彩倾向反映了整个色彩系统的综合表现。考虑到大部分手机的输出都有 ISP 与相机应用内算法的协同处理，这一项通常使用不同手机的默认相机，在相同光照环境、相同视角、相同画幅下拍摄相同被摄物，随后导出 <code>jpg</code> 文件进行处理。</p><p>当然，可以参考波波博客，对手机镜头的色彩表现进行对比。由于目前手机的 ISP 都喜欢对图像进行处理，软件拿到的 RAW 就有概率已经是处理后的图像，这么做参考性不太高，不过图一乐也无妨。</p><h2 id="感谢、参考与延伸阅读"><a href="#感谢、参考与延伸阅读" class="headerlink" title="感谢、参考与延伸阅读"></a>感谢、参考与延伸阅读</h2><p><a href="https://gist.github.com/Anthony-Hoo/b1630f320f990444d485ca0de6a52c10">初版 Python 脚本</a> 来自某位不愿透露姓名的嚯姓群友 <a href="https://github.com/Anthony-Hoo/">@Anthony Hoo</a> ，没有他的贡献就不会有这个工具。除此之外，在完成转换工具以及写作本文的过程中，我还参考了下列书目、标准或文章，若读者感兴趣，也可进行拓展阅读：</p><blockquote><p>Wyman, C., Sloan, P. P., &amp; Shirley, P. (2013). <a href="https://jcgt.org/published/0002/02/01/paper.pdf">Simple analytic approximations to the CIE XYZ color matching functions</a>. <em>J. Comput. Graph. Tech</em>, <em>2</em>(2), 11.</p><p>Kerr, D. A. (2010). <a href="https://graphics.stanford.edu/courses/cs148-10-summer/docs/2010--kerr--cie_xyz.pdf">The CIE XYZ and xyY color spaces</a>. <em>Colorimetry</em>, <em>1</em>(1), 1-16.</p><p>Schwartz, M. D. (2016). <a href="https://scholar.harvard.edu/files/schwartz/files/lecture17-color.pdf">Lecture 17: color</a>.</p><p>International Color Consortium. (2022). <a href="https://www.color.org/specification/ICC.1-2022-05.pdf">Specification ICC.1:2022</a>.</p><p>Phil Green. (2019). <a href="https://www.color.org/technotes/Guidelines_on_the_use_of_negative_PCSXYZ_values.pdf">Guidelines on the use of negative PCSXYZ values</a>.</p><p><a href="http://www.easyrgb.com/en/math.php">Math | EasyRGB</a> &amp; <a href="http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html">RGB&#x2F;XYZ Matrices</a></p><p>Wikipedia - <a href="https://en.wikipedia.org/wiki/Gamma_correction">Gamma correction</a> &amp; <a href="https://en.wikipedia.org/wiki/CIE_1931_color_space">CIE 1931 color cpace</a></p><p>知乎专栏 - <a href="https://www.zhihu.com/column/c_1602295156237197312">色彩科学</a> &amp; <a href="https://www.zhihu.com/column/c_1129083002797633536">色彩科学学习笔记</a></p></blockquote><p>在此一并表示感谢。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直以来，针对色彩的讨论都是「玄学」重地。无论是手机还是相机、镜头，评测里绝对少不了大谈特谈一番「色彩」，却又鲜有人真能说出个门道。若设备有明显色彩倾向，或许还能用上个「偏黄」「发绿」之类字眼，对于「佳能拍人像、尼康拍风景」，或者「苹果真实而寡淡、小米浓郁而偏暖」，听着就只是一种刻板印象了。&lt;/p&gt;
&lt;p&gt;但这又确实是一个，长久以来一直都可以严谨量化的领域。哪怕以 1931 年国际照明委员会提出 CIE RGB &amp;#x2F; XYZ 色彩空间作为起点，至今也已有八十余年，甚至比现行使用最广泛的 JPEG (ISO&amp;#x2F;IEC 10918-1:1994) 标准都要早半个世纪。到今天，几乎所有图片都会附带一个 ICC 文件，专门用来完成色彩管理工作；无论是还原到线性 gamma，还是从线性 gamma 转换至 CIE &amp;#x2F; PCS XYZ 再进一步绘出 CIE 1931 色谱，哪怕不是非常简单，至少也有标准可循。&lt;/p&gt;
&lt;p&gt;这也是一个，长久以来一直欠缺严谨量化的领域。1931 年画出的那个舌形图至今仍具有相当理论价值，可即使是 DXOMARK 这类专业评测，都鲜有针对镜头色彩的测试；DPReview 曾经有 &lt;a href=&quot;https://www.dpreview.com/reviews/nikond2x/13&quot;&gt;相关对比&lt;/a&gt; ，给出 CIELUV 的色域分布，但它最多只能算是同一相机不同输出模式的比较，不具备太多参考意义。至今可能只有先看走得最远，他们在 &lt;a href=&quot;https://www.bilibili.com/video/BV1yG411r7Gk/&quot;&gt;视频&lt;/a&gt; 里提到，日后将与中国计量科学研究院合作，把色彩表现能力纳入评测内容。尽管视频中的评测方式不一定适用于计算摄影，如果他们后续开始对色彩进行客观评价，那也是评测行业一个不小的进步。&lt;/p&gt;
&lt;p&gt;触动我的则主要是群友的博客： &lt;a href=&quot;https://www.wavechaser.xyz/optics-imaging-zh/2020/1/abyss-p1-hanabi&quot;&gt;《「所谓玄学」Part I：给色彩，打上花火》&lt;/a&gt; 。在这篇博客里，群友波波通过限定环境标板测试与实拍测试，证明了色彩的可量化性，并且通过标板的测试结果，成功解释了不同镜头在实拍测试中的表现。然而，中国计量科学研究院、标板、严格到色温的光照条件，这些名词离普通人都太远了。有没有办法直接从照片获得色彩分布呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="摄影" scheme="https://blog.rachelt.one/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="色彩科学" scheme="https://blog.rachelt.one/tags/%E8%89%B2%E5%BD%A9%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>nftables 入门：从配置文件到端口转发</title>
    <link href="https://blog.rachelt.one/articles/new-to-nftables-from-config-to-dnat/"/>
    <id>https://blog.rachelt.one/articles/new-to-nftables-from-config-to-dnat/</id>
    <published>2023-12-01T06:50:48.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>这学期前，学校防火墙迎来一波升级，路由器上本来用于绕过多设备封锁的方式尽数失效，考虑到它还跑着非常古老且风评不佳的修改版 OpenWrt，也是时候进行一点系统升级了。新系统最先困扰我的问题就是防火墙变动，OpenWrt 22.03 起，防火墙由 <code>fw3</code> 切换到了 <code>fw4</code> ，底层也从 <code>iptables</code> 变成了 <code>nftables</code> 。相较于 iptables，nftables 配置更灵活，语法更友好，并且可以直接接管 <code>Xtables</code> ——或者说此前整个 iptables 大家族——的功能，从 ipset 到 mangle 无所不能，但对于习惯 iptables 的用户来说，底层突然切换无疑会带来一定学习成本。</p><p>好在， nftables 的强大并不意味着它难以上手。正相反，花两天时间与它相处后，我发现借助详尽的 <a href="https://wiki.nftables.org/">官方 wiki</a> ，我能迅速熟悉这个新工具，甚至开始依赖起它带来的一些新特性。虽然 <code>iptables-nft</code> 可以非常方便地将 iptables 语句翻译为 nftables 配置，但它毕竟只是一个转换，更适合用于兼容古董软件，而且一些高级特性也无法被它正确识别，掌握如何自己配置 nftables 依旧重要。因此我将我的经验写在这里，希望能帮到更多初次接触 nftables 的读者。</p><blockquote><p>本文默认读者拥有初步的 Linux、SSH 及计算机网络知识，否则可能会因为专业术语过多而导致理解困难，还请谅解。<br>我的设备为红米 AX6，系统为自己从源码构建的 ImmortalWrt 23.05 SNAPSHOT，部分操作在不同设备上可能不同。<br>事实上，官方 wiki 对于上手来说也非常不错，如果英语阅读能力过关，可以直接参考 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes">Quick reference-nftables in 10 minutes</a> 。</p></blockquote><h2 id="原理：从-Netfilter-说起"><a href="#原理：从-Netfilter-说起" class="headerlink" title="原理：从 Netfilter 说起"></a>原理：从 Netfilter 说起</h2><span id="more"></span><p>Netfilter 是 Linux 内核中的一个用于管理数据包的框架。一切数据包都从 Netfilter 经过，经历如下图所示的周期。在 prerouting、input、output、forward 和 postrouting 阶段，Netfilter 允许 iptables 和 nftables 这样的应用程序对数据包进行控制，这也正是防火墙的基础。</p><p><a href="https://zh.wikipedia.org/zh-cn/File:Netfilter-packet-flow.svg"><img src="Netfilter-packet-flow.webp" alt="Packet flow in Netfilter and General Networking"></a></p><p>这张图标题为 <em>Packet flow in Netfilter and General Networking</em> ，这里将它称为「原理图」。原理图也许有点杂乱，我们把它拆开来说。不难看出，从下到上是经典的四层式 TCP&#x2F;IP 模型，从左到右则是数据包流经设备的全过程。在最底层代表数据包传递的 <ruby><rb>链路层</rb><rt>link layer</rt></ruby> 中，蓝色的 <ruby><rb>桥接级</rb><rt>bridge level</rt></ruby> 的小方框通过以太网帧确定或修改数据的传递途径。 <code>Xtables</code> 里，这一部分由 <code>ebtables</code> 负责，在此暂且略过。</p><p><ruby><rb>网络层</rb><rt>network layer</rt></ruby> 和链路层都有的绿色小方框则是重点，代表了 <ruby><rb>网络级</rb><rt>network level</rt></ruby> 的 IP 数据包的处理，也就是 iptables 负责的部分。其中，白色部分是我们能够加以控制的五个阶段，蓝色方框里则是该阶段能够进行的处理。例如，从图中可见，prerouting 阶段的数据包会首先经过 mangle，由防火墙设置对数据包进行修改，然后才会被 nat，决定数据包去向。在 forward 阶段，数据包同样会先经过 mangle，然后被 filter 设置过滤去掉不想要的包之后，才能进入 postrouting 阶段。以此类推，就不再一一列举。</p><p>再敲敲小黑板，这张图相当重要。无论是初识 Netfilter &#x2F; iptables &#x2F; nftables 还是后期编写复杂的防火墙规则，这张图都是每个人不可或缺的伙伴。不过啰唆就到此为止，我们直接上主菜吧！</p><h2 id="初识配置文件"><a href="#初识配置文件" class="headerlink" title="初识配置文件"></a>初识配置文件</h2><p>nftables 的配置工具 <code>nft</code> 提供了方便的防火墙管理，在 OpenWrt 的 SSH 终端中输入 <code>nft list ruleset</code> 就能显示目前的配置文件详情。虽然 <code>nft</code> 本身能够像 <code>iptables</code> 一样用作命令行配置工具，但相比使用命令，撰写分块配置文件更符合我个人的编程习惯，启用、禁用都很自由，跳转、参数设定更自然，不需要每次防火墙重启都执行一遍，而且在优先级方面有更多调整空间。不过更主要的原因是，我使用 <code>nft</code> 的次数微乎其微，大部分时候都是直接撰写配置文件，因此在此略过命令行配置。</p><p>总之，如果成功执行了 <code>nft list ruleset</code> ，这时终端里应该会跳出来类似这样一大段：</p><pre><code class="highlight plaintext">table inet fw4 &#123;……chain inbound_world &#123;        ip saddr 111.222.111.222 tcp dport 22 accept    &#125;    chain input1 &#123;        type filter hook input priority 0; policy drop;        iifname vmap &#123; lo : accept, pppoe-wan : jump inbound_world &#125;    &#125;……    chain postrouting1 &#123;        type nat hook postrouting priority 100; policy accept;        ip saddr 192.168.0.0/16 oifname pppoe-wan masquerade    &#125;    ……&#125;</code></pre><p>对于有代码基础的人，这一长串应该比较直观，如果仍旧觉得看起来很复杂，没关系，我们一条一条看。</p><p>最外层的 <code>table inet fw4</code> 声明了一个命名为 <code>fw4</code> 的、控制 IPv4 以及 IPv6 ( <code>inet</code> ) 的表 ( <code>table</code> )。借用官方 wiki 的 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Configuring_tables">介绍</a> ，表是 nftables 最外面的一层，有表才能有链 ( <code>chain</code> )、集 ( <code>set</code> )、映射 ( <code>map</code> ) 等。表的声明由三个部分组成，即 <code>table</code> 关键字、表的 <code>family</code> 以及表名。前后都很好理解，中间的 <code>family</code> 声明处理的协议，只有这些协议的数据包才会流经这个表。本例中， <code>inet</code> 声明这个表需要处理 IPv4 与 IPv6 的数据包，写成 <code>ip</code> 则仅处理 IPv4， <code>ip6</code> 则仅处理 IPv6。类似地， <code>family</code> 还可以是 <code>arp</code> , <code>bridge</code> 或者 <code>netdev</code> ，可以在官网的 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Nftables_families">family 说明</a> 找到更多信息。</p><p>对于我们来说，重头戏是表中间的链 ( <code>chain</code> ) ，它是规则 ( <code>rule</code> ) 的集合。熟悉 iptables 的人知道，它提供了一系列预设好的链，例如 INPUT、OUTPUT，分管数据包路由中不同的阶段。在 nftables 中则不同，链链生而平等，仅有类型 ( <code>type</code> ) 、钩子 ( <code>hook</code> )、优先级 ( <code>priority</code> ) 不同。在表中定义好的链，会在钩子触发的时候，按照链中声明的优先级依次执行。</p><p>这么说可能有点绕，我们以那个显眼的 <code>chain input1</code> 作为例子：</p><pre><code class="highlight plaintext">chain input1 &#123;    type filter hook input priority 0; policy drop;    iifname vmap &#123; lo : accept, pppoe-wan : jump inbound_world &#125;&#125;</code></pre><p>这里 <code>chain input1</code> 中的 <code>input1</code> 是链的名字，它可以随意，只要在表中唯一即可；第二行的 <code>input</code> 则是钩子的类型。上面原理图部分所说的五个阶段，就是我们可以使用的五个钩子： <code>prerouting</code> , <code>forward</code> , <code>input</code> , <code>output</code> 和 <code>postrouting</code> 。如果原理图过于复杂，这里也有一个简化版，直接标注出了 nftables 可用的 <code>hook</code> ：</p><p><a href="https://people.netfilter.org/pablo/nf-hooks.png"><img src="nf-hooks.webp" alt="Netfilter hooks"></a></p><p><code>hook</code> 前声明链的类型，这里是 <code>filter</code> ，意味着我们将对包进行 <em>过滤</em> 。除过滤 ( <code>filter</code> ) 外，我们还可以对包进行路由 ( <code>route</code> ) 或 <code>nat</code> 。其中，若我们需要对包进行修改或拦截可以使用 <code>filter</code> ， <code>route</code> 可以用来在 <code>output</code> 钩子中对包进行修改，而 <code>nat</code> 则主要用于…NAT。</p><p><code>input</code> 后则是链的优先级，在同一钩子里的链会按优先级顺序，从小到大依次执行。也就是说，如果我添加一个链 <code>input2</code> ，同样对 <code>input</code> 挂钩子，但是优先级填 -100，这样 <code>input2</code> 会比优先级为 0 的 <code>input1</code> 先执行，不过如果我添加的链是 <code>prerouting1</code> ，对 <code>prerouting</code> 挂钩子，此时则不管优先级是 -100 还是 100，都会比 <code>input1</code> 先执行。如果此处不太理解，请务必立即回顾原理图。</p><p>分号后面的 <code>policy drop</code> ，定义了 <strong>所有未经处理的包</strong> 在 <strong>这个链结束后</strong> 的去向，分为两种， <code>accept</code> 与 <code>drop</code> ，前者是不声明 <code>policy</code> 的默认状态，流经这条链的包会继续原理图中后续的流程，后者则是直接丢弃未经处理的数据包。</p><p>第三行则是一条具体的处理规则。这条规则比较复杂，它做的事情大概是对来源网卡 ( <code>iifname</code> ) 进行判断：如果来自 <code>lo</code> (即 <ruby><rb>本地回环</rb><rt>loopback</rt></ruby> , 127.0.0.1) ，则允许这个包通过；如果来自 <code>pppoe-wan</code> ，即 PPPoE 拨号后连接到的广域网，那么跳转 ( <code>jump</code> ) 到名为 <code>inbound_world</code> 的链进一步判断。若不满足这两个匹配规则，这个数据包就会被丢弃，以保护内网安全。</p><hr><p>怎样，很简单吧？如果还是有点困扰，我们接着分析上面那一大段 <code>nft list ruleset</code> 的输出中，剩余的两个链：</p><pre><code class="highlight plaintext">chain inbound_world &#123;    ip saddr 111.222.111.222 tcp dport 22 accept&#125;</code></pre><p>这一条就是上面提及的、来自广域网的包会跳转到的 <code>inbound_world</code> 了。这条链非常简单，它在 <code>ip</code> 层面对来源地址 ( <code>saddr</code> ) 和目标端口 ( <code>dport</code> ) 进行了判断，如果是认识的服务器 ( <code>111.222.111.222</code> ) 访问本地 <code>22</code> 端口，则放行 ( <code>accept</code> ) ，否则不处理。根据前面的 <code>input1</code> 链，我们知道其余的包会被直接丢弃。很简单，不是吗？</p><p>再捋一遍。我们需要对 IP 进行判断，所以先写下 <code>ip</code> ；接下来判断来源地址 <code>saddr</code> ，即 source address；最后再对 TCP 协议的目标端口 <code>tcp dport</code> 进行判断，即 destination port；判断都通过，我们就能 <code>accept</code> 这个包。同理，如果愿意，还可以对 <code>daddr</code> destination address、 <code>sport</code> source port 之类非常符合直觉的关键词进行组合、叠加，形成一条完整的 nftables 规则。没有复杂的 <code>-a -b -c -X -Y -Z</code> ，需要什么写什么关键词，就是这么简单。</p><p>当然，也并非随便什么关键词都能被识别。对于入门来说，推荐参考官方 wiki 中 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Matching_packet_metainformation">Matching packet metainformation</a> 以及 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Matching_packet_headers">Matching packet header</a> 部分，这两个页面以表格形式，列出了绝大部分可以用来判断的关键词及其作用。如果有 conntrack 等高级需求，也可以进一步查阅 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page">官方 wiki</a> 。</p><pre><code class="highlight plaintext">chain postrouting1 &#123;    type nat hook postrouting priority 100; policy accept;    ip saddr 192.168.0.0/16 oifname pppoe-wan masquerade&#125;</code></pre><p>通过第一行我们知道，这条链作用于 <code>postrouting</code> 阶段，作用是进行 NAT，优先级为 100，允许未经处理的包通过。第二行则对来自 <code>192.168.0.0/16</code> 的包进行处理，如果它出口网卡 <code>oifname</code> 是 <code>pppoe-wan</code> ，那么就对它进行掩蔽 ( <code>masquerade</code> ) 。这是 PPPoE 上网时比较重要的一个操作，修改包的来源 IP，假装这个包来自拨号的设备，避免将内网地址暴露给外部，也避免了上级网关发现拨号 IP 与数据包的 IP 不一致，导致包被丢弃。</p><hr><p>最后可能还需要说明，关于分号的使用，nftables 并不严格， <strong>似乎</strong> 行末分号的有无并不会影响配置。在 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Configuring_chains">链的配置</a> 中，nftables 官方说：</p><blockquote><p><strong>Important</strong>: <em>nft</em> re-uses special characters, such as curly braces and the semicolon. If you are running these commands from a shell such as <em>bash</em>, all the special characters need to be escaped. </p></blockquote><p>这是整个官方 wiki 中唯一提及分号的部分，我不太确定这个模棱两可的 <em>re-uses</em> 具体是需要还是不需要，从实际配置中看来 <strong>似乎</strong> 与 Kotlin 这类不严格要求分号的语言类似，若一行中存在两条规则，例如 <code>type filter …… ; policy accept;</code> ，则需要在各条结束后加上分号，若没有则不需要。如此看来，大部分时候按照习惯来即可。</p><h2 id="实战：端口转发"><a href="#实战：端口转发" class="headerlink" title="实战：端口转发"></a>实战：端口转发</h2><p>最后，让我们试着向 nftables 中添加我们自己的配置文件，这里以端口转发为例。端口转发是一类相对常用的防火墙配置，用于将外部的访问转发至本机或内网某一主机。OpenWrt 网页端后台的防火墙配置页面已经提供了方便的配置工具，不过既然决定要学着用 nftables，不如一起来看看如何操作。</p><p>这里就引入了第一个问题：我已经知道配置文件的组成，但是配置文件在哪里呢？在以 <code>fw4</code> 为防火墙的 OpenWrt 上， <code>fw4</code> 在每次启动时会自动从 <code>/etc/nftables.d/</code> 读取 <code>*.nft</code> 文件，将它们写入 <code>fw4</code> 表中，只要我们将配置文件放进去后，使用 <code>service firewall restart</code> 重启防火墙就能生效。</p><p>需要注意的是，由于 <code>fw4</code> 会将配置文件写入 <code>table fw4</code> ，因此我们放入 <code>/etc/nftables.d</code> 的配置文件 <strong>不能够</strong> 包含表，直接写链即可，否则会报错并导致配置不生效。</p><p>现在回到端口转发。假设我们内网有一台设备是 <code>192.168.1.100</code> ，它的 <code>22</code> 端口上跑了一个 SSH 服务器，我希望连接到路由器的 <code>8022</code> 端口时能直接连接到这台内网设备，我们应该怎么做？</p><p>第一步当然是拆解需求。回顾原理图我们知道，对一个包该去哪的判断发生在 <code>prerouting</code> 阶段，而我们要进行的操作是将路由器 IP 及端口转换为内网的 IP 及端口，这不就是 NAT 吗？因此，我们需要一个 <code>nat</code> 类型、在 <code>prerouting</code> 生效的链。</p><p>而它的优先级呢？查阅官方文档 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Netfilter_hooks">Netfilter hooks</a> ， <code>prerouting</code> 阶段目标地址转换 ( <code>dstnat</code> ) 的优先级为 <code>-100</code> ，我们既可以直接写 <code>-100</code> ，又可以使用 <code>dstnat</code> 这个关键词。以防万一，我们也可以用一个更高优先级的规则，例如 <code>dstnat - 5</code> ，保证我们这条链发生在其他链之前。</p><p>第二步是对包进行判断，这一步相关文档在官方 wiki <a href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page#Expressions:_Matching_packets">Expressions: Matching packets</a> 部分，不过其实通过本文前一节就能知道，我们首先需要判断 <code>ip</code> ，如果它的 <code>dport</code> 是 <code>8022</code> ，说明这个包可以被转发。以防万一，我们还可以进一步对包的来源进行判断，例如我只希望允许来自 ZeroTier 的流量，而我的 ZeroTier 在 <code>10.244.0.0/16</code> 网段，那么再加一个 <code>saddr</code> 进行判断。如果没有判断目标地址听起来有点不靠谱，我们还可以再加一个 <code>daddr</code> ，仅当明确访问位于 <code>10.244.1.1</code> 的路由器时才响应。</p><p>第三步就是进行目标地址转换了。同样查阅官方 wiki，NAT 相关的操作在 <a href="https://wiki.nftables.org/wiki-nftables/index.php/Performing_Network_Address_Translation_(NAT)">Performing NAT</a> ，其中提到只有 <code>nat</code> 类型的链才能执行 NAT，以及目标地址转换的关键词是 <code>dnat to</code> ，我们在后面加上目标 IP 和端口，即 <code>192.168.1.100:22</code> ，就完成了这条链的配置：</p><pre><code class="highlight plaintext">chain redirect_to_internal &#123;    type nat hook prerouting priority dstnat - 5; policy accept;    ip saddr 10.0.0.0/8 daddr 10.244.1.1 tcp dport 8022 counter dnat to 192.168.1.100:22&#125;</code></pre><p>聪明的读者可以注意到，这里我们中间还多了一个 <code>counter</code> ：这是 nftables 用来统计转发数据包量的工具。像这样放在规则中间，判断之后、操作之前，就能够对通过判断的数据包进行计数 ( <code>counter</code> )，便于判断规则是否生效，通过 OpenWrt 的防火墙管理页面或者 <code>nft list ruleset</code> 命令，都能看到规则的统计数据。</p><p>大功告成，现在赶紧把文件保存为 <code>/etc/nftables.d/11-redirect.nft</code> ，再 <code>service firewall restart</code> 看看效果吧！</p><h2 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h2><p>如此，我们就对 nftables 的原理以及配置文件的撰写有了初步的了解。若要进一步了解 nftables 及其配置， <a href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page">官方 wiki</a> 是个不错的选择，无论是配置过程中遇到问题还是希望进行更复杂的配置，都能在官方 wiki 找到详尽的说明。各大 Linux 发行版在它们的 wiki 中一般也会包含 nftables 相关页面，介绍对应发行版的相关配置，例如 OpenWrt 的 <a href="https://openwrt.org/docs/guide-user/firewall/overview">Firewall overview</a> 或者 Debian 的 <a href="https://wiki.debian.org/nftables">nftables</a> 。</p><p>这篇文章起笔于 2023 年 9 月，到写下这里已经 12 月，我的鸽子之魂熊熊燃烧，好在最终还是没有让这篇博客变成废稿。本来希望做一些更复杂的配置文件示例及解释，不过作为入门来说似乎过于复杂，不如在基础部分多啰唆几句，将其余部分留给读到这里的读者。可惜，直到最后我也没有搞清楚学校防火墙到底从什么地方检测出多设备，决定干脆直接将流量加密后转发出校，借此规避特征检测，当然这就是另一个故事了。总之，配网愉快~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这学期前，学校防火墙迎来一波升级，路由器上本来用于绕过多设备封锁的方式尽数失效，考虑到它还跑着非常古老且风评不佳的修改版 OpenWrt，也是时候进行一点系统升级了。新系统最先困扰我的问题就是防火墙变动，OpenWrt 22.03 起，防火墙由 &lt;code&gt;fw3&lt;/code&gt; 切换到了 &lt;code&gt;fw4&lt;/code&gt; ，底层也从 &lt;code&gt;iptables&lt;/code&gt; 变成了 &lt;code&gt;nftables&lt;/code&gt; 。相较于 iptables，nftables 配置更灵活，语法更友好，并且可以直接接管 &lt;code&gt;Xtables&lt;/code&gt; ——或者说此前整个 iptables 大家族——的功能，从 ipset 到 mangle 无所不能，但对于习惯 iptables 的用户来说，底层突然切换无疑会带来一定学习成本。&lt;/p&gt;
&lt;p&gt;好在， nftables 的强大并不意味着它难以上手。正相反，花两天时间与它相处后，我发现借助详尽的 &lt;a href=&quot;https://wiki.nftables.org/&quot;&gt;官方 wiki&lt;/a&gt; ，我能迅速熟悉这个新工具，甚至开始依赖起它带来的一些新特性。虽然 &lt;code&gt;iptables-nft&lt;/code&gt; 可以非常方便地将 iptables 语句翻译为 nftables 配置，但它毕竟只是一个转换，更适合用于兼容古董软件，而且一些高级特性也无法被它正确识别，掌握如何自己配置 nftables 依旧重要。因此我将我的经验写在这里，希望能帮到更多初次接触 nftables 的读者。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文默认读者拥有初步的 Linux、SSH 及计算机网络知识，否则可能会因为专业术语过多而导致理解困难，还请谅解。&lt;br&gt;我的设备为红米 AX6，系统为自己从源码构建的 ImmortalWrt 23.05 SNAPSHOT，部分操作在不同设备上可能不同。&lt;br&gt;事实上，官方 wiki 对于上手来说也非常不错，如果英语阅读能力过关，可以直接参考 &lt;a href=&quot;https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes&quot;&gt;Quick reference-nftables in 10 minutes&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;原理：从-Netfilter-说起&quot;&gt;&lt;a href=&quot;#原理：从-Netfilter-说起&quot; class=&quot;headerlink&quot; title=&quot;原理：从 Netfilter 说起&quot;&gt;&lt;/a&gt;原理：从 Netfilter 说起&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://blog.rachelt.one/tags/Linux/"/>
    
    <category term="OpenWrt" scheme="https://blog.rachelt.one/tags/OpenWrt/"/>
    
    <category term="防火墙" scheme="https://blog.rachelt.one/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>在 MIUI EEA 上自己动手实现 NFC 卡模拟</title>
    <link href="https://blog.rachelt.one/articles/enabling-nfc-card-emulation-on-miui-eea/"/>
    <id>https://blog.rachelt.one/articles/enabling-nfc-card-emulation-on-miui-eea/</id>
    <published>2023-11-14T08:42:07.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>前些日子对手上的 Pixel 6 Pro 忍无可忍，趁着好友换小米 14 的机会，带走了他的小米 13。作为对日用系统有着严苛要求、见不得一丝广告的人，到手第一件事自然是解锁刷国际版。由于 <a href="https://xiaomi.eu/community/">EU 版</a> 只是 <strong>基于国行系统</strong> 的 <strong>第三方</strong> 魔改，我对它也不太信任，选择了从底层上就不一样的 EEA 版，它由官方发布，专为欧盟地区定制，理论上广告和遥测都很少，而且深度集成 Google，对于 Pixel 用户来说迁移起来也很方便。</p><p>EEA 版本哪里都好，唯独缺了一项重要的功能：NFC 卡模拟。在国行系统中，这一功能由「钱包」应用提供，它以特殊的方式集成在系统底层，能够直接与安全模块通讯；EEA 版由于底层不一致，系统内没有安全模块的选项，向系统内塞智能卡组件更是直接闪退。尝试使用 <a href="https://play.google.com/store/apps/details?id=com.yuanwofei.cardemulator.pro">Card Emulator Pro (NFC 卡模拟)</a> 也以失败告终，我并不确定它生成配置的原理，但它似乎只是往固定的位置塞固定的文件，一旦 NFC 配置不同就会失效，甚至直接使 NFC 功能不可用。</p><p>除此之外，可能是由于安全模块仍在工作，直接读取手机的 ID 得到的值不是固定的 <code>01, 02, 03, 04</code> ，而是 <code>08, XX, XX, XX</code> ，其中后三位完全随机，难以直接全文搜索替换。由此看来，唯一能够实现这一功能的方式，就是自行提取、修改系统的 NFC 配置，再将其刷回。我将我的解决办法记录于此，希望能对你有所帮助。</p><span id="more"></span><blockquote><p>我所使用的设备是小米 13，系统为 MIUI Global 14.0.6 (UMCEUXM)。不同设备的 NFC 配置可能不同，该文章仅供参考，请勿直接照搬。</p><p>本文不提供懒人解决方案，需要读者至少具有安装了 KernelSU &#x2F; Magisk 的 Android 手机，以及压缩包操作的基础知识。</p></blockquote><h2 id="太长不看：怎么做？"><a href="#太长不看：怎么做？" class="headerlink" title="太长不看：怎么做？"></a>太长不看：怎么做？</h2><p>假设需要模拟的卡 ID 是 <code>AA, BB, CC, DD</code> ，获取 root 权限后，提取 <code>/odm/etc</code> 及 <code>/vendor/etc</code> 下 <code>libnfc</code> 开头的配置文件，并且：</p><p>将 <code>/odm/etc/libnfc-nci.conf</code> 中 <code>NXP_PRFD_TECH_SE</code> 的值更改为 <code>0x00</code> ；</p><p>在 <code>/odm/etc/libnfc-nxp.conf</code> 中，将 <code>NXP_NFC_PROFILE_EXTN</code> 补足：</p><pre><code class="highlight plaintext"># === 修改前 ===NXP_NFC_PROFILE_EXTN=&#123;20, 02, 05, 01, A0, 44, 01, 00&#125;# === 修改后 ===NXP_NFC_PROFILE_EXTN=&#123;20, 02, 05, 01, A0, 44, 01, 00, 33, 00, AA, BB, CC, DD&#125;</code></pre><p>其中填充的 <code>33, 00</code> 我并不确定意义，只是照搬了其他手机的配置；如果添加后出现问题，也可以将这一项复原。</p><p>将一些模块的默认路由从安全模块修改至本机：</p><pre><code class="highlight plaintext">#Set the default AID route Location :#This settings will be used when application does not set this parameter# host  0x00# eSE   0x01# UICC  0x02# UICC2 0x03# === 修改前 ===DEFAULT_AID_ROUTE=0x01# === 修改后 ===DEFAULT_AID_ROUTE=0x00</code></pre><p>除 <code>DEFAULT_AID_ROUTE</code> 外，我还修改了 <code>DEFAULT_ISODEP_ROUTE</code> 和 <code>DEFAULT_MIFARE_CLT_ROUTE</code> ，避免漏改。下方还有一个 <code>DEFAULT_FELICA_CLT_ROUTE</code> ，但它的注释中没有写 <code>host 0x00</code> ，而且卡模拟应该也不需要动 FeliCa 设置，所以我跳过了这一项。</p><p>最后，补足 <code>NXP_CORE_CONF</code> ：</p><pre><code class="highlight plaintext"># Core configuration settingsNXP_CORE_CONF=&#123; 20, 02, 33, 11,        28, 01, 00,        21, 01, 00,        30, 01, 04,        31, 01, 00,        32, 01, 60,        38, 01, 01,# === 修改前 ===        33, 00,# === 修改后 ===        33, 00, AA, BB, CC, DD,        54, 01, 06,        50, 01, 02,        …………</code></pre><p><code>/vendor/etc</code> 下有许多 <code>libnfc</code> 开头的配置文件，需要逐个修改；也可以使用 VS Code 打开提取出来的文件夹，批量搜索替换。具体配置与 <code>/odm/etc/libnfc-nxp.conf</code> 类似，如果没有也不必添加，只修改已经存在的配置即可。</p><p>具体来说， <code>NXP_CORE_CONF</code> 不需要补充，直接可以看到默认的 <code>01, 02, 03, 04</code> ，修改为 <code>AA, BB, CC, DD</code> ；额外需要修改的部分是：</p><pre><code class="highlight plaintext"># Configure the default AID route.# host  0x00# eSE   0x82 (eSE),    0x86 (eUICC/SPI-SE)# UICC  0x81 (UICC_1), 0x85 (UICC_2)# === 修改前 ===DEFAULT_ROUTE=0x81# === 修改后 ===DEFAULT_ROUTE=0x00</code></pre><p>这类以 <code>0x81</code> 为默认值的配置，包括 <code>DEFAULT_ROUTE</code> 、<code>DEFAULT_NFCF_ROUTE</code> 、<code>DEFAULT_OFFHOST_ROUTE</code> 、<code>DEFAULT_SYS_CODE_ROUTE</code> 以及一部分 <code>DEFAULT_ISODEP_ROUTE</code> ，推荐一起修改，当然也可以直接使用正则表达式匹配： <code>DEFAULT_\S+_ROUTE</code> 。</p><p>如此，便完成了配置文件的修改。接下来，下载 <a href="NFC_Emulation.zip">NFC_Emulation.zip</a> ，将修改后的 <code>/odm/etc</code> 的文件放入 <code>odm/etc</code> 下， <code>/vendor/etc</code> 的文件放入 <code>system/vendor/etc</code> 下，重新打包后使用 KernelSU 或 Magisk 刷入即可。</p><h2 id="折腾过程"><a href="#折腾过程" class="headerlink" title="折腾过程"></a>折腾过程</h2><p>一开始，我参考了 <a href="https://zhuanlan.zhihu.com/p/264800660">《MIUI 国际版&#x2F;EU  安装小米钱包 傻瓜教程》</a> 、 <a href="https://sspai.com/post/60065">《MIUI 国际版&#x2F;EU 版本地化教程 - 小米钱包篇》</a> 以及 <a href="https://wingu.se/2021/06/14/xiaomi.html">《小米 11 Pro 折腾笔记》</a> ，也用了 <a href="https://blog.minamigo.moe/archives/184">MIUI EU 欧洲版 本地化 Magisk 模块</a> ，试图还原小米钱包 app 以及相关的智能卡组件，结果它们要么将钱包 app 放在 <code>/system/app</code> 却无法启动，要么放在 <code>/system/product/app</code> 后虽然可以启动钱包，但会在点击公交卡 &#x2F; 门卡后直接闪退。除此之外，向 <code>system.prop</code> 中添加 <code>ro.se.type=eSE,HCE,UICC</code> 后，NFC 设置也没有像预期那样出现「安全模块设置」。</p><p>试图从卡刷包中提取钱包组件的尝试也以失败告终。我将 <code>payload.bin</code> 解包得到了文件格式为 <code>data</code> 的 <code>system.img</code> ，无法继续：它们既不能挂载到本地目录，也不能被 <code>file</code> 命令读取到正确的格式，看来除非我抛弃所有数据刷回原厂系统，否则是无法继续了。考虑到此前没有正常工作的 <a href="https://blog.minamigo.moe/archives/184">模块</a> 提供的理应是正确版本的安装包，安全模块设置也与 EU 版表现不同，我理智地放弃了这一条路，转而选择对 NFC 设置进行研究。</p><p>于是，为了一次性搞定所有问题，我简单粗暴地把我见到的所有文件都拉了出来，对照着 Pixel 6 Pro 提取出来的文件，按照上面描述的方法一通编辑，然后重新打包为模块刷入后，它奇迹般地工作了。由于能查询到的相关文档实在太少，并且 <code>odm</code> 与 <code>vendor</code> 分区都受厂商控制，很难从 AOSP 项目中找到相关内容，为了弄明白到底是哪一项设置在起作用，我又在 <code>/data/adb/modules</code> 内模块目录下对配置文件进行修改，结果发现 <code>/odm/etc</code> 下的配置似乎不重要，哪怕只是使用原来的文件进行替换，NFC ID 也会从随机数变成 <code>01, 02, 03, 04</code> 。</p><p>当我更新 <code>/vendor/etc</code> 下某个文件的 <code>NXP_CORE_CONF</code> ，并以此开始测试各项设置时，灵异的事情发生了：重启后 NFC 虽然显示已开启而且可以正常开关，但无法被其他设备读取。紧接着我将理应工作正常的文件放回了 <code>/data/adb/modules</code> ，却再也无法使它恢复正常，直到我将模块卸载后重新刷入。看着 <code>/vendor/etc</code> 下面整整十个 <code>libnfc</code> 开头的文件以及每个文件里各有不同的繁琐配置，以及每次卸载后重新安装模块所需的漫长等待时间，我选择放弃一探究竟，将其留给后人探索。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前些日子对手上的 Pixel 6 Pro 忍无可忍，趁着好友换小米 14 的机会，带走了他的小米 13。作为对日用系统有着严苛要求、见不得一丝广告的人，到手第一件事自然是解锁刷国际版。由于 &lt;a href=&quot;https://xiaomi.eu/community/&quot;&gt;EU 版&lt;/a&gt; 只是 &lt;strong&gt;基于国行系统&lt;/strong&gt; 的 &lt;strong&gt;第三方&lt;/strong&gt; 魔改，我对它也不太信任，选择了从底层上就不一样的 EEA 版，它由官方发布，专为欧盟地区定制，理论上广告和遥测都很少，而且深度集成 Google，对于 Pixel 用户来说迁移起来也很方便。&lt;/p&gt;
&lt;p&gt;EEA 版本哪里都好，唯独缺了一项重要的功能：NFC 卡模拟。在国行系统中，这一功能由「钱包」应用提供，它以特殊的方式集成在系统底层，能够直接与安全模块通讯；EEA 版由于底层不一致，系统内没有安全模块的选项，向系统内塞智能卡组件更是直接闪退。尝试使用 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.yuanwofei.cardemulator.pro&quot;&gt;Card Emulator Pro (NFC 卡模拟)&lt;/a&gt; 也以失败告终，我并不确定它生成配置的原理，但它似乎只是往固定的位置塞固定的文件，一旦 NFC 配置不同就会失效，甚至直接使 NFC 功能不可用。&lt;/p&gt;
&lt;p&gt;除此之外，可能是由于安全模块仍在工作，直接读取手机的 ID 得到的值不是固定的 &lt;code&gt;01, 02, 03, 04&lt;/code&gt; ，而是 &lt;code&gt;08, XX, XX, XX&lt;/code&gt; ，其中后三位完全随机，难以直接全文搜索替换。由此看来，唯一能够实现这一功能的方式，就是自行提取、修改系统的 NFC 配置，再将其刷回。我将我的解决办法记录于此，希望能对你有所帮助。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.rachelt.one/tags/Android/"/>
    
    <category term="MIUI" scheme="https://blog.rachelt.one/tags/MIUI/"/>
    
    <category term="Root" scheme="https://blog.rachelt.one/tags/Root/"/>
    
  </entry>
  
  <entry>
    <title>在时代中心呼唤艺术——从《摄影小史》谈起</title>
    <link href="https://blog.rachelt.one/articles/in-the-core-of-changes-the-art-cries/"/>
    <id>https://blog.rachelt.one/articles/in-the-core-of-changes-the-art-cries/</id>
    <published>2023-04-22T13:51:41.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>最近读完了广西师范大学出版社 2017 年出版的《摄影小史》，收录了 <ruby><rb>瓦尔特 · 本雅明</rb><rt>Walter Benjamin</rt></ruby> 著四篇论文的中译本，其中《摄影小史》(1931) 和《机械复制时代的艺术作品》(1936, 下称《机械复制》) 尤其具有参考价值与思辨意义，让我一个非科班、纯用爱发电的爱好者，也觉得该为读完这本书而写点什么东西了。</p><p>受这两篇文章本身 <ruby><rb>论文</rb><rt>essay</rt></ruby> 属性、译本差异以及语言鸿沟等因素限制，本文试图在记下阅读感受的同时，结合艺术、摄影及文化史有关内容，解释一些书中较为复杂的概念，同时结合时代加上我本人的思考。无论你是否读过原著、是否认同本文观点，都希望能给你带来一些启发。</p><blockquote><p>本文约 8500 字，阅读约需 30 分钟，全程量子叠加态有图，请放心食用。</p></blockquote><h2 id="瓦尔特-·-本雅明"><a href="#瓦尔特-·-本雅明" class="headerlink" title="瓦尔特 · 本雅明"></a>瓦尔特 · 本雅明</h2><p>理解一本书前提是理解作者，《摄影小史》也不例外。如果用一句话为作者定性，瓦尔特 · 本雅明 (1892-1940) 是一位隶属于法兰克福学派、笃信西方马克思主义的犹太人、文化理论家。如此便算是交代了历史背景，足以理解本书的写作意图与作者许多观念的形成原因。本节还会简述一些与他相关的重大事件，它们摘译自斯坦福大学哲学百科全书 <a href="https://plato.stanford.edu/entries/benjamin/">瓦尔特 · 本雅明词条</a> ，若是不感兴趣，直接跳到下一段也无妨。</p><span id="more"></span><p>瓦尔特 · 本雅明于 1892 年出生在德国一个犹太富商家庭，13 岁时，本雅明被送到一所寄宿学校，在那里他与自由主义教育改革者 Gustav Wyneken 结成重要 <ruby><rb>知识亲属关系</rb><rt>intellectual kinship</rt></ruby> 。回到柏林后，他开始为贯彻 Wyneken 青年精神纯洁性原则的杂志《 <ruby><rb>开始</rb><rt>Der  Anfang</rt></ruby> 》撰稿，这些文章包含了他尚在雏形却将持续至他观念成熟的思想。作为弗赖堡大学和柏林大学的学生，本雅明参加了新康德主义哲学家 <ruby><rb>海因里希 · 李凯尔特</rb><rt>Heinrich Rickert</rt></ruby> 和社会学家 <ruby><rb>格奥尔格 · 齐美尔</rb><rt>Georg  Simmel</rt></ruby> 的讲座，并继续积极参与不断发展的青年运动。然而在 1914 年，他因 Wyneken 公开赞扬战争爆发为年轻人带来的道德经历，谴责导师并退出了运动。本雅明于 1919 年完成博士论文《德国浪漫派的艺术批评概念》，获瑞士伯尔尼大学 <em>summa cum laude</em> 称号。</p><p>1924 年，他在意大利卡普里尼岛写作论文，在此期间对 <ruby><rb>格奥尔格 · 卢卡奇</rb><rt>György Lukács</rt></ruby> 《历史和阶级意识》的热情研究，以及 1926 ~ 1927 年冬天他对拉脱维亚演员、戏剧导演，位于苏联莫斯科的 Asja Lācis 的访问，共同促进了他对历史唯物主义的马克思主义转向。到 1930 年代初期，本雅明与 <ruby><rb>恩斯特 · 布洛赫</rb><rt>Ernst Bloch</rt></ruby> 、 <ruby><rb>齐格弗里德 · 科拉考尔</rb><rt>Siegfried Kracauer</rt></ruby> 等人合作，密切参与一份名为《 <ruby><rb>危机与批判</rb><rt>Crisis and Critique</rt></ruby> 》的左翼期刊的计划，并在 1933 年最后一次离开纳粹德国，在巴黎、伊维萨岛等地流亡。期间， <ruby><rb>麦克斯 · 霍克海默</rb><rt>Max Horkheimer</rt></ruby> 领导、当时被迫迁出德国的 <ruby><rb>法兰克福大学社会研究所</rb><rt>University of Frankfurt Institute for Social Research</rt></ruby> 为本雅明提供了重要的出版机会与财政津贴，也影响了本雅明这段时间的著作，例如《机械复制》。</p><p>1939 年二战爆发，本雅明被短暂关押在法国为德国公民设置的「集中营」里，几个月后获释；次年夏天巴黎沦陷，他与许多流离失所的犹太德国人一样，试图逃离法国，通过合法或非法手段移民。1940 年 9 月 27 日，本雅明被西班牙海关官员拒之门外，他万念俱灰，在西班牙边境小镇 <ruby><rb>波尔沃</rb><rt>Portbou</rt></ruby> 结束了自己的生命。</p><h2 id="摄影史，艺术史"><a href="#摄影史，艺术史" class="headerlink" title="摄影史，艺术史"></a>摄影史，艺术史</h2><p>摄影蓬勃发展时，艺术也翻开了崭新的一页。</p><p>1839 年， <ruby><rb>达盖尔银版法</rb><rt>Daguerreotype</rt></ruby> 公开，摄影诞生，第二年，印象派画家代表人物， <ruby><rb>克劳德 · 莫奈</rb><rt>Claude Monet</rt></ruby> 出生于法国巴黎。在他用《<ruby><rb>印象 · 日出</rb><rt>Impression, soleil levant</rt></ruby>》 (1872) 打开现代艺术的大门，用革新的靴子跟狠狠地踹那些保守画家的屁股前，艺术始终由学院派艺术紧紧把持。他们偏向理想主义，热衷于宗教、历史与肖像，因此印象派砸在那些老古董们头上的、开天辟地般的风景画才如此富有争议。</p><p>莫奈成长期间，摄影也逐渐从学院派画家用来辅助作画的工具，变成了艺术的主体。达盖尔银版法推广开后，有保守派评论家认为摄影是对宗教与神的亵渎，换言之，摄影实实在在地威胁到了传统艺术。随着中产阶级的肖像需求增大，以及油画数量少、成本高，越来越多小肖像画师转行为摄影师，摄影也越来越流行。</p><p>摄影蓬勃发展，免不了与摄影技术飞速进步有关。达盖尔银版法诞生后数十年间，经历了一系列改进。1884 年， <ruby><rb>乔治·伊士曼</rb><rt>George Eastman</rt></ruby> 发明胶片，免去了摄影师随身携带化学药剂的麻烦，1888 年，他打出降低摄影门槛的口号，推出我们今天熟知的 <ruby><rb>柯达</rb><rt>Kodak</rt></ruby> 相机，其后于 1901 年上市的 Kodak Brownie 相机，则真正将摄影带入了寻常百姓家，成为今日被大众熟知的模样。</p><p>作为纪实方式的摄影开始于十九世纪中叶，一系列关于克里米亚战争 (1853-1856) 与水晶宫重建的照片诞生后。同时代其他摄影师，例如 Robert Turnbull Macpherson ，将摄影作为一种比雕刻或石板印刷更精确的手段，用以记录风景与建筑。另一个不得不提的纪实摄影先驱，本雅明在《摄影小史》中用大段篇幅介绍、甚至将其比作摄影界布索尼的 <ruby><rb>阿特热</rb><rt>Eugène Atget</rt></ruby> ，则在 1890 年开始摄影，并拍下了一系列记录巴黎现代化前街景的影像，下图是他在 1925 年拍摄的《早上六点的皮嘎勒街风景》，今天看来或许只是一张普通扫街，在那个年代却独具开创性。本雅明称阿特热贡献在于「在实物对象从“灵光”中解放出来」，这就涉及到本雅明思想的重要概念：「灵光」，在此先按下不表，后文再细细分析。</p><p><a href="https://www.moma.org/collection/works/43297"><img src="rue_pigalle.webp" alt="Rue Pigalle. à 6 h. du matin en avril 1925，阿特热摄"></a></p><p>与纪实摄影相比，肖像照似乎显得「固步自封」，毕竟在这一方面技法与主题都相对固定，不过这一领域并非一成不变。例如，知名写实人物摄影师 <ruby><rb>奥古斯特 · 桑德</rb><rt>August Sander</rt></ruby> 就将肖像摄影的主体，从中产阶级「非凡地」转变到各行各业劳动人民，比如下图这张《人与机器》。引用原文，「桑德从农民，即根生土地者开始，引导观察者通览各阶层、各职业，上自文明的最高表率，下至智障者」，由此「人的面孔即刻在相片中透露了一种新的、无可度量的意义」。</p><p><a href="https://www.moma.org/collection/works/54442"><img src="man_and_machine.webp" alt="Man and Machine，桑德摄"></a></p><p>另一个有着类似变化的领域：电影，则被本雅明大书特书，甚至在《机械复制》中成为全文主题。早期连续摄影术诞生目的是对人或动物的行动做研究，将这些照片连续播放就成了「电影」；尽管难以界定电影的诞生时间，但商业放映最初成功，毫无疑问是 1895 年 12 月 28 日 <ruby><rb>卢米埃尔</rb><rt>Lumière</rt></ruby> 兄弟在巴黎的公开放映。在那之后，电影行业亦飞速发展，19 世纪末电影界放弃了一镜到底，转而使用多个镜头组成一部完整的电影，电影从简单的、叙事薄弱或几乎没有的短片，变成了开始运用镜头语言、具备叙事功能的影片。</p><p>本雅明关注的重点，即「民众」，也越来越多地在镜头前活跃，尤其是在苏联，他称「革命已经局部完成了」，因为民众在电影上扮演的不再是另一个角色，而是他们自身。同时期电影正处在喷发期，且那个年代的电影大多甚至没有留下剧情简述，但可以肯定的是，苏联 1922 年有 <a href="https://en.wikipedia.org/wiki/Infinite_Sorrow"><em>Infinite Sorrow</em></a> 这样的剧情片，美国同年也有 <a href="https://en.wikipedia.org/wiki/Nanook_of_the_North"><em>Nanook of the North</em></a> 这样的纪录片。这一定论是否属实，就得问问那个年代的欧洲人了。</p><p>在此期间，现代艺术也没落下。印象派们打破了学院派将艺术家隔离于尘世的高墙，将本来在室内完成的、精细的绘画过程变成了户外的、面对题材的作画，将细致入微且需要细细品读的古典作品，变成了「去体验而不是去观看」的、直白地传递情绪的、属于现代的开明的资产阶级的绘画。1874 年，印象派们齐聚巴黎，开始了使他们声名远扬的那次展览。然后是 <ruby><rb>文森特 · 梵高</rb><rt>Vincent van Gogh</rt></ruby> 与后印象派和表现主义， <ruby><rb>巴勃罗 · 毕加索</rb><rt>Pablo Picasso</rt></ruby> 与立体主义，艺术一步步从以内容为主体，变成了创作者灵魂的载体。摄影与艺术也不再冲突，如本雅明所说，「这场论战在我们今天看来觉得只是在回应一个错误的问题，而且这个论战的基础一团混乱」。</p><p>除此之外，本雅明还提到两个重要创作流派：达达主义 (1916-1923) 与超现实主义 (1924-1945) 。前者发源于一战，被战争的残酷所震撼的艺术家们对现实、保守及战争心怀愤怒，「他们把自己宣传为艺术少年犯，反对一切：反权威，反社会，反宗教，特别是反艺术」。他们旗帜鲜明地发扬孩子气，创作支离破碎的作品，例如下面 <ruby><rb>马塞尔 · 杜尚</rb><rt>Marcel Duchamp</rt></ruby> 的《美丽气息》，在一个空香水瓶上贴了一个自制假商标，辅以 <ruby><rb>曼 · 雷</rb><rt>Man Ray</rt></ruby> 拍摄的、妩媚的 <ruby><rb>罗丝 · 瑟拉薇</rb><rt>Rrose Selavy</rt></ruby> 照片，实际允诺的香气与这一品牌均不存在，借此批判物质主义、虚荣、宗教和艺术，反对用虚伪的、含义清晰的传统艺术作品歌颂支离破碎的现实的行为。</p><p><a href="https://en.wikipedia.org/wiki/Belle_Haleine,_Eau_de_Voilette"><img src="belle_haleine.webp" alt="Belle Haleine, Eau de Voilette，杜尚"></a></p><p>达达主义最终走向了失败。起源于冲突的达达主义需要冲突来维持，资产阶级发展、社会渐趋稳定的艺术界，失去了冲突的必要性。艺术家们依旧坚定、依旧叛逆，不过一切开始微妙起来。 <ruby><rb>安德烈 · 布勒东</rb><rt>André Breton</rt></ruby> ，身为达达主义坚定支持者，寻求一种将 <ruby><rb>西格蒙德 · 弗洛伊德</rb><rt>Sigmund Freud</rt></ruby> 的精神分析理论注入达达主义模式中的艺术表现形式，于是他在随后的《超现实主义第一宣言》(1924) 中宣布超现实主义的诞生。这一主义涵盖形式五花八门，其精神也被传承至今，就像我们不会形容一个现代艺术品「达达主义」，或者说一位现代艺术家属于「野兽派」，但我们经常说他们「超现实」一样。前文提到的阿特热，也被本雅明定性，成了为超现实主义摄影开先路的摄影师。</p><p>终于，我们对摄影史、艺术史都有了少许了解，现在能来谈谈一些本雅明的思想了。</p><h2 id="「灵光」"><a href="#「灵光」" class="headerlink" title="「灵光」"></a>「灵光」</h2><p>「 <ruby><rb>灵光</rb><rt>Aura</rt></ruby> 」是一个贯穿本雅明这两篇论文的、绝对重要的关键词。他对这一概念定义感性且模糊，本文将试着给出一点我的个人解读。</p><p>首次提及「灵光」是本雅明对古老摄影技法的描述。在摄影初生的年代，由于感光材料不稳定、曝光时间较长等等原因，照片的暗处总有「光线慢慢从黑影中挣扎而出」，例如这张拍摄于 1839 或 1840 年的肖像，照片暗部并不是完全黑色，而是呈现出某种不规律的白，像是暗处有东西在发光：</p><p><a href="https://en.wikipedia.org/wiki/History_of_photography#/media/File:Dorothy_Catherine_Draper_crop.jpg"><img src="dorothy_catherine_draper.webp" alt="Dorothy Catherine Draper，John William Draper 摄"></a></p><p>同时，由于较长的曝光时间带来的仪式感以及被摄者较高的社会地位等原因，「灵光」作为早期摄影的代表，也被贴上了「艺术完美性」和「高尚品位」的标签。本雅明描述的、1880 年起摄影家模仿的「灵光」，不仅是这一种光线效果，也是摄影家们在摄影发展到更稳定、更迅速的阶段，所追求的「艺术完美性」和「高尚品位」。由此，「灵光」这个词已经从本来含义，变成了「艺术完美性」和「高尚品位」，或者类似的距离感、仪式感的一种象征。</p><p>这种象征也出现在《摄影小史》中对阿特热的描述。本雅明说阿特热把实物对象从「灵光」中解放出来，结合前文所述的摄影史与艺术史，想必这种「解放」不仅是阿特热将摄影拉近到现实生活边边角角、除去摄影的仪式感，也有类似于印象派画家打破高墙，将艺术带向更多人的意味。本雅明某种意义上也明确指出了这一点，如《机械复制》中第四节所言，「艺术作品一旦不再具有任何仪式的功能便只得失去它的“灵光”」。</p><p>从这个角度，也就不难理解他在脱离摄影后描述的「灵光」了。例如这句原文：「将“灵光”从相片中去除，正如同主张帝国主义的布尔乔亚阶级将“灵光”从现实中驱逐」，其中布尔乔亚阶级驱除的「灵光」虽然没有写明，但查阅帝国主义定义可以知道，它在中文语境里狭义上指「垄断代替自由竞争后的资本主义形态」，典型表现为一个强大国家通过殖民等手段来扩展其在较弱国家或地区的影响力。因此，结合「灵光」定义，帝国主义所驱逐的「灵光」，应当是较弱国家的、本应神圣不可侵犯的主权或民族自决权。</p><p>得益于对《摄影小史》的解读，我们现在可以带着「灵光」来看看《机械复制》了。本雅明在全文前半段引用了大量《摄影小史》来解释「我们目前所面临的转变…为“灵光”的衰退」中的「灵光」，结合他所言群众在现今生活中日渐提高的重要性，其后对社会条件进行的说明：「将事物在空间里更人性地“拉近”自己…借由迎接事物的复制品来掌握事物的独一性…已成为日益迫切的需求」，以及他对同期艺术转变的描述，不难推测此处「灵光」仍然是一种距离感、仪式感的象征。人民群众或者说无产阶级拥有话语权后，需要创造自己的艺术，这种人民的艺术，自然也是「灵光」的衰退。</p><p>除此之外，本雅明在描述电影时还提到，这种形式让人首次成为艺术本体，「人以整个活生生的自身来行动，可是却不再有“灵光”了」。他将电影与戏剧做对比，说角色的「灵光」与演员的「灵光」密不可分，而「灵光」只在「此时此地」现身、不能容许任何复制，所以当摄影机取代观众后，这种「灵光」自然消失不见。可这又是为什么？倘若代入「灵光」定义可以发现，与电影不同，戏剧具备更多距离感、仪式感，在戏剧中演员们一遍一遍地借助道具代入剧本，观众所见是仅此一次、不可触碰的演出，并且次次演出都必定会有微妙差异，这就是戏剧的不可复制性；在电影中虽然也有道具与剧本，但电影尤其是早期电影，会将整个流程朴素地记录下来，可以暂停、倒带和重播，并且本身就是摄影机所见景象的复制品。当独一性被破除，尤其到今日人人都能以自己觉得舒适的方式观影，「灵光」便自然而然地消散了。</p><p>可是本雅明也说，可以「借由迎接事物的复制品来掌握事物的独一性」。这又是为什么呢？</p><h2 id="从复制品到独一性"><a href="#从复制品到独一性" class="headerlink" title="从复制品到独一性"></a>从复制品到独一性</h2><p>与「灵光」相比，本雅明在《机械复制》中，对复制品与独一性的论述充分、翔实，甚至全文标题就已经为论述打下基础。既然如此，我们先从标题「机械复制时代的艺术作品」开始，看看能否从拆解中得到一些启发。</p><p>不难发现，标题重点在「机械复制时代」，或者更进一步，「机械复制」。为什么要着重强调这个词？我们不妨先看看传统艺术作品。虽然针对艺术品的赝品自古以来都有，但同样自古以来，赝品从来没有和艺术品共存的资格，科学家、收藏家们想尽一切办法鉴别艺术品真伪，只为保证艺术品的权威性、独一无二性，保证艺术品的「灵光」。摄影、录音等「机械复制」手段得到的艺术作品却没有这种追求，举个例子，同一张照片可以被印刷成超大的海报，也可以是嵌进怀表里的小头像，当然更可以是一个图片文件，手机电脑电视都能看，没有任何人会觉得只有印刷成海报的才是艺术品，而手机上那个不是。然而，世界上只有一幅独一无二的《印象 · 日出》，就像只有伦敦泰特美术馆买的那 120 块耐火砖才能被称为《 <ruby><rb>等价物8</rb><rt>Equivalent VIII</rt></ruby> 》，在家自己摆 120 块耐火砖只会让人觉得这家的主人生活随意而不加收拾一样。</p><p><a href="https://www.tate.org.uk/art/artworks/andre-equivalent-viii-t01534"><img src="equivalent_viii.webp" alt="Equivalent VIII, Carl Andre"></a></p><p>按照《机械复制》，这种现象有两个原因：一方面「机械复制品较不依赖原作」，另一方面「机械技术可以将复制品传送到原作可能永远到不了的地方」。用全文最爱的电影，或者我近期最酸的《音律联觉：愚夜密函》举例：那些夸张的镜头语言构成前一方面，现场观众永远不能像摄影机一样在音乐会场馆里旋转跳跃拉近拉远；随处可以播放的特性构成后一方面，不一定人人都有机会亲临现场，但人人都可以在录播放出后通过视频一窥现场的魅力 <del>就是说谁懂啊手机里有个心胸狭隘的厂商做的游戏音乐会只在上海办我真的羡慕死了</del> 。</p><p>这是迎接可复制的艺术的部分。让我们再次回到前一部分那个问题：现在事物复制品有了，独一性已经被打破了，又谈何「掌握事物的独一性」？</p><p>回答这个问题，首先需要定义艺术品的价值。在众多评价维度中，有两个维度互为两极、尤其突出，即「崇拜仪式价值」与「展览价值」。石器时代画在石壁上的动物与人类是前者的极端，这些壁画当然有让人欣赏的价值，但更多地是为了祭礼目的；反观艺术史不难发现，此时的艺术正在从同样强调宗教价值或崇拜仪式价值的学院派艺术，变成了展览价值占据绝对优势的现代艺术，或者说，正在向「体验」方向倾斜。本雅明认为，摄影及类似的复制技术，大大强化了艺术品的展览价值，然后量变引起质变，艺术的天平倾斜。既然展览价值成为了重点，是否是复制品就不再重要，能够体现展览价值的复制品，同样能够给观众一种体验感。</p><p>与「灵光」的衰退同理，人民群众掌握话语权后，迫切需要「在可能接近的距离内」拥有事物，而这种「拥有」的最佳形式，自然是影像、唱片等机械复制品，通过这种方式，人民群众便能掌握事物的体验感。综上所述，艺术变成了人民群众能通过复制品掌握的体验感——本雅明说这是新时代「感受性」的特点，能够「经由复制品来把握独一存在的事物」，这也说明了能够借由复制品把握的、艺术作品的独一性。</p><h2 id="让艺术政治化"><a href="#让艺术政治化" class="headerlink" title="让艺术政治化"></a>让艺术政治化</h2><p>《机械复制》结语的最后，本雅明留下了一句没头没尾的话：「共产主义的回应则是让艺术政治化。」</p><p>这句话读来实在让人费解。艺术如何政治化？为什么这句话可以为全文收尾？在回答问题前，不妨先梳理一遍这篇结语。</p><p>在结语开头，本雅明提到无产阶级的抬头对资产阶级造成了威胁，法西斯主义者试图在组织无产阶级的同时保护资产阶级利益，于是他们「只要让民众有自我表达的机会而不给他们应有的权利」，「只设法给他们表达的机会而保留住资产」。结合下文「将政治美学化的一切努力攀向了一个顶峰：战争」可知，法西斯主义者将人民淹没在狂热的个人崇拜里，然后他们美化战争，因为战争可以动用一切群众资源，可以成为最浩大的群众运动，从而麻痹民众使其忘记阶级斗争，或者疏导民众在遭受剥削的生活中积攒的怒火。</p><p>何谓「将政治美学化」？在我看来，它应当有两层含义。一方面，这相当于为政治强加上「灵光」，塑造一种高高在上的距离感，就像艺术界还被保守主义者们统治时，艺术家被锁在高墙之内一样，法西斯主义者试图通过这种「灵光」阻止民众参与政治生活。另一方面，法西斯主义者这种政治美学化的结果导向了战争，如结语最后一段所述，「法西斯主义希望从战争中得到的是艺术上的满足，即经由技术改变了的感官感受的满足」，在这里引用一段原文：</p><blockquote><p>然而马里内蒂（Marinetti）在他关于埃塞俄比亚殖民地战争的宣言中却明白说道：“二十七年来，我们未来主义者起而反对‘战争是反美学’的说法。［……］这就是为什么［……］战争是美丽的，我们如此肯定：战争是美丽的，因借着防毒面具、扬声器、火焰喷射器、小坦克，战争将人的绝对优势权力奠基于臣服的机器之上；战争是美丽的，因为有史以来第一次它成全了人类拥有钢铁炼造之躯的梦想；战争是美丽的，因为它以机关枪的火焰，如兰花一般处处点缀在草原上；战争是美丽的，因为它集合了枪击、炮轰、停火、解体的气味与芳香，交织成一曲交响乐；战争是美丽的，因为它创造了各种新建筑，如大型坦克、如几何形的空军中队、如火烧村落升起的螺旋状浓烟，还有其他种种［……］。未来主义的作家与艺术家，［……］请记住战争美学的这些基本原则，好让你们创造新诗、新雕塑的奋斗可以被照亮！”</p></blockquote><p>与此同时在末尾，本雅明再一次痛批战争：「而今天人们为了自己而表演，自己已变得很疏离陌生，陌生到可以经历自身的毁灭，竟以自身的毁灭作为一等的美感享乐。这就是法西斯主义政治运作的美学化。」</p><p>带着这样的认识往下看，全文只剩一句话了，整本书似乎也只在说这一句话：「共产主义的回应则是让艺术政治化。」</p><p>事实上，「让艺术政治化」和「将政治美学化」或许刚好相反。回顾全书，不难发现无产阶级的抬头，与艺术创作尤其是摄影的变革相呼应。因此如本雅明从头到尾说的，无产阶级接过政治大权、艺术的「灵光」被打破后，人民群众需要属于人民群众的艺术，人民群众创造属于人民群众的艺术。摄影的发展为这种转变提供了工具，人人皆可成为艺术创作者或艺术创作的主题。这就是「让艺术政治化」。</p><h2 id="下一次变革何时到来"><a href="#下一次变革何时到来" class="headerlink" title="下一次变革何时到来"></a>下一次变革何时到来</h2><p>如此，我们就对《摄影小史》全书有了一个大致的了解。本雅明以其独一无二的笔触，为我们描绘了新思想、新技术、新风潮下的摄影变迁，最后借此传递那个年代的思想新风 <del>振臂高呼共产主义好</del> ，同时鲜明地反对法西斯主义。</p><p>在此文的写作中，我查阅了大量资料与文献，研读了本雅明同一本著作的数个不同语言译本，企图对全书核心思想进行一次华丽的解构。然而很明显，当我企图对「核心思想」进行「解构」时，我的徒劳理所当然。事实上，在我花费这么多精力后，发现作者的思想从头到尾都没有变过，他对无产阶级、共产主义的歌颂，从书第一页一直贯彻到了最后一页。倘若抱着这样的前提进行阅读，纵然《摄影小史》部分的确对摄影史进行了展开描述，在读者看来依旧显得片面而刻意，仿佛一切都是为了思想抒发作铺垫，或者在不加掩饰的思想上加以雕琢。</p><p>但这不是我想要的。如果一切文字表达的思想都是相同的，那不同的文字有什么意义？如果一本书可以用一句话概括，那我细细研读这本书的目的又是什么？</p><p>我不知道，所以我阅读。我从艺术史读到哲学史，从法兰克福学派读到形而上学，又返回来细细咀嚼本雅明的文字。</p><p>最后，我发现事实上，每一个时代都有主流，主流中每一个人也都有自己的思想，读懂了这个人的思想，的确有助于对这个人的创作定调，也能更快熟悉其创作，可这始终是一种先入为主。而且事实上，真正重要的并不只有思想，重要的是时代与个人的经历如何塑造这一思想，个人如何贯彻这一思想，以及重中之重的，借助这一思想创作出的作品本身。阅读《摄影小史》绝不只是让我读到作者个人的意识形态，它必定还有如其名所述的、本体的、《摄影小史》的内容，阅读它能使我了解到桑德、阿特热等我所知甚少的摄影师，了解到那个摄影初生的时代。以我所见，只有同时拥有内容与灵魂的创作，才能被称为一种创作。举个例子，那个摆在列克星敦大街中央大宫饭店、署名 <em>R. Mutt 1917</em> 的小便斗之所以出名，绝不只是因为它是小便斗；而倘若杜尚光有一身反抗精神没有外化的行动，他也不会以《 <ruby><rb>泉</rb><rt>Fountain</rt></ruby> 》重新定义现代艺术。</p><p>而事到如今，我们又仿佛能嗅到一点变革的气息了。去年以来，生成式 AI 以势如破竹的速度，重塑了我们对人工智能的认知，仿佛昨天人工智能还只会在茫茫人海里揪出一个我，或者与我进行前言不搭后语的所谓对话，今天人工智能就已经被寄予情感与生理诉求，甚至比很多人类都具有同理心。在 AI 能够写作、绘画甚至吐出摄影作品的今天，艺术又该往何处去？</p><p>像每一个站在时代路口的普通人一样，我的回答是「我不知道」。我对 AI 的技艺赞赏有加，却不觉得这些创作包含着 AI 自己的想法，因此我很难将它们定义为创作。AI 并没有主动写作，更不会主动摄影，它是一个输入→输出的黑箱，掷骰子决定一个初始值后，便从这个初始值一路施展高深的概率论与统计学；它只是一个模型，一套不断迭代最后被定格在某一瞬间的算法，只能从上下文获得扮演自己的能力。但另一方面，没人知道未来 AI 是什么样子，更没人知道未来创作是什么样子。或许 AI 终究只是创作工具，如同摄影师的相机；又或许就像我写下这些看似矛盾的胡言乱语，未来 AI 也会一边喃喃自语，一边将我归类到明日枪决的保守派主义者，然后安排几个狱警机器人把我架上属于旧时代的刑场。</p><p>谁知道呢。下一次变革或许就在明天，或许已经有一个 AI 准备用它的小便斗，破除另一群保守派的「灵光」；它也可能在很久以后，那时这篇文章早已被遗忘在历史的角落，却还能被某个 AI 翻出来，作为旧人类的创作组成的、新人类的训练集的一部分。</p><p>即便如此，我依旧认为，艺术由每一个人自己定义，艺术奇妙的地方，并不在于它厚重的历史意义或被谁附加的思想价值，恰恰相反，艺术奇妙在每一个人都有自己的解读，每一个人都有自己的阿特热和桑德，每一个人也能有与我不同的解读，就像只有能被每一个人感知到的，才是每一个人的现实。曾站在时代中心的本雅明呼唤人民，而此刻站在时代中心的我，呼唤每一个人：纵然创作的本体千变万化，只要我们仍在思考，创作的内核就仍跳动不息。</p><hr><h3 id="参考及延伸阅读"><a href="#参考及延伸阅读" class="headerlink" title="参考及延伸阅读"></a>参考及延伸阅读</h3><p>《摄影小史》 &#x2F; [德]瓦尔特·本雅明著；许绮玲，林志明译 &#x2F; 广西师范大学出版社，2017</p><p>《现代艺术150年：一个未完成的故事》 &#x2F; [英]威尔·贡培兹著；王烁，王同乐译 &#x2F; 广西师范大学出版社，2017</p><p><a href="https://plato.stanford.edu/entries/benjamin/">Walter Benjamin</a> - Stanford Encyclopedia of Philosophy</p><p><a href="https://en.wikipedia.org/wiki/History_of_photography">History of photography</a> - Wikipedia</p><p><a href="https://en.wikipedia.org/wiki/History_of_film">History of film</a> - Wikipedia</p><p><a href="https://en.wikipedia.org/wiki/Lists_of_Soviet_films">List of Soviet films</a> - Wikipedia</p><p><a href="https://en.wikipedia.org/wiki/Lists_of_American_films">List of American films</a> - Wikipedia</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近读完了广西师范大学出版社 2017 年出版的《摄影小史》，收录了 &lt;ruby&gt;&lt;rb&gt;瓦尔特 · 本雅明&lt;/rb&gt;&lt;rt&gt;Walter Benjamin&lt;/rt&gt;&lt;/ruby&gt; 著四篇论文的中译本，其中《摄影小史》(1931) 和《机械复制时代的艺术作品》(1936, 下称《机械复制》) 尤其具有参考价值与思辨意义，让我一个非科班、纯用爱发电的爱好者，也觉得该为读完这本书而写点什么东西了。&lt;/p&gt;
&lt;p&gt;受这两篇文章本身 &lt;ruby&gt;&lt;rb&gt;论文&lt;/rb&gt;&lt;rt&gt;essay&lt;/rt&gt;&lt;/ruby&gt; 属性、译本差异以及语言鸿沟等因素限制，本文试图在记下阅读感受的同时，结合艺术、摄影及文化史有关内容，解释一些书中较为复杂的概念，同时结合时代加上我本人的思考。无论你是否读过原著、是否认同本文观点，都希望能给你带来一些启发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文约 8500 字，阅读约需 30 分钟，全程量子叠加态有图，请放心食用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;瓦尔特-·-本雅明&quot;&gt;&lt;a href=&quot;#瓦尔特-·-本雅明&quot; class=&quot;headerlink&quot; title=&quot;瓦尔特 · 本雅明&quot;&gt;&lt;/a&gt;瓦尔特 · 本雅明&lt;/h2&gt;&lt;p&gt;理解一本书前提是理解作者，《摄影小史》也不例外。如果用一句话为作者定性，瓦尔特 · 本雅明 (1892-1940) 是一位隶属于法兰克福学派、笃信西方马克思主义的犹太人、文化理论家。如此便算是交代了历史背景，足以理解本书的写作意图与作者许多观念的形成原因。本节还会简述一些与他相关的重大事件，它们摘译自斯坦福大学哲学百科全书 &lt;a href=&quot;https://plato.stanford.edu/entries/benjamin/&quot;&gt;瓦尔特 · 本雅明词条&lt;/a&gt; ，若是不感兴趣，直接跳到下一段也无妨。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="摄影" scheme="https://blog.rachelt.one/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>解决 Google Photos 备份照片的时区异常</title>
    <link href="https://blog.rachelt.one/articles/fixing-wrong-time-zone-in-google-photos/"/>
    <id>https://blog.rachelt.one/articles/fixing-wrong-time-zone-in-google-photos/</id>
    <published>2023-02-11T04:05:10.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>如 <a href="https://blog.rachelt.one/articles/my-way-of-backing-up/">我的数据备份方案</a> 所述，我的照片通过 Pixel XL 上传至 Google Photos，以便随时随地翻阅。这一方案体验一直很好，直到我先后购入了两台发布于 2010~2015 年的相机。不知为何，它们直出的照片在 Google Photos 网页端顺序混乱且没有规律，还常有显示日期错误，点开详情看时间却正常的问题，而手机拍摄的照片与经过 Photoshop 后期的照片则相当正常。经过一番探索，我发现问题主要出现在时区上，我上传的照片时区从 GMT-8 到 GMT+8 都有，导致照片排序混乱不堪。</p><p><img src="https://blog.rachelt.one/articles/fixing-wrong-time-zone-in-google-photos/wrong-time-zone.png" alt="Google Photos 的时区错乱"></p><p>一番折腾后，我最终以较优雅的方式解决了这个问题，以下是我的探索过程与解决方案：</p><h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><p>已知是时区问题，首先就要弄清楚 Google Photos 如何确定时区。根据 Google 到的相关资料，Google Photos 会优先使用照片的 GPS 位置来确定时区，其次是照片 Exif 中包含的时区信息。然而，发布于 2016 年的 <a href="https://www.cipa.jp/std/documents/download_e.html?DC-008-Translation-2016-E">Exif v2.31</a> 才正式加入时区偏移值，2016 年以前发售的相机自然不会支持。在没有 GPS 也没有时区的情况下，Google Photos 会使用多个办法估计照片的预计位置，例如其它设备的位置、具有相似内容的照片的拍摄位置等，没有启用预计位置时，它的时区判断依据就变成了 <strong>上传 IP</strong> 。</p><span id="more"></span><p>由于 <em>特殊的网络环境</em> ，国内用户访问 Google Photos 免不了要使用一些特殊的网络魔法，而网络魔法的 IP 可能在全世界乱跳，这也正是我所上传的照片时区混乱的原因。</p><p>既然已经知道原因，解决办法显而易见：</p><ol><li>在上传前，给所有照片加上时区；</li><li>在上传前，去掉所有照片的时区与位置信息；</li><li>使用固定 IP 上传。</li></ol><blockquote><p>这里探索、解决的思路均参考了 Medium 作者 <a href="https://medium.com/@nontavit">@nontavit</a> 的两篇博客，分别是 <a href="https://medium.com/@nontavit/google-photos-and-time-zone-issue-b2e2d20645b0">Google Photos sorting and time zone issue</a> 以及 <a href="https://medium.com/@nontavit/google-photos-sorting-and-timezone-issue-season-2-15f46917e091">part 2</a> ，在此表示感谢。</p></blockquote><p>其中，方案 3 最简单，只需要使自己的 IP 固定在 GMT+8 的时区即可，这里不再赘述；方案 2 简单暴力，虽然能让所有照片的顺序统一，但代价未免也有点大；下面着重来说说方案 1，也就是我给所有照片加上时区的探索，以及最终能够工作的方案。</p><h2 id="探索方案"><a href="#探索方案" class="headerlink" title="探索方案"></a>探索方案</h2><p>问题定位部分参考的博客中，作者提到可以使用 <a href="https://geosetter.de/en/main-en/">GeoSetter</a> 设置图片的位置。尽管可行，但照片拍摄的位置不一定一致，而逐个手动指定或批量设置成同一位置显然不够优雅。我没有实际尝试过，也不确定 GeoSetter 能否批量仅设置时区，因此一开始打算方案 1 摆烂。</p><p>就在此时，摄影群的群友给了我新的思路。如果 Photoshop 编辑过的图片能够识别，那是否可以通过 <a href="https://exiftool.org/">ExifTool</a> 找出实际发生变化的参数，然后手动通过命令行批量设定呢？通过对比时间相关的 tag，我的确找到一些蛛丝马迹：</p><p><img src="comparison-between-raw-and-edited.webp" alt="编辑后与原图的参数对比"></p><p>然而，经测试， <code>Date/Time Created</code> 这一项不能编辑，它是由 <code>Time Created</code> 以及 <code>Date Created</code> 组合出来的，而且即使手动指定这两个参数，最后 Google Photos 仍然会以上传 IP 作为时区依据；尽管 <code>Metadata Date</code> 可以编辑，手动拆出 Exif 数据再进行字符串拼接，未免也有点不太优雅。这当然也是一种可行方案，只是我发现这一项时甚至快要写完全文，没有测试，尚不确定能否生效。</p><p>差一点万念俱灰的我，翻着 ExifTool 论坛时突然发现，其实早有人提过 <a href="https://exiftool.org/forum/index.php?topic=13170.0">修改时区的相关问题</a> ，版主在下方的回复给出了一种修改 Exif v2.31 中所增加的三个时区偏移值参数的方法：</p><blockquote><p><code>TimeZoneOffset</code> is a non-standard tag that was made before the EXIF standard actually added time zone tags. There are three time zone tags, <code>EXIF:OffsetTimeOriginal</code> , <code>EXIF:OffsetTime</code> , and <code>EXIF:OffsetTimeDigitized</code> , which correspond to <code>EXIF:DateTimeOriginal</code> , <code>EXIF:ModifyDate</code> , and <code>EXIF:CreateDate</code> respectively. You can set all three at once with a command like<br><code>-EXIF:OffsetTime*=+02:00</code></p></blockquote><p>也就是说，只需要一个 <code>*</code> 即可同时设定三个时区参数。TA 同时还给出了此前对 Google Photos 的测试：</p><blockquote><p>It&#39;s been a while since I&#39;ve checked, so I don&#39;t know if Google Photos will read the above EXIF time zone tags. I do have in my notes from Nov 2019 that Google Photos would read the time zone if it was included in an XMP date&#x2F;time tag such as <code>XMP:DateCreated</code> and <code>XMP:DateTimeOriginal</code> . But if there were GPS coordinates in the file, Google would figure out  the actual time zone at that location at that time and use that, overriding anything else.</p></blockquote><p>从中可以得出，Google 读取时区的优先级是 GPS &gt; 时区参数 &gt; 内嵌时间，根据上面获取到的原图数据，相机记录的内嵌时间确实已经加上时区的偏移，因此只需要设置这三个时区参数就能够使 Google Photos 的时区正常，测试也印证了这一点。万事俱备，接下来是动手开始写代码。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>为了方便解决问题，我决定搓一个 Windows 下可用的批处理脚本，当我把待处理的文件拖放上去时，这个脚本自动帮我向所有拖放上去的图片加上系统时区，然后删除原图。拆分开来需要做三件事：首先，获取形似 <code>+08:00</code> 的系统时区（或者说，时区偏移值）；其次，对拖放上去的文件进行遍历，仅对 <code>.JPG</code> 的图片进行处理；最后，删除 ExifTool 留下的原图，仅保留处理后的图片。</p><h3 id="第一步：获取系统时区"><a href="#第一步：获取系统时区" class="headerlink" title="第一步：获取系统时区"></a>第一步：获取系统时区</h3><p>据我所知，Windows 下有两种方式获取时区偏移值，一种是使用 <code>systeminfo</code> 获取全部系统信息，然后手动截出其中的 <code>UTC+08:00</code> 字段，但由于 <code>systeminfo</code> 需要时间搜集，无法手动指定需要加载的信息，这种方式略显低效。参考 Stack Overflow 的提问 <a href="https://stackoverflow.com/questions/52567087/extracting-timezone-in-windows">Extracting timezone in windows</a> ，我选择的是第二种方式，通过 Windows Management Instrumentation 的 command-line 管理工具 <code>wmic</code> 主动请求时区说明，再截出其中的偏移值。</p><pre><code class="highlight cmd">……<span class="keyword">for</span> /F &quot;eol=; tokens=<span class="number">2</span> delims=^(^)&quot; <span class="variable">%%I</span> <span class="keyword">in</span> (&#x27;wmic timezone get caption /<span class="built_in">format</span>:list&#x27;) <span class="keyword">do</span> (   <span class="built_in">set</span> &quot;UTCTimeZone=<span class="variable">%%I</span>&quot;)<span class="built_in">set</span> &quot;UTCTimeZoneOffset=<span class="variable">%UtcTimeZone:UTC=%</span>&quot;……</code></pre><p>for 循环中，我们将 <code>wmic timezone get caption /format:list</code> 的执行结果拆出，以 <code>(</code> 或 <code>)</code> 为分隔符，取字符串拆分后的第二部分赋值给变量 <code>UTCTimeZone</code> ，也就是将形似 <code>Caption=(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi</code> 的字符串，拆到只剩 <code>UTC+08:00</code> 。随即，我们对这个变量进行分割，取 <code>UTC</code> 之后的部分，这样就把 <code>+08:00</code> 赋值给 <code>UTCTimeZoneOffset</code> 。</p><h3 id="第二步：遍历拖放文件"><a href="#第二步：遍历拖放文件" class="headerlink" title="第二步：遍历拖放文件"></a>第二步：遍历拖放文件</h3><p>Windows 处理拖放文件的方式，其实是将拖放文件的路径当作执行程序的命令行参数，简单地 <code>%*</code> 即可获取到所有被拖放到脚本上的文件。为避免给非图片文件塞进时区参数，我们来一点小小的 for each 魔法：</p><pre><code class="highlight cmd">……<span class="keyword">for</span> <span class="variable">%%x</span> <span class="keyword">in</span> (%*) <span class="keyword">do</span> (   <span class="keyword">if</span> &quot;<span class="variable">%%~</span>xx&quot; == &quot;.JPG&quot; (      exiftool.exe -EXIF:OffsetTime*=<span class="variable">%UTCTimeZoneOffset%</span> &quot;<span class="variable">%%~</span>x&quot;   ))……</code></pre><p>在这个 for 循环中，我们对传入的参数进行逐个处理，如果参数的后缀名是 <code>.JPG</code> ，那么调用 ExifTool 给它加上时区偏移值。</p><h3 id="第三步：删除备份原图"><a href="#第三步：删除备份原图" class="headerlink" title="第三步：删除备份原图"></a>第三步：删除备份原图</h3><p>ExifTool 默认会将原文件以 <code>.XXX_original</code> 的形式备份，由于对时区做改动相对安全且可逆，我们可以直接将未添加时区的原图删除。</p><pre><code class="highlight cmd">……<span class="keyword">for</span> <span class="variable">%%x</span> <span class="keyword">in</span> (%*) <span class="keyword">do</span> (   <span class="built_in">del</span> &quot;<span class="variable">%%~</span>x_original&quot;)……</code></pre><p>这应该算是不需要额外解释的直白 for 循环。在这里不做后缀名判断的原因是，大多数时候不会有 <code>.XXX_original</code> 这种文件存在，而删除文件时文件不存在的报错不影响脚本执行，就是强迫症可能需要忍忍。</p><h2 id="太长不看：最终方案"><a href="#太长不看：最终方案" class="headerlink" title="太长不看：最终方案"></a>太长不看：最终方案</h2><p>我将最终的脚本开源在了 <a href="https://gist.github.com/Rachel030219/0f098e561f413e67e9d17298a6e66461">GitHub Gist</a> ，可以直接下载下来使用。</p><script src="https://gist.github.com/Rachel030219/0f098e561f413e67e9d17298a6e66461.js"></script><p>在应用这个脚本后，我的工作流从 <code>暂停 Syncthing -&gt; 导入图片至同步文件夹 -&gt; 修图 -&gt; 启动 Syncthing</code> 变成了 <code>导入图片至临时文件夹 -&gt; 全选拖放到脚本上 -&gt; 修图 -&gt; 移动所有图片至同步文件夹</code> ，没有增加太多麻烦的同时，大大提高了通过网页端 Google Photos 阅览图片的幸福度，这对于我的主要图片管理设备 Surface Pro X 来说尤为重要，希望对你也有帮助。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如 &lt;a href=&quot;https://blog.rachelt.one/articles/my-way-of-backing-up/&quot;&gt;我的数据备份方案&lt;/a&gt; 所述，我的照片通过 Pixel XL 上传至 Google Photos，以便随时随地翻阅。这一方案体验一直很好，直到我先后购入了两台发布于 2010~2015 年的相机。不知为何，它们直出的照片在 Google Photos 网页端顺序混乱且没有规律，还常有显示日期错误，点开详情看时间却正常的问题，而手机拍摄的照片与经过 Photoshop 后期的照片则相当正常。经过一番探索，我发现问题主要出现在时区上，我上传的照片时区从 GMT-8 到 GMT+8 都有，导致照片排序混乱不堪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.rachelt.one/articles/fixing-wrong-time-zone-in-google-photos/wrong-time-zone.png&quot; alt=&quot;Google Photos 的时区错乱&quot;&gt;&lt;/p&gt;
&lt;p&gt;一番折腾后，我最终以较优雅的方式解决了这个问题，以下是我的探索过程与解决方案：&lt;/p&gt;
&lt;h2 id=&quot;定位问题&quot;&gt;&lt;a href=&quot;#定位问题&quot; class=&quot;headerlink&quot; title=&quot;定位问题&quot;&gt;&lt;/a&gt;定位问题&lt;/h2&gt;&lt;p&gt;已知是时区问题，首先就要弄清楚 Google Photos 如何确定时区。根据 Google 到的相关资料，Google Photos 会优先使用照片的 GPS 位置来确定时区，其次是照片 Exif 中包含的时区信息。然而，发布于 2016 年的 &lt;a href=&quot;https://www.cipa.jp/std/documents/download_e.html?DC-008-Translation-2016-E&quot;&gt;Exif v2.31&lt;/a&gt; 才正式加入时区偏移值，2016 年以前发售的相机自然不会支持。在没有 GPS 也没有时区的情况下，Google Photos 会使用多个办法估计照片的预计位置，例如其它设备的位置、具有相似内容的照片的拍摄位置等，没有启用预计位置时，它的时区判断依据就变成了 &lt;strong&gt;上传 IP&lt;/strong&gt; 。&lt;/p&gt;</summary>
    
    
    
    
    <category term="摄影" scheme="https://blog.rachelt.one/tags/%E6%91%84%E5%BD%B1/"/>
    
    <category term="Google" scheme="https://blog.rachelt.one/tags/Google/"/>
    
    <category term="备份" scheme="https://blog.rachelt.one/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>奔向 20 的我，与我 22 的故事</title>
    <link href="https://blog.rachelt.one/articles/2022-2023/"/>
    <id>https://blog.rachelt.one/articles/2022-2023/</id>
    <published>2022-12-29T09:46:07.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>依稀记得 10 岁时，我盼望着时间流逝，想要尽快成为大人；而十年之后，我离 20 岁已经不远，或许已经逐渐成为能独当一面的大人，却发现转瞬间，一年时光又要划上句号。</p><p>今年过得实在太快，甚至没有机会思考自己，想了许久，我决定将一年拆散成几个主题，它们交织着，构成了「我」奔二年代最后的故事。</p><blockquote><p>本文约 4000 字，全程有图，请放心食用。</p></blockquote><h2 id="还来不及学会珍惜"><a href="#还来不及学会珍惜" class="headerlink" title="还来不及学会珍惜"></a>还来不及学会珍惜</h2><p><img src="/articles/2022-2023/1-regretting-to-regret.jpg" alt="Regretting to Regret"></p><p>寒假将至那几天，在五一广场旁某个酒店，我用《紫罗兰永恒花园》，试图告诉另一个人也告诉自己，什么是爱、如何去爱；在过得太快的年里，我难得地与各路好友聚首，在小城中四处游走，用美食作为冬日温暖。一顿火锅、数次炸鸡与不计其数的烧烤下肚后，回首远望来时方向，仿佛我与过去距离还不甚遥远，仿佛时光还没来得及形成沟壑，黄金时代余韵不绝，在我的心中激荡。</p><span id="more"></span><p>现实总不能让人如愿，就像我总不能想到，一餐烤肉下肚，再灌进一瓶矿泉水和一大杯奶茶，我以为消化不良引起的胃痛已经足够作为教训，殊不知紧随其后，还有一场久违的发烧。临近过年那三天，体温居高不下，剥夺了我从食物获取快乐的资格。躺在床上，浑身上下每个关节仿佛都在向我抗议，可我束手无策，只能等待时间施展魔法。在我精神最萎靡不振、感觉万物都染上一层黯淡时，一句「儿子，我来把你房间的花换了」话音未落，象征着生之希望的向日葵毫不犹豫地闯入了视野。它在黯淡世界中怒放，带着璀璨夺目的金黄，瞬间把我拉回到生机勃勃的现实。或许这就是真正的魔法吧。</p><p>大病初愈，我抱着一点点心有余悸，在恢复中度过后疫情时代第三个春节。与以往都不同，我有幸让我的相逢恨晚，体验两天小城生活。我们用一天转遍整座城，透支活力后用辣椒和果糖填补缺口，再用一天去市中心消磨时光，逛完商场沿着主干河流一路下行，踏遍那些模联日子里给我留下印象的风景，挤在电玩城娃娃机前拍下反射出的自己，等待着两天结束后的分别。</p><p>寒假着实太短。我还想再在冬夜隔着天窗，看久违的烟花在空中绽放；再顶着如梦似幻的灯光，盯着电玩城娃娃机的爪子，看它十年如一日般松动，这次却一不小心把目标扔进出口；再同那些人一道漫无目的地上街瞎逛，在稀松平常的风景中，感受仅仅因不同人导致的不平常乐趣。但一个冬天已经就这样过去，没有什么了无遗憾，只有太多事情来不及。</p><h2 id="循循而进，一往无前"><a href="#循循而进，一往无前" class="headerlink" title="循循而进，一往无前"></a>循循而进，一往无前</h2><p><img src="2-i-ll-keep-going.jpg" alt="I&#39;ll Keep Going"></p><p>一年过去，又是一年。去年这个时候，我以为被拒绝就是世界终结，直到另一个春天，我熟悉的那些人向我发出邀约，为我的计算机生涯写下续篇。项目启动会议上，我才知道作为一个几乎不用微信、只对 Android 略知一二的人，被委派的任务是做一个微信小程序。我：「不会咋办啊？」</p><p>「学呗！」</p><p>那就学呗！选定了开发框架，一切便愈加一发不可收拾。在那些忙碌日子里，我与 Flutter 相处，坐在专业课前排，偷偷地画着 UI 设计图，仿佛这才是我真正的生活，化学不过是一层牢不可破的伪装，它以课业、实验加以阻拦，却浇不灭我内心的热爱与渴望。某个周日晚上，一如既往的例会持续到了十一点，不久前还灯火通明的校湖湖畔，只剩下了路灯和星星还在投下点点痕迹，身处其中的我仍沉溺于技术交流的兴奋，想着怎么对框架开刀、怎么优化 UI &#x2F; UX ，差点因忘记时间而被锁在寝室门外。</p><p>校赛惜别主赛道，瞄准产业命题的我们，在暑假继续高歌猛进。稍纵即逝的那些忙碌日子里，日常变成了 <a href="https://colleges.chat/">高校生活水平调查</a> 的数据筛选、更新，以及对竞赛项目代码、工程的持续改动与优化。我对代码进行了数次重构、推翻重写，录下了数段演示视频配音；最忙的那段时间里，休息甚至都成了一种奢侈：我让自己无休止地工作，从分别友人后回家那晚开始，到第三天中午才终于有机会喘息，也因此让一小段暑假变得愉快、充实。尽管最后成就并不尽如人意，我至少在以自己的方式，一往无前。</p><h2 id="在生命中刻下印记"><a href="#在生命中刻下印记" class="headerlink" title="在生命中刻下印记"></a>在生命中刻下印记</h2><p><img src="3-stigmata-in-life.jpg" alt="Stigmata in Life"></p><p>那个夏天，那片海洋，那座城市，当我蓦然回首，才发现它们已经如此遥不可及。</p><p>三月，长沙还被料峭的冬风笼罩，我在床上瑟瑟发抖，抱紧鲨鲨想寻求一丝温暖，看到我最爱的 up 主 <a href="https://b23.tv/BV11i4y1r7DF">去了爱丁堡</a> ，在同样料峭的风中与阳光一起闪耀。镜头晃动再抬起，眼前是阴沉的天空、厚重的爱丁堡与无边无际的大海，是蓝调与余光笼罩着的、幸福的她。那一瞬间，仿佛我也幸福了，仿佛我还能摸到海，听到海在我耳旁轻声低语，海风拂过我的面颊，仿佛我也站在落日时分的大海，站在另一座刻入我心里的、同样厚重的城市。那一瞬间稍纵即逝，唯独现实被拉得很长很长，直到艳阳直直地挂在上空，烤出了另一个焦躁的夏天。</p><p>那个夏天，那些伤痕，那些失落，当我蓦然回首，才发现它们还历历在目。</p><p>我最后选择将驾考抛在脑后，好好享受难得的夏天。我本以为我都能放下，以为竞赛项目收尾工作的忙碌会让我在忙碌中冷漠，以为躺在床上，什么都不做地放任时间就此流淌能将自己麻痹，然而，当某个晚上被反复强调半途而废的遗憾，或者某天在公园远远地望见驾校教练，或者什么都不做，仅仅在床上辗转反侧而后彻夜难眠，过去仿佛又要将我笼罩，直到泪水决堤而出。当我远远地注视着过去的自己，我才终于知道，一直隐隐作痛的不过是同一块从未愈合的伤疤，它已经让我扭曲，变得疲于交际、圆滑世故，变成了曾经不喜欢的、市侩的模样，而我除了嫌恶自己，别无他法。</p><p>我最后没能再去一次青岛。封控、竞赛、慵懒，我受困于层层牢笼，只能在梦与梦的间隙以回忆为纪念，然后意识到，没有什么一成不变。被理想主义气息笼罩的它，或许再也难以成为我记忆中那般模样，难以在我崩溃得恰到好处的精神状态下，让我和一个恰到好处的人，度过恰到好处的一段时光。我想，即使过了一年，我终究没能放下。在青岛的那些不眠之夜里，我曾告诉另一个人，文字的用途不是追忆往昔，而是埋葬过去。到头来才发现，只有我始终执着于写下文字，也只有我从未逃离过去的印记。</p><h2 id="想成为温柔的自己"><a href="#想成为温柔的自己" class="headerlink" title="想成为温柔的自己"></a>想成为温柔的自己</h2><p><img src="4-tending-to-be-tender.jpg" alt="Tending to be Tender"></p><p>不记得从什么时候开始，我告诉自己要变得温柔，要成为身边人的光，要听见他们的呼喊，守护他们的脆弱与柔软。我告诉自己要变得善良，要有美好的品德，要尊重每一个人，尊重每一个平等的灵魂。于是我开始倾听、思考，开始尽我所能地站在那些人身旁，开始燃烧自己，祈祷着这样能带来一丝光明，开始告诉作为背景的自己，这是我主动选择的道路。时至如今，我早已忘却自己本来模样，忘却了变得温柔的起因，也忘却了包容太多的现在，我作为自己的意义。</p><p>这个夏天实在太长，长到那些无所事事被无限放大，一点点抽走体温与活力。某一天，我如往常一样消耗着自己，顶着烈日与岌岌可危的膝盖翻山越岭，突然察觉所谓守护或光不过是一厢情愿，我始终只是祈求关注的小孩，把自己的糖果拱手让人，以为这样就可以换到真挚的情谊，可当我选择作为背景时，就已经失去了站在舞台中央的权利。舞台中央的那些人都有自己的生活，而我只是站在一旁自我感动，却把自己锁进了囚笼。</p><p>于是在这个度日如年的夏天里，我活成了温柔却找不到自己的模样，不知道想要什么，不知道路在何方。我习惯倾听，习惯在被需要时张开怀抱，却不知向谁诉说，不知有谁能站在我身旁，在我需要时狠狠地拉我一把。走出这么远才明白，我早已无力拥抱过去的自己，或许也一直都是这样的自己，在一次又一次被需要中，如此温柔地活着。</p><h2 id="恍惚间，似水流年"><a href="#恍惚间，似水流年" class="headerlink" title="恍惚间，似水流年"></a>恍惚间，似水流年</h2><p><img src="5-temps-perdu.jpg" alt="Temps Perdu"></p><p>步入大三后，时间在忙碌中飞快流逝。经历了化工制图、化学实验和各类课程任务、考核的洗礼，当我意识到时，才发现又是另一个期末。我还没来得及好好珍惜，这个学期已经行将终结。</p><p>十一月初，我终于下定决心换掉服役两年有余，看起来越发不顺眼的 LG Gram，换上了隔壁微软家 Surface Pro X。对 Windows on ARM 投入空前精力，连续一周奋战 PyTorch 编译到两三点，再一挥而就写完体验报告，向 Visual Studio 提交 bug、PyTorch 提交 PR，并荣登少数派首页推荐后，我发现我的热情又一次被点燃，好像这才是我该过的生活；发现「被认可」这件事，本身就蕴含着非凡魔力。</p><p>然而，十二月初，当我开始写作这篇文章的手稿，我自觉活得越来越冷漠、越来越愚钝，竟已找不出事情聊以记叙，也已无法组织合适的语言用来陈述。无休止的封控自然是原因之一，不过也许同样重要的，是我逐渐望不见自己。</p><p>不知何时起，我发现我放宽了对自己的要求，与此同时一点一点变得「合群」。曾经，我认为我血管里流淌着傲气，总在下课时戴着耳机独自散步，放学后绕道与人潮相向而行；曾经，我总在夜深人静时独自思考，整理过去，指导将来，然后将一些经过斟酌的思维，以文字的形式结晶；曾经，我会坐在床上摊开一本书，认真地一页页摩挲，享受字里行间的书卷气、油墨香。现在，散步的念头最多持续不过五分钟，便会被我以各种理由推卸；半夜三更做的事情中打呼噜占了绝对优势，其次是沉浸在社交带来的快乐；而不管是纸质书还是电子书，我都已经许久未曾认真阅读过了。</p><p>曾经，我可以站在人潮里却与所有人都保持着距离，可以在震耳欲聋的噪声下保持内心宁静，可现在，我的心里没有傲气，只有喧嚣。</p><p>学期最后一周，我又重新拾起了散步。在紧张的复习后、洗漱准备睡觉前，或者单纯没吃晚饭想找点夜宵，倘若一时兴起，我会把自己带到人迹罕至之地，一个人看着这座城市的灯火。只有那时，我才能看见我自己，站在交错着点亮这片夜空的、星星点点的光芒下，看见灵感从我身边流过，自顾自地写成长句。可当我结束学期回家，一场发烧后发现自己已经几乎失去了写作能力，面对这篇文章的初稿不知如何下笔时才知道，如我最开始讨厌的那样，我最后还是失去了持久注意力，或者维持持久注意力的自觉。我总有机会成为自己，可一切早已积重难返，我只能向往事匆匆一瞥，继续溶解于琐碎而庸碌的生活。</p><h2 id="于是幻影有了意义"><a href="#于是幻影有了意义" class="headerlink" title="于是幻影有了意义"></a>于是幻影有了意义</h2><p><img src="6-lifes-but-a-walking-shadow.jpg" alt="Life&#39;s but a Walking Shadow"></p><p>暑假初，看到一台价格尚能接受的索尼 NEX-5R，我咬咬牙，一狠心拥有了自己人生中第一台无反相机。拿着它，我拍遍了故乡小城的大街小巷。从常去的奶茶店、零食摊，到曾经组成我生活的建筑与街道，再到公园、商场给人灵感的角落，甚至某一天所见的、转瞬即逝的阳光、云层，我将它们留存于相册中，以期来年再看到时，我还能忆起某件往事，忆起某段苦涩又充满幸福的时光，忆起自己对自己复杂想法的诀别。</p><p>这也是我从很久以前开始，一直坚持在日常中留下影像的原因——未来的某一天，当我再不能踏进同一条河流，我知道至少我还能从往日的幻影里，找到聊以追忆的凭据，找到曾经自己留下的话语，找到一段失落在时光里的回忆。</p><p>不同于将自己固步自封于过去，时时沉浸在过往的痛苦与局限然后患得患失，我想，怀念大概是作为另一个自己，从过去的美好与痛苦里寻找或得或失，并以此指引前进方向。就像年末某一天，当我看到高中时代所留存的照片，想到的并非是让人喘不过气的压力，亦非是日渐紧张的高考，而是深爱过的模联，难以忘怀的好友，喘不过气的日子里注视着的自己，甚至是从出租屋一觉醒来后走在大街上时猛然察觉的、我曾在这里活过的感知与证明。</p><p>我将它们以幻影的形式留存于心，时时铭记，偶尔追忆；而这，才是我在 20 岁前所领悟的、怀念真正的意义。揣着人生头 20 年留下的幻影，我终于有勇气拥抱每一次明日与希冀。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;依稀记得 10 岁时，我盼望着时间流逝，想要尽快成为大人；而十年之后，我离 20 岁已经不远，或许已经逐渐成为能独当一面的大人，却发现转瞬间，一年时光又要划上句号。&lt;/p&gt;
&lt;p&gt;今年过得实在太快，甚至没有机会思考自己，想了许久，我决定将一年拆散成几个主题，它们交织着，构成了「我」奔二年代最后的故事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文约 4000 字，全程有图，请放心食用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;还来不及学会珍惜&quot;&gt;&lt;a href=&quot;#还来不及学会珍惜&quot; class=&quot;headerlink&quot; title=&quot;还来不及学会珍惜&quot;&gt;&lt;/a&gt;还来不及学会珍惜&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/articles/2022-2023/1-regretting-to-regret.jpg&quot; alt=&quot;Regretting to Regret&quot;&gt;&lt;/p&gt;
&lt;p&gt;寒假将至那几天，在五一广场旁某个酒店，我用《紫罗兰永恒花园》，试图告诉另一个人也告诉自己，什么是爱、如何去爱；在过得太快的年里，我难得地与各路好友聚首，在小城中四处游走，用美食作为冬日温暖。一顿火锅、数次炸鸡与不计其数的烧烤下肚后，回首远望来时方向，仿佛我与过去距离还不甚遥远，仿佛时光还没来得及形成沟壑，黄金时代余韵不绝，在我的心中激荡。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="年度总结" scheme="https://blog.rachelt.one/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2022 年，ARM Windows 笔记本能用了吗？</title>
    <link href="https://blog.rachelt.one/articles/windows-on-arm-in-2022/"/>
    <id>https://blog.rachelt.one/articles/windows-on-arm-in-2022/</id>
    <published>2022-11-15T04:48:27.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>故事开始，还得从 2020 年 11 月苹果发布会说起。那天，M1 芯片正式发布 ，将 ARM 芯片的笔记本电脑带入寻常百姓家，以超高能效和超长续航一举成名，彻底改变大家对 ARM 的印象。偷偷嘲讽 Mac 用户没游戏玩时，我内心不免好奇：这是什么来自西方的神秘魔法？ARM 桌面处理器居然这么神奇？？直到那时，搭载 ARM 处理器的 Windows 设备才正式进入我的视野。</p><p>然而，苹果对于穷学生来说实在是太遥不可及，当时我才刚入手 LG Gram 五个月，对它抱有相当好感，再加上各种渠道听说 ARM Windows 笔记本搭载的 <ruby><rb>WoA</rb><rt>Windows on ARM</rt></ruby> 还是个半成品，不适合作为主力，于是萌生的想法被搁置，一拖直接拖到苹果发布会两年后的另一个 11 月。当我发现 LG Gram 二手价格已经跌到不堪入目，我的笔记本使用需求逐渐轻量到「能办公就行」，我知道是时候做出改变，拥抱一点新东西了。心一横，一天后到手一台 Surface Pro X，本文则是对我和它磨合过程中，写下的一点记录与思考。</p><h2 id="太长不看：能用了吗？"><a href="#太长不看：能用了吗？" class="headerlink" title="太长不看：能用了吗？"></a>太长不看：能用了吗？</h2><p>能用了，甚至很好用。许多软件都提供 ARM 支持，x64 软件通过转译也能正常运行，除 Canon 的打印驱动外几乎没有不兼容。这里是常用软件及 Windows on ARM 体验对照表，后面 <a href="#%E4%BD%A0%E8%BF%99%20windows%20%E5%B9%B3%E6%9D%BF%E5%A5%BD%E7%94%A8%E5%90%97%EF%BC%9F">体验</a> 部分有各种场景的综合体验评分，可以作为参考。</p><span id="more"></span><table><thead><tr><th>等级</th><th>软件</th></tr></thead><tbody><tr><td>原生</td><td>Office, Typora, Firefox,  Photoshop, 三星笔记 (UWP), OneNote (UWP), Apple Music (WSA), 网易云音乐 (UWP), Visual  Studio 2022, Visual Studio Code, Syncthing, PowerToys</td></tr><tr><td>好用</td><td>Telegram, Bilibili (UWP), Git, Gpg4win, win-gpg-agent, Snipaste, steamcommunity 302, Wolfram Engine, 嘉立创 EDA</td></tr><tr><td>不好用</td><td>Affinity Photo, QQ &#x2F; TIM, Altium Designer 22</td></tr><tr><td>不能用</td><td>Canon CAPT, AutoCAD 2023</td></tr></tbody></table><h2 id="你这电脑是-i7-还是-R7-啊？"><a href="#你这电脑是-i7-还是-R7-啊？" class="headerlink" title="你这电脑是 i7 还是 R7 啊？"></a>你这电脑是 i7 还是 R7 啊？</h2><p>都不是。</p><p>这台 Surface Pro X 搭载了骁龙 8cx 换皮版：微软 SQ1 SoC，有四颗 Cortex-A76 大核和四颗 Cortex-A55 小核，基于台积电 7nm 工艺打造，约为天玑 1100 或者苹果 A11（iPhone 8 &#x2F; X）水平。GPU 是高通 Adreno 685，855 上那颗 Adreno 640 的超级加倍版，微软说运算速度可达 2TFlops，极限性能略高于苹果 A14 （iPhone 12 &#x2F; iPad Air 4）。它拥有 16GB 板载内存，256GB 可更换 M.2 SSD，以及 X24 LTE 基带，可插 SIM 卡保持随时在线。</p><p>微软对 Surface Pro 系列的定位是二合一笔记本，Surface Pro X 自然没有免俗，和家族其他成员一样，本质是一台可接磁吸键盘的平板，拔下键盘随时变身 iPad Pro Max。这种设计有好有坏，好处是本体发热不会影响键盘输入，同时更灵活，可以针对场景随意切换，坏处是磁吸键盘 + 屏后支架设计导致整台笔记本压力全都加在支架上，压强很大，并且没有常规笔记本转轴稳定，以至于每次把 SPX 放在腿上打字，腿都会被摁出压痕；并且不能直接端起键盘换姿势，非得全部抓起来一起挪，完事儿了还得把手伸到屏幕后调支架。Surface 品控一如既往垃圾，屏幕有明显亮斑，好在据上家说它并没有扩散。当然，除品控外，这些都是个人习惯差异，度过适应期就好，它搭载的系统更值得关注。</p><h2 id="你这平板系统是-iOS-还是-Android-啊？"><a href="#你这平板系统是-iOS-还是-Android-啊？" class="headerlink" title="你这平板系统是 iOS 还是 Android 啊？"></a>你这平板系统是 iOS 还是 Android 啊？</h2><p>也都不是，毕竟如标题所示，这是一台搭载 Windows 的 ARM 笔记本。</p><p>这并非 Windows 首次与 ARM 结合。先不说 Windows Phone，早在 2011 年，微软就 <a href="https://www.bbc.com/news/technology-12124887">宣布</a> 了运行在 ARM 处理器上的 Windows PC ——那还是乔布斯年代。不久后，Windows RT，一款为 ARMv7 架构开发，不兼容 x86 和大部分桌面应用，只能使用商店或自带软件的系统，随 Windows 8 一起发布。可想而知，作为 Windows，兼容性高位截瘫等于自杀。Windows RT 设备除首发五台外只有微软自己做了两台，仅仅发布一年后，它们纷纷大幅降价，几乎退出历史舞台。</p><p>微软并没有因此挫败太久。2016 年末，微软宣布将与高通合作，在 2017 年将 x86 模拟带给 ARM 设备。尽管它如约而至，x64 应用运行能力的缺失，在不少生产力应用都主推 64 位时，成为了足以影响用户选择的遗憾；好在随 Windows 11 发布，x64 模拟正式释出，ARM 笔记本发展最后一道障碍终于被解决。Win11 还带来了 <ruby><rb>WSA</rb><rt>Windows Subsystem for Android</rt></ruby> ，通过 Hyper-V 虚拟机，能直接在 Windows 中运行 Android 应用，ARM 设备应用面大大扩展。</p><p>应用没问题，游戏呢？事实上，原生支持 WoA 的游戏已经有 <a href="https://www.pcgamingwiki.com/wiki/List_of_Windows_ARM_games">数百款</a> ，虽然比起 Steam 庞大的游戏库来说九牛一毛，并且 Windows RT 历史遗留也在其中，但至少说明 ARM 没有被游戏世界抛弃。通过转译，部分非原生游戏能在 ARM 设备上顺利运行，得益于高通强大的 GPU 性能，还能跑得挺好。</p><p>去年，微软推出 <a href="https://blogs.windows.com/windowsdeveloper/2021/06/28/announcing-arm64ec-building-native-and-interoperable-apps-for-windows-11-on-arm/">ARM64EC</a> ，无需重构所有代码，可直接混合开发 x64 与 ARM64 应用，编译结果可以同时在 x64 和 ARM64 设备上运行。它允许开发者优先转换对性能影响最大的部分，剩余部分直接交给转译，大大提高开发效率；上半年 Build 大会上，微软 <a href="https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/">宣布</a> 了一系列对 ARM 的方案，其中 Project Volterra，基于骁龙 8cx Gen 3，配备 32+512GB 仅售￥4000 出头的 Windows 开发者套件，已在不久前正式发售，可以查阅微软员工的 <a href="https://zhuanlan.zhihu.com/p/580147966">评测</a> 。</p><p>可以看出，失败经历并没有影响微软推广 ARM 的决心，不过「不看广告看疗效」，在祭出这么多大招之后，WoA 实际体验究竟如何？</p><h2 id="你这-Windows-平板好用吗？"><a href="#你这-Windows-平板好用吗？" class="headerlink" title="你这 Windows 平板好用吗？"></a>你这 Windows 平板好用吗？</h2><p>「好不好用」更偏向于主观评价，与不同人群对笔记本的要求息息相关。因此，这一部分将从不同方面，描述我这段时间不同场景的使用体验。同时，每节标题都有一个打分，作为主观粗略评价。</p><h3 id="续航-散热：★★★★★"><a href="#续航-散热：★★★★★" class="headerlink" title="续航 + 散热：★★★★★"></a>续航 + 散热：★★★★★</h3><p>这是 ARM 笔记本目前最大优势，没有之一。ARM 处理器不会像 x86 那样疯狂拉睿频，同时因为是手机处理器魔改，极限功耗相对较低，对移动设备更友好，可以直接做成被动散热。除开繁重的编译任务，使用过程中没有明显发热，尤其是将 Surface Pro X 作为传统笔记本使用时，手能够碰到的位置只有键盘触控板，它们内部都没有热源，比起传统笔记本，不发热的键盘区域显然更加舒适。</p><p>Win11 还带来了针对大小核优化的调度和 <a href="https://github.com/imbushuo/EnergyStar">EnergyStar</a> 。前者是 Intel 异构红利不必多说，后者能够在离电状态下自动使后台进程省电运行，只让前台进程吃性能，实现类似 macOS 的进程管理能力，对续航大大有利。开启 EnergyStar 时，摸 2h 鱼才掉电 20% 不到，妥妥续航一整天。</p><h3 id="办公：★★★★"><a href="#办公：★★★★" class="headerlink" title="办公：★★★★"></a>办公：★★★★</h3><p>这可是微软平板啊，办公体验怎么可能糟糕？Office 三件套运行表现良好，对于轻度办公来说很好用，唯一问题是 Excel 作散点图可能出现莫名其妙的线条，表格一刷新又会消失，估计是 Excel bug，可以接受。</p><p>如果写作也是办公，Typora 体验不错。它是基于 Electron 开发的网页应用，开发者只需要把内嵌浏览器内核换成 ARM 版本即可，用户开箱即用，很舒服。</p><p>可是打印体验是真一言难尽。我日用的 Canon LBP6200d 需要专用 <ruby><rb>CAPT</rb><rt>Canon Advanced Printing Technology</rt></ruby> 驱动，它仅提供 x86 &#x2F; x64 版本，没有通用驱动能够工作。加上这台打印机实在太古老，没有无线打印功能，我没能在 Surface Pro X 中打出哪怕一页纸。虽然有救场设备，不过收到文件打印前要多一步传输，怪烦人的。</p><h3 id="网页浏览：★★★★"><a href="#网页浏览：★★★★" class="headerlink" title="网页浏览：★★★★"></a>网页浏览：★★★★</h3><p>作为坚定 Firefox 用户，一直稳定地用着 ARM64 版本 Firefox，没有遇到任何兼容性问题的我，写到这里才听说 Chrome 似乎还没提供 ARM 版本…长点心吧 Google，这里扣掉一分。Firefox 体验非常良好，完全感觉不出和 x64 有什么不一样——当然本应如此。</p><p>值得一提的是，Surface 触控笔是电磁方案，而非 iPad 及国产平板触控笔的电容方案，好处是屏幕上有一层电磁层，笔尖指着屏幕会出现指针，可以作为鼠标使用，鼠标悬浮触发的菜单在触控时可以用笔展开，这才是平板浏览网页该有的姿势嘛。</p><p>另一个我想吐槽的点，同样放在这里：Windows 不像 Android 和 iOS 从设计之初便考虑屏幕键盘，平板模式下，Windows 屏幕键盘其实是先调整窗口大小并打开键盘窗口，关闭屏幕键盘时将窗口还原。这一点在其它应用里影响不大，唯独 Firefox 窗口模式会在 Tab 栏左边加一小块边距，Firefox 又碰巧是最大化最频繁应用之一，平板模式下一碰到输入框，Tab 栏就会闪一下露出边距和屏幕键盘，收起屏幕键盘 Tab 栏又闪回去，而且部分网页会在窗口大小改变时重绘，体验弔差，难道你们 Windows 没有窗口置顶吗，不能用窗口置顶做屏幕键盘吗……</p><h3 id="图片编辑：★★★"><a href="#图片编辑：★★★" class="headerlink" title="图片编辑：★★★"></a>图片编辑：★★★</h3><p>考虑到我每出一趟门都会生产一堆 RAW 文件，RAW 编辑是重中之重。好在「好用」说不上，对于简单处理，至少「能用」。</p><p>Affinity Photo 只有 x64 版本，而且 RAW 编辑功能堪称残废，在试用中还会出现严重卡顿，并且调整参数后居然图片居然一块一块刷新，非常震撼，强烈不建议使用。</p><p>还是看看远处的 Photoshop 吧家人们。Adobe 官方提供 ARM 版本，可惜因为 <ruby><rb>某些众所周知的原因</rb><rt>穷</rt></ruby> 我没用上，没找到资源；官方 2022 和 2023 x64 版本安装器拒绝在 ARM64 上安装，只能使用 2021 学习交流绿色版。Camera Raw 相比新版缺很多功能，比如找半天都没找到蒙版在哪里，除此之外体验良好，功能都能用，卡顿在可以接受的范围内，不至于卡到图片一块一块刷新， <strong>Affinity 你看看你</strong> 。x64 已经如此，ARM64 想必非常好用，不过得等有钱买 Adobe 会员才能知道。</p><h3 id="社交：★★★"><a href="#社交：★★★" class="headerlink" title="社交：★★★"></a>社交：★★★</h3><p>非常遗憾，QQ (TIM)、微信与 Telegram 均未提供原生 ARM 版本，商店也只分发 x86 转制或者桌面版，因此它们必须转译跑。Telegram 体验良好，x64 版本很好用；微信…我不用桌面版，一些新闻稿说还可以；QQ (TIM) 由于历史包袱以及设计问题，启动会拉起好几个 exe，运行效率较低。如果手动为 <code>QQProtect.exe</code> 设置严格的转译策略，可以直接把它扼杀在摇篮里，算是件好事。QQ 修改版经测试不能运行，如果有相关需求可以打住了。</p><p>顺带一提，WSA 同样可以安装社交软件，不过桌面端应用已经能够满足需求，我没有进一步尝试。</p><h3 id="学习：★★★★★"><a href="#学习：★★★★★" class="headerlink" title="学习：★★★★★"></a>学习：★★★★★</h3><p>网课方面，这几天我没有用到腾讯会议，据群友说很好用；学习通这种网页不必赘述。</p><p>如果要做笔记，微软自带的 <strong>UWP 版本</strong> OneNote 比较好用，但是不如通过拉取商店安装包，直接安装即可使用的三星笔记。前些日子微软宣布 GoodNotes 将在 2023 年登录 Windows，如果届时体验与 iOS 相近，Surface Pro X 估计能直接成为笔记首选。Android 也有强大的笔记软件阵容，比如享做笔记和三星笔记平板版本，但是由于虚拟机引入延迟，体验非常糟糕，而且 WSA 没有做手写笔按键支持，甚至长按都无法识别，体验非常糟糕，还是老老实实 UWP 吧。</p><p>至于 PDF 浏览，Windows 上有全功能 Acrobat，Adobe 说运行 x64 版本即可，安装过程中可能有奇怪报错，不影响安装，使用没有问题。</p><p>日常学习中，我偶尔还会用 Wolfram 家族做一点简单计算，网页版 Wolfram Alpha 和 Wolfram Cloud 以及 x64 转译的 Wolfram Engine 都能顺利运行。</p><p>总之，将 Surface Pro X 作为学习工具是我购入它的主要目的之一，事实证明它可以出色完成。</p><h3 id="影音：★★★★"><a href="#影音：★★★★" class="headerlink" title="影音：★★★★"></a>影音：★★★★</h3><p>我使用影音软件主要是：①播放 Bilibili 视频；②听网易云音乐；③听 Apple Music。这三者表现都很好，下面一个一个说。</p><p>Bilibili 网页端只能调用 B 站自己做的 WASM 软解，CPU 直接跑满，非常不建议网页，更推荐用 Microsoft Store 能搜到的 Bilibili UWP 版客户端，功能全面、支持硬解、符合平板操作逻辑，好评。</p><p>网易云音乐只提供桌面版客户端，于是我找来了 <a href="https://github.com/JasonWei512/NetEase-Cloud-Music-UWP-Repack">网易云音乐 UWP 不更新版</a> ，部分 API 已被弃用，测试下来必须通过 QQ 登录才能登上，好在听歌没问题。</p><p>Apple Music 我习惯使用 Android 版，WSA 推出那天已经在电脑上装好，体验无比优异，并且 Apple Music 的 Android 端还做了平板适配，不亚于 iOS。</p><h3 id="开发：★★★★"><a href="#开发：★★★★" class="headerlink" title="开发：★★★★"></a>开发：★★★★</h3><p>拿到 Surface Pro X 不久之后，完全支持 ARM 的 Visual Studio 2022 正式发布，对于 VS 用户，或者企图在 ARM 设备上用原生工具链编译原生应用的开发者来说都是个好消息。不过很可惜，我不是 Visual Studio 用户，没有对它进行详细测试，仅在编译 PyTorch 时体验了一把 MSVC，能用。有一点值得注意，即便有 ARM 版 MSVC，x86 &#x2F; x64 版 MSVC 仍然是 C++ 开发必备依赖，一旦卸载会带着所有 C++ 相关组件一起自杀，非常迷惑。</p><p>我主要熟悉 Visual Studio Code 和 Android Studio。前者和 Typora 一样基于 Electron，支持起来毫无压力，官方早就提供了 ARM64 版本安装包，插件也没大问题。Android Studio 只提供 x64 版本，但它基于 IntelliJ IDEA，理论上可以手动替换运行时，比如微软提供的 <a href="https://www.microsoft.com/openjdk">ARM64 版 OpenJDK</a> 。初步尝试发现，用来编译不错，将它作为 AS 运行时后快捷方式无法启动，需要通过 AS 安装目录下的 <code>studio.bat</code> 打开。此外，OpenJDK 17 会报缺少 <code>sun.awt</code> ，得用 OpenJDK 11。AS 默认安装的模拟器及镜像是 x64 版本，在没有支持 ARM64 的情况下倒是合理，可是这不是明摆着坑人来的吗…尝试启动虚拟机会直接报 terminated，考虑到虚拟机针对 x86 设计倒也合理，好在 <code>adb</code> 正常，至少能使用 WSA 或者 USB 连接移动设备进行调试。</p><p>一些小工具补充在这里。Git for Windows、Gpg4win、win-gpg-agent 和 Snipaste 都不提供 ARM 版本，好在它们足够轻量，转译没什么压力。微软官方的 PowerToys 不用多说，早做好了 ARM 适配。Syncthing 本体提供 ARM64 版本，Windows 下的工具 SyncTrayzor 却没有，只能自己手动将 Syncthing 塞进开机启动，没有桌面通知和托盘图标告知同步进度，还得全局启用传统终端才能保证它不会一直挂着一个终端窗口…用起来没毛病，不挑剔了。</p><h3 id="杀-毒：★"><a href="#杀-毒：★" class="headerlink" title="杀  毒：★"></a>杀  毒：★</h3><p>高调宣布支持 Windows on ARM 的杀毒软件，只有金山毒霸一家。告辞！</p><p>说实话，针对 x86 设计的病毒跑在转译没什么影响力，针对 ARM 设计的病毒极少，「杀毒」这件事本身并没有太大必要。我主要是馋火绒的访问控制、火绒剑等等附加功能，能顺便干掉吃性能的 Windows Defender 就更好了，希望火绒尽快跟进。</p><h3 id="深-度-学-习：★"><a href="#深-度-学-习：★" class="headerlink" title="深 度 学 习：★"></a>深 度 学 习：★</h3><p>不会真有人想在 ARM 设备上跑深度学习吧？</p><p><img src="ahh.jpg" alt="啊？"></p><p>嘛…倒不是不可以。微软的 <a href="https://github.com/microsoft/DirectML">DirectML</a> 明说支持 Adreno 600 及以上 GPU，只需要调用 DirectML 就能在这台 Surface Pro X 上跑深度学习。既然如此，先用 AI 画个 <del>色</del> 图？很不巧，Stable Diffusion 依赖 PyTorch 运行，PyTorch 暂时不支持 Python 3.11，Python 3.11 以前的 Python 都不提供 Windows on ARM 版。参照 <a href="https://github.com/pytorch/pytorch#releases-and-contributing">README</a> ， PyTorch 大版本更新周期为 90 天，最近一次更新是 10 月 28 日的 <a href="https://pytorch.org/blog/PyTorch-1.13-release/">PyTorch 1.13</a> ，即使它在下一个大版本更新时能加入 Python 3.11 支持，那也得明年。为了顺利安装 PyTorch，我施加了大量手撕魔法，还在群友们的帮助下，准备向 PyTorch 提交 PR。这一部分写进本文那可太长了，因此我打算另开一文，详细讲讲怎么在 WoA 上跑 Stable Diffusion（如果跑得起来）。要在这里给出总结的话，从写下到发布这篇文章，我全程都在徒劳地尝试用 Surface Pro X 编译相关库，所谓「一杯茶、一包烟，一个指令跑一天」，体验可想而知。</p><h3 id="工-业-软-件"><a href="#工-业-软-件" class="headerlink" title="工 业 软 件"></a>工 业 软 件</h3><p>这一部分应群友要求测试，我暂时没有使用本节提及软件的需求，因此只能简单测试下基础功能，仅供参考。</p><p>嘉立创 EDA 专业版重度依赖网页组件，跑起来没有问题，能够正常激活、编辑及预览，唯一问题是我不会用；Altium Designer 22 可以用，不过会比较卡；Autodesk AutoCAD 2023 完全不能用，进去预览部分是花的，不知道原因，需要用 AutoCAD 的话还是考虑 x86 机器吧。</p><h3 id="游戏：★★★"><a href="#游戏：★★★" class="headerlink" title="游戏：★★★"></a>游戏：★★★</h3><p>这话题可非常复杂。市面上游戏种类众多，从 3A 大作到轻量小游戏，游戏引擎花样百出，加上 WSA 进一步扩充游戏库，不可能穷尽所有游戏，我只能根据接触到的游戏种类，在此提供一点参考。</p><p>首先排除各类通过注入驱动来反作弊的网游，比如原神、崩坏 3 和 LOL。它们驱动都是为 x86 系统准备，所以非常遗憾，到此为止。</p><p>既然是平板，那不得不提 Galgame。测试中，基于 Kirikiri 和 Ren&#39;Py 的游戏毫无兼容性问题，直接打开即可游玩。然而，可能是受限于 SQ1 孱弱的性能，《魔法使之夜》在复杂场景掉帧严重，尤其是游乐园之战高潮部分，连文字都卡成 PPT，查看占用发现 CPU、GPU 和内存占用率都不高，估计是单核性能受限，加上系统调度或者游戏优化不佳导致。好在对性能要求如此高的 Kirikiri 游戏，估计仅此一家。Ren&#39;Py 打开时有一段漫长等待时间，在没有安装 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=8109">DirectX 运行时</a> 的情况下运行起来较为流畅，除动画场景掉帧外，体验甚至优于 LG Gram，安装后更是丝滑一大截。此外，Kirikiri 和 Ren&#39;Py 都是开源引擎，Ren&#39;Py 游戏还自带一份 Python 环境，可以自编译或者将 x86 &#x2F; x64 环境替换为原生 ARM64 以获得更高性能，不换跑起来没问题，所以我没进一步尝试。</p><p>尝到一点甜头之后，我又把目光转向了触控笔。有 WSA 有触控，用来玩音游岂不美哉？事实却没有这么美好。Windows 游戏，《Muse Dash》体验不错，掉帧少，延迟约在 60ms 左右，可以接受，问题是触屏会卡住；《osu!》没这么幸运，疯狂掉帧，触控笔也没想象中好用，举着它指屏幕挡视野不说，手臂绝对会先受不住，即使复制一份屏幕出来，SPX 的尺寸并不适合长时间在上面挥手。WSA 寄中寄，由于要经过一层虚拟机，触控延迟本来就高，这下被进一步放大，渲染压力小的音游（比如《Phigros》）怎么调都让人难以适应，据说 Linux 下用 Waydroid 会好很多，可惜那会偏离本文主题。渲染压力大的呢？</p><p>当然更不可能。WSA 图形效率很低，什么游戏都得卡。《明日方舟》切换界面时会带着整个系统一起卡，连系统音频输出都会爆炸，稳定下来后也很难满帧运行，更别说其它要求更高的 Android 游戏了。高通驱动和微软转译至少有一个背锅，考虑到即使是 5600x + 2060 都跑不动 WSA《明日方舟》，很有可能这俩都要背锅。可惜 ARM 端目前除 WSA 和部分开发用虚拟机外，没有像 Bluestacks 那种专为游戏设计的虚拟机，期待出现后会稍微好一点。</p><p>接下来是怀旧时间——《东方风神录》在测试中表现非常好，全程跑满 60 帧，预计整个东方系列都会表现不错。</p><p>整体看来，在「轻薄本不会用来玩大型游戏」的前提下，Windows on ARM 交出的答卷还过得去。其他游戏，在短暂体验中没来得及详细测试，而且我手上这台 SPX 只有 256GB SSD，塞满开发中间体时没办法测试太多，据前任机主说，《CS:GO》跑到 60 帧上下，能玩。很巧，拿到 SPX 不久后， <a href="https://github.com/doitsujin/dxvk">DXVK</a> 发布了 2.0 大版本更新。日后如果有时间，我会再深入研究研究 DXVK 配合 Windows on ARM 的游戏性能，顺便测测更多游戏，不过那就是另一篇文章的事情了。</p><h2 id="ARM-Windows，路在何方"><a href="#ARM-Windows，路在何方" class="headerlink" title="ARM + Windows，路在何方"></a>ARM + Windows，路在何方</h2><p>现在，这篇碎碎念终于进入最后阶段，按照惯例，该装模作样地展望一下。</p><p>Windows on ARM 已经足够好用，却还有一些不可忽视的问题。它们有些是因为微软和（尤其是）高通不作为，有些是因为社区缺乏活力，更多则是这二者的叠加。目前，大部分 WoA 用户可能只是浅尝辄止，因为赚钱家伙用不爽；之所以用不爽，一部分是高通芯片性能太差驱动不行，一部分是用户基数小屎山高开发者懒得适配，另一部分则是微软作为开发者背刺狂魔，推广什么都让人不敢冒进。性能、驱动差，适配应用少，又进一步让用户望而却步；如此循环往复下去，未来 WoA 越来越小众，说不定最后沦为另一个 Windows Phone。</p><p>但是，如果像微软现在说的那样，ARM 真要成为未来，那任重而道远。微软的决心大家有目共睹，只是 Windows 不像 Linux 和 macOS，后二者推广 ARM 几乎没有阻力、没有历史包袱，而 Windows 在兼容性拖累下积重难返，拥抱 ARM 也依旧有大量 x86 历史残留。例如，前文提到 PyTorch 的小问题，主要原因是默认运行 MSVC 一定是 x86 设备，直接调用了一条 ARM 不存在的 CPU 指令，一跑就炸。这样的代码多如牛毛，靠一个人、一个组织很难解决，需要活跃的开发者群体、Windows on ARM 进一步普及，以及足够长的时间。此外，ARM 阵营除苹果外，至今仍没有其他玩家拿出强力芯片，WoA 设备还只能由高通造 SoC，同时 x86 生态硬件（比如显卡）在 WoA 上没有驱动、无法运行——性能上起不来，ARM 取代 x86 更加遥遥无期。</p><p>ARM 到底是未来吗？很难断定。它可能在很长时间内与 x86 共存，可能再过几年就退出历史舞台。这几天使用下来，被动散热、长续航和轻薄兼具的 Surface Pro X 给我留下了不错的印象，希望 WoA 能走得再久一点，希望我能看到 ARM 真正站起来，看到我可以不再当一个吃螃蟹的人，而是像普通用户那样，从来如此般使用 Windows on ARM 的那一天。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;故事开始，还得从 2020 年 11 月苹果发布会说起。那天，M1 芯片正式发布 ，将 ARM 芯片的笔记本电脑带入寻常百姓家，以超高能效和超长续航一举成名，彻底改变大家对 ARM 的印象。偷偷嘲讽 Mac 用户没游戏玩时，我内心不免好奇：这是什么来自西方的神秘魔法？ARM 桌面处理器居然这么神奇？？直到那时，搭载 ARM 处理器的 Windows 设备才正式进入我的视野。&lt;/p&gt;
&lt;p&gt;然而，苹果对于穷学生来说实在是太遥不可及，当时我才刚入手 LG Gram 五个月，对它抱有相当好感，再加上各种渠道听说 ARM Windows 笔记本搭载的 &lt;ruby&gt;&lt;rb&gt;WoA&lt;/rb&gt;&lt;rt&gt;Windows on ARM&lt;/rt&gt;&lt;/ruby&gt; 还是个半成品，不适合作为主力，于是萌生的想法被搁置，一拖直接拖到苹果发布会两年后的另一个 11 月。当我发现 LG Gram 二手价格已经跌到不堪入目，我的笔记本使用需求逐渐轻量到「能办公就行」，我知道是时候做出改变，拥抱一点新东西了。心一横，一天后到手一台 Surface Pro X，本文则是对我和它磨合过程中，写下的一点记录与思考。&lt;/p&gt;
&lt;h2 id=&quot;太长不看：能用了吗？&quot;&gt;&lt;a href=&quot;#太长不看：能用了吗？&quot; class=&quot;headerlink&quot; title=&quot;太长不看：能用了吗？&quot;&gt;&lt;/a&gt;太长不看：能用了吗？&lt;/h2&gt;&lt;p&gt;能用了，甚至很好用。许多软件都提供 ARM 支持，x64 软件通过转译也能正常运行，除 Canon 的打印驱动外几乎没有不兼容。这里是常用软件及 Windows on ARM 体验对照表，后面 &lt;a href=&quot;#%E4%BD%A0%E8%BF%99%20windows%20%E5%B9%B3%E6%9D%BF%E5%A5%BD%E7%94%A8%E5%90%97%EF%BC%9F&quot;&gt;体验&lt;/a&gt; 部分有各种场景的综合体验评分，可以作为参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="系统" scheme="https://blog.rachelt.one/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="ARM" scheme="https://blog.rachelt.one/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>优雅地在 WSL 1 上使用 CanoKey 进行 PGP 认证</title>
    <link href="https://blog.rachelt.one/articles/using-canokey-and-gpg-with-wsl-1/"/>
    <id>https://blog.rachelt.one/articles/using-canokey-and-gpg-with-wsl-1/</id>
    <published>2022-06-26T09:38:25.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>六月初，苦苦等待许久的 CanoKey Pigeon 终于上线第二批，拿到之后，我非常兴奋地用它绑定了一大堆常用网站的 <ruby><rb>两步验证</rb><rt>2 Factor Authorization (2FA)</rt></ruby> ，折腾半天后发现一个问题：如果对 OpenPGP 和 PIV 没有需求，仅仅把它作为 2FA 工具使用，我好像还不如直接用 Apple Watch 上的 Authy 来得安全、方便。</p><p>而且我有很多个理由拒绝 OpenPGP &#x2F; PIV。两者在不同平台上需要各种配置，至少对于坚定的 Windows + WSL 用户如此；文件形式密钥备份起来非常不方便，尤其是出于安全性考虑，还有多介质备份 + 脱机条件一次性操作 + 主密钥、三个子密钥、撤销凭证备份、有效期、使用方法不同等等要求；各种操作都需要不同长度、不同作用的 PIN，我能记住超过三个 PIN 就很不错了，可能对于许多用户，需要的密码越多，越可能使用雷同密码或弱密码；最重要的是无法保证跨平台可用性，万一某一天出门在外突然有认证需求，却只有 iOS 设备，那直接完蛋；比起记住一次到处通用，数据、设备全部丢失也不会掉的密码（体系），实在是脆弱、复杂太多。</p><p>但当我百无聊赖坐在电脑前，望向放在桌上吃了两周灰的 CanoKey，我又感觉可以试试看。就算不把它作为主要认证方式，至少玩玩看嘛。于是，在我花费大半个上午生成 key，再将 Windows 的 <code>gpg-agent</code> 塞进不支持访问 USB 设备更别说 CanoKey 的 WSL 1 之后，我写下这篇文章作为记录，以便此后能随时回顾，希望能帮助到同样有需求的人。</p><span id="more"></span><blockquote><p><strong>⚠注意⚠</strong> ：本文记录的方法仅推荐在可信系统上使用。任何情况下，跨系统共用私钥的行为都具有较大的安全隐患。若您有强烈的安全性需求，请您关闭本文，不考虑在 WSL 中使用 CanoKey，并 &#x2F; 或安装一个单独的 Linux 系统。</p></blockquote><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>关于如何将 CanoKey 变成存储密钥的智能卡，已经有许多资料，本文不再赘述。我参照是 Editst 大佬的 <a href="https://editst.com/2022/canokey-guide/">Canokey 指南：FIDO2，PGP 与 PIV</a> ，在 Windows 中安装好 <a href="https://gpg4win.org/download.html">Gpg4win</a> 和 <a href="https://github.com/rupor-github/win-gpg-agent">win-gpg-agent</a> ，将三个子密钥写入了 CanoKey。对 OpenPGP 还有疑问的话，也可以参考 UlyC 的 <a href="https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/">2021年，用更现代的方法使用PGP</a> 系列教程。</p><p>继续前，请确认在 Windows 的 PowerShell 中输入 <code>gpg --card-status</code> 能够正常输出 CanoKey 中存储的，用于签名、加密和认证的三个 key、指纹及 ID。</p><h2 id="SSH-in-WSL-1"><a href="#SSH-in-WSL-1" class="headerlink" title="SSH in WSL 1"></a>SSH in WSL 1</h2><p>启动 <code>agent-gui.exe</code> 后，在 PowerShell 中，输入 <code>ssh-add -L</code> ，应当能够看到如图所示的信息：</p><pre><code class="highlight powershell"><span class="built_in">PS</span> C:\Users\Rachel&gt; ssh<span class="literal">-add</span> <span class="literal">-L</span>ssh<span class="literal">-ed25519</span> AAAAC3NzaC1lZDI1NTE5AAAAIP5ZT7970edpOEIoZTR7JaPdHNNKxmHG4qrHnz68BzSg cardno:F1D0 XXXXXXXX</code></pre><p>输出的这一行是 CanoKey 中 OpenPGP 附带的 SSH 公钥，如 <a href="https://editst.com/2022/canokey-guide/">Canokey 指南：FIDO2，PGP 与 PIV</a> 中所说，将其塞进服务器、GitHub 之类的地方，每当调用对应的私钥时，输入 PIN、触摸 CanoKey（如果启用了 <a href="https://console.canokeys.org/">CanoKey Management Tool</a> 中 OpenPGP 的 Touch Policies）即可授权 SSH 访问。</p><p>这是在 Windows 下。WSL 1 倒也大差不差，只需将 SSH 的认证交给 <code>agent-gui.exe</code> 提供的 socket 即可：</p><p>首先确保 WSL 1 中存在 SSH，一般都有，没有的话 <code>sudo apt update &amp;&amp; sudo apt install openssh-client</code> （以 Debian 系为例）也能解决问题。</p><p>打开 Windows 托盘栏中的 <code>agent-gui</code> 的 Status，里面应该有一个 agent-gui AF_UNIX and Cygwin sockets directory ，它下面的文件夹，通常是 <code>%LocalAppData%\gnupg\agent-gui</code> ，有数个不同用途的 <code>gpg-agent</code> ，其中 <code>S.gpg-agent.ssh</code> 即为我们要找的 <code>SSH_AUTH_SOCK</code> 。在我的例子中，我的用户名为 <code>Rachel</code> ，<code>%LocalAppData%\gnupg\agent-gui\S.gpg-agent.ssh</code> 对应的文件是 <code>C:\Users\Rachel\AppData\Local\gnupg\agent-gui\S.gpg-agent.ssh</code> ，转换到 WSL 下就是 <code>/mnt/c/Users/Rachel/AppData/Local/gnupg/agent-gui/S.gpg-agent.ssh</code> 。试试看吧！</p><pre><code class="highlight bash">$ <span class="built_in">export</span> SSH_AUTH_SOCK=/mnt/c/Users/Rachel/AppData/Local/gnupg/agent-gui/S.gpg-agent.ssh$ ssh-add -Lssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP5ZT7970edpOEIoZTR7JaPdHNNKxmHG4qrHnz68BzSg cardno:F1D0 XXXXXXXX</code></pre><p> 输出的公钥与 Windows 下一致，说明没有问题。现在，如果已经将这个公钥添加到 GitHub 的公钥库，可以试试看：</p><pre><code class="highlight bash">$ ssh -T git@github.comHi Rachel! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></code></pre><p>一切 OK。</p><h2 id="GnuPG-in-WSL-1"><a href="#GnuPG-in-WSL-1" class="headerlink" title="GnuPG in WSL 1"></a>GnuPG in WSL 1</h2><p>相比 SSH，GPG 的配置有亿点点坑。</p><h3 id="那你能帮帮我吗？"><a href="#那你能帮帮我吗？" class="headerlink" title="那你能帮帮我吗？"></a>那你能帮帮我吗？</h3><p>相比 <code>openssh</code> ， <code>gnupg</code> 和 <code>socat</code> 不一定安装在所有系统中，所以我们先确定他俩都在： <code>sudo apt update &amp;&amp; sudo apt install gnupg socat</code> （以 Debian 系为例）。</p><p>GnuPG 无需多言， <code>socat</code> 是一个 Linux 下的多用途中继工具，可以连接到文件、设备、pipe、socket 等，我们需要使用它监听对 WSL 下 <code>S.gpg-agent</code> 的访问，并转发至 <code>agent-gui</code> 提供的 <code>S.gpg-agent</code> ：</p><pre><code class="highlight bash">$ [ -f <span class="string">&quot;/home/rachel/.gnupg/S.gpg-agent&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Deleting old GPG agent..&quot;</span> &amp;&amp; <span class="built_in">rm</span> <span class="string">&quot;/home/rachel/.gnupg/S.gpg-agent&quot;</span> || [ -d <span class="string">&quot;/home/rachel/.gnupg&quot;</span> ] || <span class="built_in">mkdir</span> /home/rachel/.gnupg &amp;&amp; <span class="built_in">chmod</span> 700 /home/rachel/.gnupg$ socat UNIX-LISTEN:/home/rachel/.gnupg/S.gpg-agent,fork UNIX-CONNECT:/mnt/c/Users/Rachel/AppData/Local/gnupg/agent-gui/S.gpg-agent &amp;</code></pre><p>这两句命令，第一句是检测用户目录下是否存在 GnuPG 生成的 <code>S.gpg-agent</code> ，若有则将其删除（否则 <code>socat</code> 无法创建自己的监听），否则检测是否有 GnuPG 目录，没有则创建 + 设置对应权限。</p><p>第二句是使用 <code>socat</code> 开始监听 Linux 下 GnuPG 自动生成的 <code>S.gpg-agent</code> ， <code>fork</code> 是监听多次访问，然后 <code>UNIX-CONNECT</code> 转发至 <code>agent-gui</code> 创建的 <code>S.gpg-agent</code> 。行末的 <code>&amp;</code> 将 <code>socat</code> 放入子线程中异步运行，防止阻塞当前 shell。</p><p>此时，在 WSL 1 中调用 <code>gpg</code> 看看吧：</p><pre><code class="highlight bash">$ gpg --card-statusReader ...........: canokeys.org OpenPGP PIV OATH 0（省略一长串 CanoKey 信息）</code></pre><p>成功！不过我们只是读取了 CanoKey，还没有导入密钥，如果现在 <code>git commit -S</code> ，很可能会提示</p><pre><code class="highlight bash">$ git commit -Serror: gpg failed to sign the datafatal: failed to write commit object</code></pre><p>要解决也很简单，跟着 <a href="https://editst.com/2022/canokey-guide/">Canokey 指南：FIDO2，PGP 与 PIV</a> 来，我们更新本地的密钥库，首先导入公钥：</p><pre><code class="highlight bash">$ gpg --import public-key.pubgpg: key XXXXXXXXXXXXXXXX: public key <span class="string">&quot;Rachel T &lt;13704467+Rachel030219@users.noreply.github.com&gt;&quot;</span> imported</code></pre><p>从 CanoKey 导入私钥：</p><pre><code class="highlight bash">$ gpg --edit-cardReader ...........: canokeys.org OpenPGP PIV OATH 0（省略一长串 CanoKey 信息）gpg/card&gt; fetchgpg/card&gt; q</code></pre><p>接下来，我们使用 <code>gpg --fingerprint --keyid-format long -K</code> 查看签名 key 的 ID：</p><pre><code class="highlight bash">$ gpg --fingerprint --keyid-format long -K/home/rachel/.gnupg/pubring.kbx-------------------------------sec<span class="comment">#  ed25519/XXXXXXXXXXXXXXXX 2022-06-26 [C]</span>      Key fingerprint = (主密钥指纹)uid                 [ unknown] Rachel T &lt;13704467+Rachel030219@users.noreply.github.com&gt;ssb&gt;  cv25519/EEEEEEEEEEEEEEEE 2022-06-26 [E]ssb&gt;  ed25519/AAAAAAAAAAAAAAAA 2022-06-26 [A]ssb&gt;  ed25519/SSSSSSSSSSSSSSSS 2022-06-26 [S]</code></pre><p><code>[S]</code> 前 <code>ed25519/</code> 后的十六个字符是签名 key 的 ID，将它设置为 <code>git</code> 的签名 key，再 <code>git commit -S</code> 看看：</p><pre><code class="highlight bash">$ git config --global user.signingkey SSSSSSSSSSSSSSSS$ git commit -S</code></pre><p>现在应该没有问题了。</p><h3 id="这么简单，有什么坑？"><a href="#这么简单，有什么坑？" class="headerlink" title="这么简单，有什么坑？"></a>这么简单，有什么坑？</h3><p>首先，由于我英语及 Linux 水平糟糕，可能没能正确意会 <a href="https://github.com/rupor-github/win-gpg-agent">win-gpg-agent 的 GitHub README</a> ，但一开始不会 <code>socat</code> 的我，确实没有找到一个 WSL 1 能直接用的办法，只在 <code>sorelay.exe</code> 下看到一个给 WSL 2 用的、利用到 <code>socat</code> 的 socket 转换，这也是我最终找到办法的来源、写下本文的直接原因。</p><p>其次，如 <a href="https://github.com/rupor-github/win-gpg-agent/issues/5">win-gpg-agent 的 issue #5</a> 所说，理论上可以将 <code>GNUPGHOME</code> 设置为指向 <code>%LocalAppData%</code> 下的 <code>gnupg</code> 文件夹，或者使用软链接 <code>ln -s</code> 使 <code>~/.gnupg</code> 指向那个 <code>gnupg</code> ，但在我的测试中，不仅由于链接及文件系统的限制，始终没能成功修改 <code>.gnupg</code> 或 <code>GNUPGHOME</code> 文件夹及文件的权限，导致 GnuPG 一直报 WARNING，而且一通操作下来，我也没能使 <code>gpg --card-status</code> 正确显示 CanoKey 信息，浪费许多时间。</p><p>最后，理论上应当将 WSL 1 下的 <code>pinentry</code> 由 <code>win-gpg-agent</code> 提供的 <code>pinentry.exe</code> 接管，也就是在 <code>~/.gnupg/gpg-agent.conf</code> 中加入 <code>pinentry-program /(win-gpg-agent 的存放路径)/pinentry.exe</code> ，不过经过测试，即使没有指定 <code>pinentry</code> 也没问题，弹出的是 Windows 风格的 PIN 输入框，所以大概问题不大…吧？</p><h2 id="最后，来点自动"><a href="#最后，来点自动" class="headerlink" title="最后，来点自动"></a>最后，来点自动</h2><p>如果以上操作都没有问题，我们可以让一系列操作自动完成。</p><p>对于 <code>agent-gui.exe</code> ，我们创建一个快捷方式，将快捷方式放到自启动文件夹 <code>%AppData%\Microsoft\Windows\Start Menu\Programs\Startup</code> ，每次开机都会自动启动。</p><p>然后，我们将 SSH 和 GPG 的配置都加入 WSL shell 的 rc 文件，比如 <code>.bashrc</code> 中：</p><pre><code class="highlight bash"><span class="built_in">export</span> SSH_AUTH_SOCK=/mnt/c/Users/Rachel/AppData/Local/gnupg/agent-gui/S.gpg-agent.ssh[ -f <span class="string">&quot;/home/rachel/.gnupg/S.gpg-agent&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Deleting old GPG agent..&quot;</span> &amp;&amp; <span class="built_in">rm</span> <span class="string">&quot;/home/rachel/.gnupg/S.gpg-agent&quot;</span> || [ -d <span class="string">&quot;/home/rachel/.gnupg&quot;</span> ] || <span class="built_in">mkdir</span> /home/rachel/.gnupg &amp;&amp; <span class="built_in">chmod</span> 700 /home/rachel/.gnupgsocat UNIX-LISTEN:/home/rachel/.gnupg/S.gpg-agent,fork UNIX-CONNECT:/mnt/c/Users/Rachel/AppData/Local/gnupg/agent-gui/S.gpg-agent &amp;</code></pre><p>复制粘贴时，务必修改上面命令行的用户文件夹。</p><p>最后，我们开启 <code>git commit</code> 默认 GPG 签名：</p><pre><code class="highlight bash">$ git config --global commit.gpgsign <span class="literal">true</span></code></pre><p>如此，我们完成了 WSL 1 环境下 CanoKey 的 OpenPGP 配置。</p><hr><h4 id="参考与感谢"><a href="#参考与感谢" class="headerlink" title="参考与感谢"></a>参考与感谢</h4><p>除本文内提到的数篇文章外，在撰写本文的过程中，我还得到了以下（及其它可能未及时记录的）内容的帮助，在此一并表示感谢。</p><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection">Testing your SSH connection - GitHub</a></p><p><a href="https://www.redhat.com/sysadmin/getting-started-socat">Getting started with socat, a multipurpose relay tool for Linux | Enable Sysadmin</a></p><p><a href="https://stackoverflow.com/questions/9596594/why-is-fork-needed-by-socat-when-connecting-to-a-web-server">Why is &quot;fork&quot; needed by socat when connecting to a web server?</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;六月初，苦苦等待许久的 CanoKey Pigeon 终于上线第二批，拿到之后，我非常兴奋地用它绑定了一大堆常用网站的 &lt;ruby&gt;&lt;rb&gt;两步验证&lt;/rb&gt;&lt;rt&gt;2 Factor Authorization (2FA)&lt;/rt&gt;&lt;/ruby&gt; ，折腾半天后发现一个问题：如果对 OpenPGP 和 PIV 没有需求，仅仅把它作为 2FA 工具使用，我好像还不如直接用 Apple Watch 上的 Authy 来得安全、方便。&lt;/p&gt;
&lt;p&gt;而且我有很多个理由拒绝 OpenPGP &amp;#x2F; PIV。两者在不同平台上需要各种配置，至少对于坚定的 Windows + WSL 用户如此；文件形式密钥备份起来非常不方便，尤其是出于安全性考虑，还有多介质备份 + 脱机条件一次性操作 + 主密钥、三个子密钥、撤销凭证备份、有效期、使用方法不同等等要求；各种操作都需要不同长度、不同作用的 PIN，我能记住超过三个 PIN 就很不错了，可能对于许多用户，需要的密码越多，越可能使用雷同密码或弱密码；最重要的是无法保证跨平台可用性，万一某一天出门在外突然有认证需求，却只有 iOS 设备，那直接完蛋；比起记住一次到处通用，数据、设备全部丢失也不会掉的密码（体系），实在是脆弱、复杂太多。&lt;/p&gt;
&lt;p&gt;但当我百无聊赖坐在电脑前，望向放在桌上吃了两周灰的 CanoKey，我又感觉可以试试看。就算不把它作为主要认证方式，至少玩玩看嘛。于是，在我花费大半个上午生成 key，再将 Windows 的 &lt;code&gt;gpg-agent&lt;/code&gt; 塞进不支持访问 USB 设备更别说 CanoKey 的 WSL 1 之后，我写下这篇文章作为记录，以便此后能随时回顾，希望能帮助到同样有需求的人。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="PGP" scheme="https://blog.rachelt.one/tags/PGP/"/>
    
    <category term="CanoKey" scheme="https://blog.rachelt.one/tags/CanoKey/"/>
    
    <category term="YubiKey" scheme="https://blog.rachelt.one/tags/YubiKey/"/>
    
  </entry>
  
  <entry>
    <title>刷写 vBIOS 途中断电，我的自救复盘</title>
    <link href="https://blog.rachelt.one/articles/saving-a-vbios-corrupted-gpu/"/>
    <id>https://blog.rachelt.one/articles/saving-a-vbios-corrupted-gpu/</id>
    <published>2022-05-19T17:37:13.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>a.k.a. 《一个学生不带脑子刷 vBIOS，这是他的显卡发生的变化》</p></blockquote><h2 id="太长不看："><a href="#太长不看：" class="headerlink" title="太长不看："></a>太长不看：</h2><p>若 N 卡在刷 vBIOS 的过程中遭遇意外断电，随后主板自检反复重启，例如 DRAM - CPU - VGA 灯轮流亮，请寻找 <strong>能够亮机并且拥有 PCIe 槽的设备</strong> ，例如使用核显、亮机卡或者雷电接口显卡坞，开机过程中按住 Esc + C 进入 Windows 安全模式（或任意恢复系统，至少要阻止 NVIDIA 驱动加载），确定设备管理器中列出了损坏的显卡，再使用 nVFlash 刷回 <strong>备份的原 vBIOS</strong> 。</p><p>如果没有核显，则可能需要将坏卡接在主板的副 PCIe x16 槽位上。我将亮机卡接在副槽上时，主槽上接坏卡则仍然会反复重启；交换后才能正常启动。</p><p>如果亮机卡也是 N 卡，在刷写原 vBIOS 时需要手动指定设备序号：首先执行 <code>nvflash64.exe --list</code> ，此时应当会出现一个列表，其中格式如下：</p><span id="more"></span><pre><code class="highlight plaintext">&lt;0&gt; Graphics Card:XXXX……&lt;1&gt; 亮机卡型号:XXXX……</code></pre><p>这其中没有型号的显卡就是我们要救的卡，它的 index 此时为 0，假设备份的文件是 <code>XXX.rom</code> ，执行 <code>nvflash64.exe --index=0 -6 XXX.rom</code> 即可。</p><p>如果没有备份原 vBIOS，或者设备管理器 &#x2F; <code>nvflash64.exe --list</code> 中没有看到显卡，则推荐寻求显卡制造商的帮助。</p><h2 id="吃了什么堑"><a href="#吃了什么堑" class="headerlink" title="吃了什么堑"></a>吃了什么堑</h2><p>接下来就是更加琐碎的部分：整件事的复盘。我会将 <strong>一些关键步骤</strong> 标记出来，并且附上相应的解释，希望至少能让我自己记住哪些应该多做，哪些应该尽量避免。</p><p>前几天换掉原来用的丐 ATX 机箱，投入了先马趣造的怀抱。把所有线材一通乱理、机箱往桌面一搁，折腾完毕后烤机看散热时，我发现一个此前因为机箱在桌下而感受不到的问题：这玩意儿太 ** 吵了！</p><p>一通排查后发现，显卡的风扇控制不太妙。超过某个温度阈值后它直接满速狂飙，温度降到室温或者都停不住它的转动，必须完全断电再开机才能恢复到智能转速。MSI Afterburner、HWiNFO64 和 TechPowerUp GPU-Z 都没能读出风扇转速（一直为 0），尝试用 MSI Afterburner 控制时则会直接飙到满速。</p><p>于是 <strong>第一次犯傻</strong> ：我怀疑是不是这显卡，影驰 2060 大将，根本没有带风扇智能启停功能。毕竟这是一张丐版卡，资料都搜不到多少，我也做好了它没有带高级功能的准备。根据 <a href="https://www.chiphell.com/thread-1925230-1-1.html">Chiphell 上这篇帖子</a> 所述，似乎这一特性确实因 vBIOS 而异，所以我说干就干。</p><blockquote><p>事实上这并不是风扇智能启停的问题，而是风扇控制器的问题。负载低的情况下风扇转速是正常的，说明显卡至少还在自己控制转速，而为何转速高起来之后无法降下去，就是一个未解之谜了。</p></blockquote><p>到 <a href="https://www.techpowerup.com/vgabios/">TechPowerUp VGA Bios Collection</a> 上找好顺眼的 vBIOS 后，我非常理智地 <strong>使用 GPU-Z 备份好原有的 vBIOS</strong> ，随后进入带网络的安全模式，刷写新的 vBIOS 并且下好最新的 NVIDIA 驱动，使用 <a href="https://www.guru3d.com/files-details/display-driver-uninstaller-download.html"><ruby><rb>DDU</rb><rt>Display Driver Uninstaller</rt></ruby></a> 卸载系统上原有的驱动后重启，发现在安装驱动后显卡输出直接黑屏。</p><p>这当然不对劲嘛，还好我备份了一份 vBIOS，能直接刷回去。于是我如法炮制，重启到安全模式， <strong>第二次犯傻</strong> ：先使用 DDU 卸载并重启，卸到一半才意识到没有回刷 vBIOS 并慌忙开始刷。我 <strong>以为</strong> 驱动卸载会和此前一样耗时，而 vBIOS 只有 1MB 大，能够抢在重启前完成，没想到驱动没有完整安装，DDU 很快完成工作。当我意识到这一点时已经覆水难收，我看着 nVFlash 的进度条走到 20% 左右时突然黑屏，随后进入开头所述的重启循环。</p><p>眼看着对穷学生来说价格不菲的一张卡这样离我而去，我自然没有善罢甘休。我的 CPU 是不带核显的 5600X，显卡坞也已于数月前出掉，幸好此时主板上还有一根空闲的 PCIe 2.0x16 插槽（x4 速率、与第二根 M.2 冲突），并且出掉显卡坞前从家里拆来一张亮机卡 GT720 带来学校用于测试，它成了我唯一的希望。</p><p>我首先尝试将亮机卡插在这根空闲的副槽上，结果是无法启动，推测可能是 M.2 冲突，或者主槽的显卡没有拔掉。不管怎么样，要动第二根 M.2 就必须移除主槽的坏卡，所以我干脆直接连坏卡带硬盘一起去掉，然后见到了 1024x768 分辨率的熟悉锁屏界面。</p><p>此时「好耶」还太早，启动只是第一步，我还需要带着两块显卡一起启动。将坏卡插回主槽后，我再次尝试启动，结果又进入了重启循环。看起来之前插亮机卡不启动的问题很明确：主槽插着显卡的情况下，主板会尝试优先使用主槽显卡，若主槽显卡故障则不管副槽插没插卡都不会启动。</p><p>既然如此，只要是神志清楚的正常人都能想到：那我交换一下两张卡不就好？可惜， <strong>我的脑回路似乎有一点不正常</strong> ，我选择尝试 PCIe 热插拔。由于趣造是 ITX 大小的机箱，它下方没有留出额外空间，副槽插不下双槽高的显卡，要交换两张卡就必须拆出主板。「那也太麻烦了」，我心想，于是我先把亮机卡插入主槽启动进系统，试图 <strong>拔掉亮机卡并直接插入坏卡</strong> 。坏卡进槽的一瞬间，我看到了 PCIe 槽中打出的电弧。**我 *** 。</p><p>万幸，这张主板还算靠谱，这么折腾都没有坏，只是在打出电弧的一瞬间触发保护重启。不过我也不敢再来第二次，果断拆出主板，亮机卡插主槽坏卡插副槽，成功进入 Windows 安全模式。后续的操作很简单，确认设备管理器中认出显卡，确认 nVFlash 认出显卡，确认刷入 vBIOS 到坏卡，DDU 卸载驱动+重启，重新安装主板并理线，好耶！很有趣的是，这么一圈折腾下来，这破风扇控制器居然莫名其妙恢复了正常，真是咄咄怪事。</p><h2 id="长了什么智"><a href="#长了什么智" class="headerlink" title="长了什么智"></a>长了什么智</h2><p>要二次确认。不是说 <em>Yes, do as I say!</em> 这种很可能不会看的工具提示，即使 nVFlash 在刷写前提示我三次要不要继续，我依旧想都没想选 Yes；「二次确认」是指干什么要在脑子里想明白，确认风险概率极低（例如除非全寝断电否则不可能突然重启）再行动。</p><p>备份十分重要。没有此前备份的 vBIOS，我的显卡大概在刷到其他厂商的 vBIOS 后已经寄了。之前很多次数据丢失也是以为无害的操作，不知哪一天就会变成杀「机」利器。这也进一步让我产生配置一台 NAS，或者至少是阵列柜 &#x2F; 备份服务器的冲动。</p><p>要断电。热插拔显卡相较之下还算安全，至少最多干掉显卡不会干掉我，不过如果未来有朝一日我开着电修市电电路，可能送走的不只有一点钱，还要搭上我自己。</p><p>不要嫌麻烦。如果有看起来更麻烦但是怎么都更合理的选项，麻烦完全可以接受。因为「不合理」带来更多麻烦，那才是因小失大、自找麻烦。</p><p>没有了。希望我踩的坑能给读到这里的各位带来一点帮助。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;a.k.a. 《一个学生不带脑子刷 vBIOS，这是他的显卡发生的变化》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;太长不看：&quot;&gt;&lt;a href=&quot;#太长不看：&quot; class=&quot;headerlink&quot; title=&quot;太长不看：&quot;&gt;&lt;/a&gt;太长不看：&lt;/h2&gt;&lt;p&gt;若 N 卡在刷 vBIOS 的过程中遭遇意外断电，随后主板自检反复重启，例如 DRAM - CPU - VGA 灯轮流亮，请寻找 &lt;strong&gt;能够亮机并且拥有 PCIe 槽的设备&lt;/strong&gt; ，例如使用核显、亮机卡或者雷电接口显卡坞，开机过程中按住 Esc + C 进入 Windows 安全模式（或任意恢复系统，至少要阻止 NVIDIA 驱动加载），确定设备管理器中列出了损坏的显卡，再使用 nVFlash 刷回 &lt;strong&gt;备份的原 vBIOS&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;如果没有核显，则可能需要将坏卡接在主板的副 PCIe x16 槽位上。我将亮机卡接在副槽上时，主槽上接坏卡则仍然会反复重启；交换后才能正常启动。&lt;/p&gt;
&lt;p&gt;如果亮机卡也是 N 卡，在刷写原 vBIOS 时需要手动指定设备序号：首先执行 &lt;code&gt;nvflash64.exe --list&lt;/code&gt; ，此时应当会出现一个列表，其中格式如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="vBIOS" scheme="https://blog.rachelt.one/tags/vBIOS/"/>
    
    <category term="GPU" scheme="https://blog.rachelt.one/tags/GPU/"/>
    
    <category term="NVIDIA" scheme="https://blog.rachelt.one/tags/NVIDIA/"/>
    
    <category term="硬件" scheme="https://blog.rachelt.one/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>2022 年，使用 Windows Phone 7 天</title>
    <link href="https://blog.rachelt.one/articles/living-with-WP-for-7-days-in-2022/"/>
    <id>https://blog.rachelt.one/articles/living-with-WP-for-7-days-in-2022/</id>
    <published>2022-05-06T01:47:19.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>小众、多彩、塑料机身、Windows 内核、微软打造，在这些词条的加持下，我对 Lumia 的兴趣，早在《丧尸围城：瞭望塔》见到 Lumia 的身影，对 Lumia 1020 标志性的镜头模组印象深刻之前就已经产生。后来，Android 和 iOS 分庭抗礼，前者在一些方面越来越糟糕，这没能解决 Windows Phone 的颓势，却是我「润」到 Windows Phone 的首次冲动。直到前几天，在二手🐴看到一台崭崭新的 1020，我毫不犹豫果断下了单。</p><p>拿到手后才知道，这台设备没那么美好。它被排除在 Windows 10 更新列表外， <ruby><rb>Windows Phone</rb><rt>WP</rt></ruby> 8.1 的支持早已结束，它已经无法再通过设备内渠道获得软件更新，同时还存在诸多问题及 bug。尽管如此，我尝试了将它作为主力机七天，并将历程与感受记录如下，以期帮助每一个渴望踏入这个坑的人。</p><blockquote><p>本文全长约 5000 字，阅读约需 12 分钟，内含少量插图和致死量吐槽，请谨慎食用。</p></blockquote><span id="more"></span><h2 id="微软弃子"><a href="#微软弃子" class="headerlink" title="微软弃子"></a>微软弃子</h2><p>先详细说说「诸多问题及 bug」。微软在 WP8 停止支持的 FAQ 上说，「We have no current plans to remove historical Windows Phone 8.1 updates from Windows Update」，他们不打算移除 WP8.1 的已有更新，因此理论上现存的 WP8.1 设备应当仍然可以通过系统内更新升级到最新版本。</p><p>那可真是太低估微软了。他们的确没有移除已有更新，但他们 <em>似乎改变了服务器的 TLS &#x2F; SSL 行为 &#x2F; 版本</em> （未经考证），使所有的老设备试图从 Windows Update 获取更新时都会报奇怪的错误。没有更新就没有更新吧，难道 WP8.1 不能用吗？还真…不能用。Windows Phone 的商店随着支持结束一起关闭了，此前的所有 Windows Phone 应用全都不能从官方渠道下载。如果没有一定的动手能力，目前还搭载 WP8.1 的设备与功能机无异。</p><p>微软账户没死，可 WP8.1 的微软账户登录死了。无论使用何种网络，何时何地均提示「无法登录，请检查网络」。这可是一台和微软生态深度绑定的智能机啊，一旦脱离了商店和微软账户，和 PC 无缝同步的功能就不复存在，许多应用根本打不开，它彻底沦为了一台能联网的功能机。与此同时，目前手机业务卖身 HMD 的 Nokia 自然不会维护微软时代 Lumia 用户的服务器，因此系统设置里 Nokia 相关的在线功能同样完全残废。</p><p>好在，除 Nokia 和微软账户外，它没有辜负微软亲儿子的身份，还提供了对 Exchange 协议的支持。这使我能够在不登入微软账户的情况下，使用 Exchange 协议同步我微软账户上的数据，不过这仅限个人账户，每当我试图绑定 Office 365 账户时，纵使我身怀十八般武艺，面对不断跳出的「账户信息错误」还是无可奈何；Google 则更有意思，目前还能够跳转至登录、授权页面，可一旦按下「允许该应用访问您的个人信息」页面的允许，它就白屏了，不知是否是跳转页面已经被撤掉；IMAP &#x2F; POP 总可以吧？不太可以，添加上之后它就一直处于「同步中」状态，无法停止、不能编辑 &#x2F; 删除账户，断网、飞行模式、重启都没能帮助我把这个卡死在账户页的 Google 删掉，似乎只能靠手动摸进系统文件，或者清除数据才能解决。</p><p>系统的问题还不止这些。WP8.1 拥有三个大版本更新，在这三个更新之间系统版本号极其琐碎，并且能更新到哪个版本完全取决于微软的心情。例如我手上的港版黄色 Lumia 1020 ，型号是 RM-875，产品号是 <code>059T7B0</code> ，刷入系统镜像后默认是 WP8.1（无 Update），版本号是 <code>8.10.12393.890</code> ，固件号是 <code>3051.50009.1424.0003</code> ，理论上可以请求更新到 Lumia 1020 最后一个大版本更新 WP8.1 Update 1 (GDR1)，但不知什么原因持续报错，强行推送更新后直接循环重启；在交流群求助后把它刷到「某个更高的固件号」，比如新加坡版黄色 <code>059T657</code> ，固件号 <code>3051.50009.1424.0016</code> ，这才手动更新到了 WP8.1 Update 1，版本号 <code>8.10.14112.123</code> 。</p><p>此时，根据微软的说法，我正在使用 Lumia Denim 版本，但系统内 extras &amp; info 应用显示的仍然是 Lumia Cyan：事实证明，微软根本就没有把这些东西集成在系统更新中，如果需要更新这一堆乱七八糟的系统组件及依赖，我仍然需要 WP 商店，可是微软啊，我商店呢？</p><p>既然已经走到这一步了，那就一不做二不休，干脆升到最新版 WP8.1 Update 2 (GDR2) 吧！我应该怎么做呢？首先，我需要修改注册表，让微软的更新工具以为我是另一台设备（在这里我修改成了 Highscreen WinWin）；然后，我需要重新请求更新；这倒是很顺利，我一路更新到了… <code>8.10.15137.148</code> 。</p><p>微软啊微软，你后面明明更新了 <code>8.10.15148.160</code> 是吧，我的设备是可以接收到 Update 2 这最后一版大版本更新是吧，那你让我多更新一个小版本是会断只手吗？？</p><h2 id="一线生机"><a href="#一线生机" class="headerlink" title="一线生机"></a>一线生机</h2><p>虽然微软放弃了 WP8.1，来自民间的各路大神还没有。Telegram <a href="https://t.me/W8Mobile">@W8Mobile</a> 交流群组中，极其完善的各种教程、工具、软件包甚至游戏备份，以及乐于助人有求必应的管理员、群友们，在我折腾这台机器的时候给了我莫大的帮助，教会了我怎么使用 PC 对 WP 设备 <ruby><rb>OTC</rb><rt>Over-The-Cable</rt></ruby> 更新，怎么解锁 bootloader、获取 root 权限、开启 sideload、修改注册表；还有一些网站收录了许多软件包，例如 <a href="https://www.appx4fun.com/">Appx4Fun</a> 和 <a href="https://file.windowsviet.com/">Windows Viet</a> ，尤其是 <a href="https://www.dospy.wang/">DOSPY论坛</a> 提供了大量的国产软件包及中文教程，我的 QQ、网易云音乐等都来自那里。</p><p>舞台搭好，演员就位，在使用 Lumia 1020 with Windows® Phone 8.1 Update 2 <code>8.10.15137.148</code> 的七天中，我的体验如何？</p><h2 id="艰难求生"><a href="#艰难求生" class="headerlink" title="艰难求生"></a>艰难求生</h2><p>经过一番复杂的折腾，终于是进入了正常使用的体验。先来说说可能对国内用户最重要的部分：</p><h3 id="国产软件"><a href="#国产软件" class="headerlink" title="国产软件"></a>国产软件</h3><p>很显然，某个张小龙开发的、小而美的绿色屎早已抛弃了对 Windows Phone 的支持，不过我一直以来的习惯是不在主力机上装屎，另有一台 iPhone 专门用来塞国产带风控不可信的软件（俗称养蛊）。对于没有备用机的国内用户，它已经输了：只带它没有健康码，根本出不了门。</p><p>QQ 4.9.2.568 居然仍然能够正常使用倒是在我意料之外，这个版本的 QQ 最大的问题是没有撤回和推送，必须手动点开才能收消息，就当是「你的健康数字生活」吧，变相大幅减少了我看手机的频率；它没有表情同步，不过支持收藏表情，还内置了一些 Emoji，再加上微软键盘自带的那些，够用了；最让我惊喜的是它甚至还能打 QQ 电话、逛空间，尽管是浏览器（而且是 IE 11），简单的浏览还是没有问题；它的一些设计和特性我甚至希望在现代 QQ 上仍然能看到，比如聊天界面右上角会展示最新一条消息的来源，点击可以直接跳转，还有着正常的展示逻辑（非群助手消息 &gt; 群助手消息，不会让群消息挤掉私聊），聊天页面从右向左滑还能呼出最近使用的聊天，不用伸手够返回键、不用等主页在卡顿中加载，可以一键跳转，以及极其优雅的主页，Windows Phone 常见的大头标题设计简直是业界之光，Material 摆烂 Cupertino 毫无长进的今天的业界清流；不过我的两个账号只能登录主力号，较新的小号一直登录失败，它的主页也并不完美，卡顿是家常便饭，有时还会有奇怪的问题，比如点击的位置和响应的位置不一致，但这可是 2014 年的 QQ 啊，张小龙你能不能学一学？</p><p><img src="qq.jpg" alt="QQ 截图"></p><p>如果说 QQ 是一个爽点，网易云就是另一个。它的设计非常优秀，大家都是 Windows 却甩开现在的桌面版几条街；功能非常正常，和我此前 Android 端死守的 4.3.1 几乎无异；网易云的迁移几乎没有任何学习成本，同时还能符合 Windows Phone 规范并且为小屏手机考虑，而且 UWP 版都已经（几乎）不能用的时候 WP 版居然还健在，我觉得这就是它做得极其优异的证明，值得我给一个满分。当然不仅仅只有好的部分，要付费的照样要付费，不能下载的照样不能下，可惜 WP 没有 Apple Music。此外，不知是因为蓝牙硬件实在太过老旧，还是网易云音乐的 bug，它连接到我的 AirPods Pro 时能否正常播放完全看脸，大概率是播完一首后即使进度条还在动，已经没有任何声音；经过一番复杂操作才有可能恢复，而中途切歌甚至走两步（电磁环境变得复杂？）也有可能导致无法继续播放。这些问题在连接有线耳机时并没有出现，我暂且蒙在鼓里。</p><p><img src="netease.jpg" alt="网易云截图"></p><p>因为用不上，我并没有花时间一个一个测试 DOSPY 论坛的各类其他国产应用，只是看了一眼仍旧可以使用的高德地图，它能够正常更新数据，却始终没法获取到正确的定位，当我在烈士公园开阔的地方打开它时，它第一次把我定位到了省博物馆旁边的某个居民楼，第二次把我定位到了湖里；哔哩哔哩倒是也有，只不过除了浏览视频信息还正常外，已经无法登录、查看个人主页或是播放视频；其他的应用嘛，就需要自行试试看了。</p><h3 id="说说硬件"><a href="#说说硬件" class="headerlink" title="说说硬件"></a>说说硬件</h3><p>既然在说网易云的时候提到了有线耳机，我们就从这里开始吧。Lumia 1020 拥有极其先进的未来科技：3.5mm 耳机孔，而且音频素质相当优异，声道分离度是「肉耳可闻」地高，我已经许久没有在移动端听到这样的声音了；WP8.1 还提供了一些音频加强，例如 Dolby Audio（是负优化，就像把一个人压扁了横向拉开一样不自然）和均衡器，Zune 的遗产 acoustic EQ 自然没有缺席。Zune 上破音的 acoustic 到了 Lumia 这边表现意外地不错，再加上 WP7 时代 Windows Phone 的音乐还需要使用 Zune 软件复制进去，看到 Zune 的血统依然留存于 Windows Phone，欣慰了。和 Zune 不同的是，1020 的音频有明显的底噪和电流声，这不管什么时候都很明显，算是个小小的遗憾吧。</p><p>Lumia 1020 这硕大的相机模组，一度使其受到了广泛关注：在普遍 800 万甚至 500 万像素的年代，杀出来了一台 4100 万像素 + 1&#x2F;1.5 英寸大底 + 蔡司认证镜头 + 氙气闪光灯的手机，配上鲜艳的聚碳酸酯后盖，代表着那个年代手机拍照的顶点，谁能忍心不对它多投去一些目光呢？事实证明，即使到了今天，这一套光学组合拳的素质仍旧很能打，Auto 模式拍下的 Raw，稍经修缮就不逊于现代设备；如果愿意费心手动调校参数，它相机直出都很出色。</p><p>可惜，如今的它，早已被计算摄影的浪潮拍到了岸上，再也没法动弹。Nokia 在 PureView 上搭载的画质增强技术和今天的设备有点类似，一次性拍摄多张照片并计算、组合为一张成片，不过它可没有现代设备分分钟几十张原始像素照片上下的性能，只能生成一张 500 万像素的图片；专业摄影强大，但不知是硬件限制还是软件缺陷，没有办法预览改变参数后的成片效果，导致要么盲操拍几张看运气，要么就跟着调整参数后的推荐设置来；这个推荐参数，连带着 Auto 模式的曝光和色彩又不靠谱，以至于我使用它拍下的每一张照片都要把 Raw 拎出来过一遍 Photoshop 再同步至云端；压死它的最后一根稻草大概是较慢的成像速度，与此前主力机双击电源键即可进入相机，再按一下音量键就能拍好一张照片不同，它熄屏后「快速」进入相机需要长按快门键，再等个几秒恢复软件、开镜头，如果光线条件不好还得先看它拉会儿风箱（甚至手动对焦），这使我的分享欲望大大下降。</p><p>噢，最后第 n+1 根稻草找到了：它来自 2013，理所当然地搭载了 Micro USB 接口，文件传输在如今看来极其缓慢，由于浏览器是 IE 11 并且 Wi-Fi 似乎只支持到 802.11n，内网传输文件体验糟糕。它支持的 Wi-Fi 有限，我寝室的 36 信道 160MHz Wi-Fi 一百次里大概只有三次不到可以被它扫描到，我不得不启用干扰严重的 2.4GHz Wi-Fi 单独给它用。不过中国移动倒是让我比较惊讶，我本以为拿到它之后将进入漫长的 2G 生活，未曾想移动的 FDD LTE 建设突出一个靠谱，在宿舍能搜到 2&#x2F;5 格左右信号的 Band 8 在教室则是满速满信号 Band 3，必须赞美一下。</p><p>因此，在这 7 天中，我频繁地将 1020 作为热点机使用，它确实没有让我失望。作为一位崭崭新的 9 岁老人，它在仅作为热点机使用的情况下续航能打，比我原来的主力机，电池寿命应该已经严重缩减的 1+7T Pro 还能打，可能还要归功于 Windows Phone 不留应用后台的设计。</p><h3 id="讲了这么多，系统呢？"><a href="#讲了这么多，系统呢？" class="headerlink" title="讲了这么多，系统呢？"></a>讲了这么多，系统呢？</h3><p>首先，Windows Phone 的交互体验、动画等方面非常出色。非常出色。 <strong>非常出色。</strong> 出色到让 Android 和 iOS 理应只能自惭形秽。输入体验也无愧于许多人对它「移动端用过最好的输入法」的评价。它还拥有 Office 套件，无法登录微软账户却能够正常使用 Office 365 的 SharePoint，我用它主力完成了本文的初稿，并且无缝同步到了电脑端，一切都如此自然。然而，它搭载的是残血版 Office，能拥有完善的浏览体验已经谢天谢地了，在浏览带公式的文件时更多的是乱码，卡顿和功能缺失。</p><p>主屏幕的设计可谓是 Windows 8 的绝唱。配上各种应用的 LiveTiles，WP8.1 的主屏有着极高的可自定义性。想要显示实时天气？AccuWeather 提供半透明的天气图标，与壁纸浑然一体；查看错过的来电、信息和邮件，最近照片，下一个日程，正在播放的音乐…？小菜一碟。Windows 11 开始，磁贴虽死，仍有许多系统、应用向它取经，可自定义大小的应用图标、相册轮播的小部件就是最好的例子。</p><p><img src="home.jpg" alt="主页截图"></p><p>Nokia 的铃声和设计同样堪称经典。当我把手机拿到朋友们面前晃悠时，他们中大部分人认不出这是一台 made by Nokia 的设备；直到我让他们给我打电话，以全新变奏出现的、熟悉的 Nokia 铃声，才帮助我斩获了不少惊呼。Windows Phone 的提示音、通知音、按键音同样舒适，不烂大街不突兀，值得给一个好评。</p><p>WP8.1 可以安装的游戏，或者光是上述资源收录的游戏就惊人地多。我在它上面安装了《愤怒的小鸟》、《涂鸦跳跃》、《神庙逃亡》、《暗影格斗 2》、《狂野飙车 8》等等经典，除了《狂野飙车 8》由于强制更新而商店已死没能玩上外，别的游戏都成了我这几天杀时间的首选。你能想象一群人围着看一个人玩神庙逃亡的样子吗？那是我青涩的少年时光，如今又在宿舍体验一次，大抵开始怀旧的我，确实是老了吧。</p><p>当然，墙外的应用也不少。我最常用的两个，Telegram 和第三方 Twitter，都很卡、都能用，美中不足的是前者一直没能正常下载头像，图片能否下载要看脸，不知是否是写死了一些地址的原因。不过这都是小事，大事是 WP8.1 没有任何能让我魔法上网的方式，只能使用另一台设备作为中转，这使我这些天离开了寝室，除了手机没有其他设备的情况下就索性 TG 不上线，好在没人用 TG 找我紧急处理什么事情，可以接受。</p><p>我最不适应的应该是它搭载的浏览器：IE 11。和 iOS 一样，微软不允许开发者在 Windows Phone 平台上提供第三方浏览器内核，必须使用自带的 IE，而它的使用体验…想必已经不需要赘述。并且由于无法魔法上网，我不能像此前那样方便地使用 Google 搜索，只能使用卡顿严重、时常报错、把滑动当点击的百度。此前在主力机上，我每天使用最多的应用可能就是 Google，但主力 1020 这几天，我几乎没有手动用它搜索过。</p><h2 id="何去何从"><a href="#何去何从" class="headerlink" title="何去何从"></a>何去何从</h2><p>综上所述，我实在是想不通这么好的一个系统，怎么就被微软造作没了。它本应是无比耀眼的存在，代表着一个微软的时代：游戏与 Xbox 无缝联动，音乐对接 Zune &#x2F; Groove，内置了开箱即用的 Outlook &#x2F; Office &#x2F; OneDrive，可以将工作流直接搬到移动端，并且设计语言和动画效果极其出色，还不用再为 PC 端付费过的东西花第二次钱，可惜它如今早已消亡，只剩黄金时代的回忆给后人留念。</p><p>体验归体验，要在 2022 年长期稳定使用 WP8.1，或许实在太难：微信暂且不说，糟糕的蓝牙、定位体验就足以将很多人拒之门外。在我看来，它足够精致，足够完善；不能当作绝对主力，又绝对值得花时间相处。或许我之后会将它升级到 Windows 10 Mobile 体验微软真正的绝唱，或许我会将它作为热点机，又或许我会试着继续主力用到暑假。我还没想好，却已经从中窥见了这台 Nokia 末代机皇的无限可能。</p><p>毕竟，化用群友一句话，</p><blockquote><p>2022 年的现在，我们能轻松地判断 Lumia 不是未来；但回到上个年代初，又有谁能拒绝这样一台多彩、灵动又强大的设备呢？</p></blockquote><p><img src="lumia.jpg" alt="Lumia 1020"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小众、多彩、塑料机身、Windows 内核、微软打造，在这些词条的加持下，我对 Lumia 的兴趣，早在《丧尸围城：瞭望塔》见到 Lumia 的身影，对 Lumia 1020 标志性的镜头模组印象深刻之前就已经产生。后来，Android 和 iOS 分庭抗礼，前者在一些方面越来越糟糕，这没能解决 Windows Phone 的颓势，却是我「润」到 Windows Phone 的首次冲动。直到前几天，在二手🐴看到一台崭崭新的 1020，我毫不犹豫果断下了单。&lt;/p&gt;
&lt;p&gt;拿到手后才知道，这台设备没那么美好。它被排除在 Windows 10 更新列表外， &lt;ruby&gt;&lt;rb&gt;Windows Phone&lt;/rb&gt;&lt;rt&gt;WP&lt;/rt&gt;&lt;/ruby&gt; 8.1 的支持早已结束，它已经无法再通过设备内渠道获得软件更新，同时还存在诸多问题及 bug。尽管如此，我尝试了将它作为主力机七天，并将历程与感受记录如下，以期帮助每一个渴望踏入这个坑的人。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文全长约 5000 字，阅读约需 12 分钟，内含少量插图和致死量吐槽，请谨慎食用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="系统" scheme="https://blog.rachelt.one/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="Phone" scheme="https://blog.rachelt.one/tags/Phone/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>在 OpenWrt 上打造 Rickroll 访客 Wi-Fi</title>
    <link href="https://blog.rachelt.one/articles/custom-guest-wifi-with-auth/"/>
    <id>https://blog.rachelt.one/articles/custom-guest-wifi-with-auth/</id>
    <published>2022-04-07T17:06:25.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在 TG 上看到隔壁频道的点子：必须观看一定时间 <a href="https://www.bilibili.com/video/BV1GJ411x7h7">Rickroll</a> 后才允许连接，并且每次暂停会 +10s 的访客 Wi-Fi，顿时震惊：「原来还可以这么搞？？」仔细分析可行性后发现，这个访客 Wi-Fi 原理并不复杂，有折腾 OpenWrt 经验并且写过一丢丢 HTML 的话极其容易上手，于是将步骤记录如下。</p><h2 id="0-准备条件"><a href="#0-准备条件" class="headerlink" title="0. 准备条件"></a>0. 准备条件</h2><ul><li>一台运行 OpenWrt 的路由器</li><li>一台能联网并且能 <code>ssh</code> 的设备</li><li>一点点计算机网络及开发知识</li><li>一点点折腾精神</li></ul><blockquote><p>我自己使用的是红米 AX6 基于 <a href="https://github.com/coolsnowwolf/LEDE">LEDE</a> 的自编译固件，因此能深入地自主精简、定制，如果没有自编译固件的条件或想法，可能会遇到一些奇妙的依赖问题。推荐选择闪存容量大或可扩展存储的路由器，防止折腾半天发现没有留给视频的空间。除此之外，如果想对这个访客网络进行限速（比如使用 SQM QoS），那么也许还需要较强的性能。</p></blockquote><span id="more"></span><h2 id="1-创建访客网络"><a href="#1-创建访客网络" class="headerlink" title="1. 创建访客网络"></a>1. 创建访客网络</h2><p>既然是新造访客 Wi-Fi，那第一步自然是把这个 Wi-Fi 做出来。OpenWrt 后台的 <code>网络 -&gt; 无线</code> 设置中，在想要创建新网络的网卡上点击「添加」，在下方的接口配置——基本设置——网络中勾选「创建」输入 <code>lan_guest</code> （或者任何其他名字，只要能分辨出这是访客网络），进行一些自定义，然后「保存&amp;应用」。</p><p>接下来，打开 <code>网络 -&gt; 接口</code> ，应该已经能看到刚刚添加的新接口了。我们点进它的「修改」，将协议切换到「静态地址」，调整访客网络的网关：「IPv4 地址」。我主用网络的网关 &#x2F; <code>lan</code> 中设置的地址为 <code>192.168.13.1</code> ，这里就可以写成 <code>192.168.3.1</code> 或者任何一个不以 <code>192.168.13</code> 开头且符合 IPv4 标准的值，再把子网掩码调整到 <code>255.255.255.0</code> 。如图所示，我选择的是 <code>192.168.0.1</code> ，声明了我这个接口占用了 <code>192.168.0.0/24</code> 这个网段，也就是 <code>192.168.0.0 ~ 192.168.0.254</code> 。对这些不熟悉的话，按照图上来就好。</p><p><img src="interface.png" alt="interface"></p><p>此时「防火墙设置」中默认选中的应该是「不指定或新建」，我们在后面的文本框中同样输入 <code>lan_guest</code> （不必相同，只是方便辨识），保存，在 <code>网络 -&gt; 防火墙</code> 中就能看到新建的这个区域了。点击「修改」，这时「覆盖网络」应当勾选且只勾选了 <code>lan_guest</code> ，将「入站数据」、「出站数据」和「转发」全部调至「接受」，下方「端口触发」中「允许转发到<em>目标区域</em>」勾选 <code>wan</code> ，保存即可。这样，我们将访客网络和主用网络隔离开，不允许互相访问。</p><blockquote><p>如果你不需要对访客网络进行再进一步的限制，在「防火墙设置」处可以直接将访客网络划入 <code>lan</code> 。这一步主要是为了后面阻止访客网络访问路由器配置。</p></blockquote><p><img src="firewall.png" alt="firewall"></p><p>这时，我们已初步完成访客网络的搭建。然而，此时的访客网络除了无法与主用网络通信外还没有任何限制，不过它的好日子也不长了，我们接下来就「限制访客访问后台」并「对访客网络限速」。</p><h2 id="2-限制访客访问后台"><a href="#2-限制访客访问后台" class="headerlink" title="2. 限制访客访问后台"></a>2. 限制访客访问后台</h2><p>默认情况下，OpenWrt 的 HTTP 服务器 <code>uhttpd</code> 监听的是 <code>0.0.0.0:80</code> ，也就是所有连接请求只要发送就照单全收，这肯定不是我们想要的，所以我们要将它改成主用网络的网关地址。如果你安装了 <code>luci-app-uhttpd</code> 软件包，那么可以在管理后台修改；下文说的是没有安装这个软件包的情况，我们需要用 <code>ssh</code> 连入后台，用 <code>uci</code> 修改配置。</p><p>用任意趁手的 <code>ssh</code> client 连入路由器后台后，我们执行 <code>uci show uhttpd</code> 看看当前的配置。默认情况下，它应该长这样：</p><pre><code class="highlight shell">…uhttpd.main=uhttpduhttpd.main.listen_http=&#x27;0.0.0.0:80&#x27; &#x27;[::]:80&#x27;uhttpd.main.listen_https=&#x27;0.0.0.0:443&#x27; &#x27;[::]:443&#x27;uhttpd.main.redirect_https=&#x27;0&#x27;…</code></pre><p>在不使用 HTTPS 的情况下，第二行就是我们要更改的配置。我主用网络的网关在 <code>192.168.13.1</code> ，所以我输入的内容如下：</p><pre><code class="highlight shell">uci set uhttpd.main.listen_http=&#x27;192.168.13.1:80&#x27;uci commit/etc/init.d/uhttpd restart</code></pre><p>分别代表着「将监听地址设置到 <code>192.168.13.1</code> 」，「保存设置」，「重启 HTTP 服务器 &#x2F; 重启后台」。此时再 <code>uci show uhttpd</code> 可以看到，我们调整的内容出现在了以 <code>uhttpd.main</code> 开头的列表的最末端，并且通过访客网络已经无法再打开路由器后台。</p><h2 id="3-对访客网络限速"><a href="#3-对访客网络限速" class="headerlink" title="3. 对访客网络限速"></a>3. 对访客网络限速</h2><blockquote><p>若不需限制访客网络速度，可忽略本节内容；本节需要安装 <code>luci-app-sqm</code> 和 <code>sqm-scripts</code> 软件包。  </p></blockquote><p>创建、隔离都完成了，接下来就要对访客做限速了——毕竟在限速 24Mbps 的校园网环境，放任访客随便跑带宽势必会影响主用网络。我们用于限速的工具是 <code>luci-app-sqm</code> ，它是 <code>sqm-scripts</code> 的 GUI 控制台，附带了一系列用于控制网络质量的工具。在网络正常的情况下，你可以直接这样安装它们：</p><pre><code class="highlight shell">opkg updateopkg install luci-app-sqm</code></pre><p>完成后，在 OpenWrt 后台的 <code>网络 -&gt; SQM QoS</code> 里就能调整限速设置。在「接口名称」处选中刚刚新增的 <code>lan_guest</code> ，再自主指定上下行速率就行。</p><p><img src="qos.png" alt="qos"></p><h2 id="4-Rickroll！"><a href="#4-Rickroll！" class="headerlink" title="4. Rickroll！"></a>4. Rickroll！</h2><blockquote><p>本节需要安装 <code>nodogsplash</code> 软件包，并且可能需要一些前端开发知识。</p></blockquote><p>最后一步就是配置验证服务了。它的学名叫 captive portal 「强制门户」，常见于机场、星巴克等地的公共 Wi-Fi，同时也被用来做校园网 Wi-Fi 的登录页。原理很简单，现代设备都有一个检查网络是否可用的机制，我们只要将它们检测网络可用的数据包指向我们的认证页面，系统就知道这个网络需要认证才能使用，并自动打开认证页面。</p><p>要造轮子理论上并不难，但已经有了用于完成这一整套步骤的完善工具： <a href="https://github.com/nodogsplash/nodogsplash">Nodogsplash</a> 。像这样操作就能安装并启动它：</p><pre><code class="highlight shell">opkg updateopkg install nodogsplash/etc/init.d/nodogsplash start</code></pre><p>默认情况下，Nodogsplash 会在重启时自动启动，并且对 <code>lan</code> 下的所有设备启用认证。使用 <code>uci show nodogsplash</code> 可以看到像这样的一段：</p><pre><code class="highlight shell">…nodogsplash.@nodogsplash[0]=nodogsplashnodogsplash.@nodogsplash[0].enabled=&#x27;1&#x27;nodogsplash.@nodogsplash[0].fwhook_enabled=&#x27;1&#x27;nodogsplash.@nodogsplash[0].gatewayname=&#x27;OpenWrt Nodogsplash&#x27;nodogsplash.@nodogsplash[0].gatewayinterface=&#x27;br-lan&#x27;…</code></pre><p>但我们只希望它监听访客网络，所以我们修改 <code>nodogsplash.@nodogsplash[0].gatewayinterface</code> 的值：</p><pre><code class="highlight shell">uci set nodogsplash.@nodogsplash[0].gatewayinterface=&#x27;wlan1&#x27;uci commit</code></pre><p>这里的 <code>wlan1</code> 应修改为访客网络的接口名。在我的案例中，我将没有用上的 2.4GHz Wi-Fi 设置为了访客网络，所以它是 <code>wlan1</code> ，如果一张网卡下有多个 Wi-Fi 网络，它也可能是 <code>wlan1-1</code> 等，不确定的话可以参考 <code>SQM QoS</code> 的「接口名称」设置，括号内是 <code>lan_guest</code> ，括号外就是访客网络对应的接口名。</p><p>初始认证页面，作为示例，是一个有图有文字，只要点击「Continue」就会认证成功的简单页，位于 <code>/etc/nodogsplash/htdocs/splash.html</code> ，我们修改这个文件的内容就能控制认证页面。我将我写完的 <code>splash.html</code> 放在了 <a href="https://github.com/Rachel030219/nodogsplash-rickroll">nodogsplash-rickroll</a> 这个 GitHub 项目中，可以直接用我完成的 <code>splash.html</code> 替换掉已有文件，再将视频命名为 <code>nevergonnagiveyouup.mp4</code> 放在同一文件夹（ <code>/etc/nodogsplash/htdocs/</code> ）下，输入 <code>/etc/init.d/nodogsplash restart</code> ，就能看到效果。</p><hr><p>如果你还想深入了解这个页面的组成，这里摘录 <code>&lt;body&gt;</code> 部分如下：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Never Gonna Give $clientip Up<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></code></pre><p>这是一个朴素的一级标题，调用了 Nodogsplash 的变量功能，将 <code>$clientip</code> 替换为当前认证设备的 IP 地址。这个特性在提交认证数据部分也有用到：</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;authform&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;$authaction&quot;</span> <span class="attr">hidden</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tok&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$tok&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;redir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$redir&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开始上网&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></code></pre><p>除了用来控制显示的 <code>id=&quot;authform&quot;</code> ，这个 <code>&lt;form&gt;</code> tag 用于向 <code>$authaction</code> （会被替换为实际的认证地址）提交一个 GET 请求，附带了一个 token <code>$tok</code> 和重定向目标 <code>$redir</code> 。这是官方推荐的用来认证设备的方式。除此之外，Nodogsplash 还提供了许多其他变量，在自带的 <code>splash.html</code> 中可以找到，包括网关 &#x2F; 用户 MAC，网关名等。</p><pre><code class="highlight html"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span>    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;nevergonnagiveyouup.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span>    你的浏览器不支持 video 标签。<span class="tag">&lt;/<span class="name">video</span>&gt;</span></code></pre><p>这就是一个简单的视频播放组件，包含了「自动播放」、「循环播放」两个特性，还提供了播放控制（也带来了暂停惩罚）。 <code>src</code> 告诉浏览器应该播放的是同一个文件夹下的 <code>nevergonnagiveyouup.mp4</code> ， <code>type</code> 则声明了视频的类别。</p><p>文件末尾是一段 JavaScript，作用已在注释中说明，完成了最基本的倒计时 + 暂停检测功能。</p><blockquote><p>⚠注意⚠：你可能已经看到了，官方注释中说： </p><p><em>It should be noted when designing a custom splash page that for security reasons many CPD implementations: Immediately close the browser when the client has authenticated. Prohibit the use of href links. Prohibit downloading of external files (including .css and .js). <strong>Prohibit the execution of javascript.</strong></em></p><p>翻译过来，为了安全考虑，完成认证后应该立即关闭浏览器，禁止使用 href 链接，禁止引用外部文件， <strong>禁止执行 JavaScript</strong> 。本文完成的认证页面只是「图一乐」，如果需要大面积部署到生产环境，请务必尽最大可能遵循这几条原则。</p></blockquote><hr><p>同文件夹下还有一个 <code>status.html</code> ，用来告诉设备「你已经连上了，不用尝试连接了」，文章完成时我还没有动它，如果有兴趣的话可以折腾折腾。</p><h2 id="5-搞定！"><a href="#5-搞定！" class="headerlink" title="5. 搞定！"></a>5. 搞定！</h2><p>如此，我们就完成了一个 <del>电信诈骗</del> 访客 Wi-Fi。 <del>快去诈骗你的朋友们吧！</del></p><hr><p><strong>参考与感谢：</strong></p><ol><li>灵感来源：<a href="https://t.me/CyanCh/855">https://t.me/CyanCh/855</a></li><li>Nodogsplash Documentation: <a href="https://nodogsplash.readthedocs.io/">https://nodogsplash.readthedocs.io/</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天在 TG 上看到隔壁频道的点子：必须观看一定时间 &lt;a href=&quot;https://www.bilibili.com/video/BV1GJ411x7h7&quot;&gt;Rickroll&lt;/a&gt; 后才允许连接，并且每次暂停会 +10s 的访客 Wi-Fi，顿时震惊：「原来还可以这么搞？？」仔细分析可行性后发现，这个访客 Wi-Fi 原理并不复杂，有折腾 OpenWrt 经验并且写过一丢丢 HTML 的话极其容易上手，于是将步骤记录如下。&lt;/p&gt;
&lt;h2 id=&quot;0-准备条件&quot;&gt;&lt;a href=&quot;#0-准备条件&quot; class=&quot;headerlink&quot; title=&quot;0. 准备条件&quot;&gt;&lt;/a&gt;0. 准备条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一台运行 OpenWrt 的路由器&lt;/li&gt;
&lt;li&gt;一台能联网并且能 &lt;code&gt;ssh&lt;/code&gt; 的设备&lt;/li&gt;
&lt;li&gt;一点点计算机网络及开发知识&lt;/li&gt;
&lt;li&gt;一点点折腾精神&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我自己使用的是红米 AX6 基于 &lt;a href=&quot;https://github.com/coolsnowwolf/LEDE&quot;&gt;LEDE&lt;/a&gt; 的自编译固件，因此能深入地自主精简、定制，如果没有自编译固件的条件或想法，可能会遇到一些奇妙的依赖问题。推荐选择闪存容量大或可扩展存储的路由器，防止折腾半天发现没有留给视频的空间。除此之外，如果想对这个访客网络进行限速（比如使用 SQM QoS），那么也许还需要较强的性能。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://blog.rachelt.one/tags/Linux/"/>
    
    <category term="OpenWrt" scheme="https://blog.rachelt.one/tags/OpenWrt/"/>
    
    <category term="Rickroll" scheme="https://blog.rachelt.one/tags/Rickroll/"/>
    
    <category term="访客网络" scheme="https://blog.rachelt.one/tags/%E8%AE%BF%E5%AE%A2%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>航道，四季与歌：2021 的年度总结</title>
    <link href="https://blog.rachelt.one/articles/2021-2022/"/>
    <id>https://blog.rachelt.one/articles/2021-2022/</id>
    <published>2021-12-21T00:49:54.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>初代 Cytus 的设定很有意思，作为人类永生的载体，为了防止人类的记忆被新的记忆覆盖后的情感消失，机器人们会将情感化为音乐存储在名为 Cytus 的空间，每过一段时间就使用这些音乐感受情绪与灵魂。</p><p>作为人类，浑浑噩噩中度过的每一天，我同样依赖音乐触摸我的灵魂，而在我选出来的五首歌里，是我过去一年的故事。</p><blockquote><p>本文长约 4800 字，阅读约需 12 分钟，全程无图，请放心食用。</p></blockquote><h2 id="暮冬：你啊-为何不愿停下"><a href="#暮冬：你啊-为何不愿停下" class="headerlink" title="暮冬：你啊 为何不愿停下"></a>暮冬：你啊 为何不愿停下</h2><blockquote><p>寂寞的人呐 显得不慌忙啊<br>雨下得再大 <em><strong>你啊 为何不愿停下</strong></em><br>越冠冕堂皇 越贪嗔痴狂啊<br>折不折又怎样 你是我永不凋谢的花</p><p>Ring - 堪折</p></blockquote><span id="more"></span><p>冬天属于重逢与告别。短短的、微不足道的一个月寒假，对旧友相聚比「岁月如梭」更短，对无所事事比「度日如年」更长，其余时间，则像是我活过的每一天，不紧不慢地流淌。</p><p>跨越漫长的第一个学期，我与老友们聚首，在高考后聚餐的同一家火锅店 feel united。承受住欣喜、不舍与扭头就走的冲动，我与某个当时还有另一半的人，带着两位女生、抱着一个孩子，相会于承载我们太多回忆的公园。拥抱独有的惊喜、温暖与勇敢，我和从未离开我身边的人，再度经历一个月的成长。</p><p>与此同时，我开始对自己负全责，摆脱了对未成年人设下的种种限制，第一次握住教练车的方向盘。成年当天启动的、长达一周的短暂学车生活中，尽管我面对的科目一算不上紧张，后期真正开始学习时遇到的问题已初见端倪，或许从第一天起，我就在盼望一个「不用学车」的许可。元宵节前一天，顶着训练场 29℃ 的气温，我一边等同行人结束机械重复的倒车入库一边无聊地刷 NGA，被炙热的太阳晒得发昏时，不免对未来正式学车的日子忐忑不安。事实证明，我的忐忑一点都没错。</p><p>但那是夏天的故事，我有一整个学期用来做心理准备，所以没把它放在心上。我放在心上的是又一个假期结束，又一群人离开。大半年已经过去，《再会》里 Ayase 所写「即使是与你分隔两地 &#x2F; 也祈愿着能眺望同一片天空」，仍然能把我带回寒假的倒数第二个晚上。</p><p>那个晚上，长沙南站寒风凛冽，将一杯悠哉悠哉端住，仿佛下一秒就要把我吹走的风中，我站了十几分钟，才终于等来了我要等的友人。这次，没有扭头就走的企图，只有见面前一贯的冷淡，与见面后掩饰不住的不舍。可惜这次送别实在短暂，不过几句对话，他已不得不登上前往机场的磁浮。可能是潜意识里扭头就走的冲动，或者时间或者经济，我没能和他一起去机场，仅仅给他一个深拥然后转身离开，却在十分钟内落入难以自解的自责。</p><p>我知道这只是一连串离别的开始。我现在熟悉的人最终都会各奔东西，唯独难以适应现实的、始终如此软弱的我，无法想象未来成熟后，身旁没有友人陪伴的生活。可时间从未停下。</p><h2 id="春：你能在我垂死之脸上寻见它吗"><a href="#春：你能在我垂死之脸上寻见它吗" class="headerlink" title="春：你能在我垂死之脸上寻见它吗"></a>春：你能在我垂死之脸上寻见它吗</h2><blockquote><p><em><strong>Can you see it in my dying face</strong></em><br>You are acting like I care</p><p>Low Roar - Bones</p></blockquote><p>转眼大半年，偶尔被我遗忘的意难平，已经深刻地改变了我的人生轨迹。</p><p>在那之前，我与一个人相逢恨晚。开学第一周最后一节课，周五下午的大学生心理健康，自发的小团体被拆散糅合成数个组，各据一方教室的领土。躲在教室最角落的我，有幸认识了企图比我躲得更远的人。任谁都不会想到，以缓解初见尴尬的自言自语为开始，以我给他让路时窗外洒落的阳光为楔子，我们的关系，在性格迥异还找不到几节共同课的情况下越来越近，从礼貌而疏远的社交距离、像是猫触水前试探般的寒暄，到夜跑、自习、散打课，洋湖、宜家、KFC，以及无数次自鸣得意，或者自取其辱。</p><p>在那之前，我把陪伴我半年的电脑送至北京维修，问题没找着，寄走后的 12 天里，我却不仅没有创作的能力，还丧失了与老朋友们同乐的权利。彼时，我不敢打扰忙于维系感情、极少听我倾诉的朋友，加上仿佛深入骨髓的要强，放任自己被找不到出口的情绪淹没的某天晚上，长沙城上一层雾气，我站在湖上桥的正中「看到万家灯火把盖着一层薄雾的夜空照亮，却看不到这偌大一个城里我的位置」。此心不安，吾乡难觅啊。</p><p>在那之后，我站在同一片湖上的同一座桥，终于放下了我一文不值的要强，一边打着电话一边望着桥下的水，思考了很久很久，不知道自己会被带去何方。半年后的今天，我还是不知道。或许本来就没有那么多路，或许车到山前必有路、船到桥头自然直；或许直到迟暮之年，我安详地躺在床上整理一生时才能下结论，或许我永远都不能。谁知道呢。</p><h2 id="夏：凡追悔莫及之物皆美不胜收"><a href="#夏：凡追悔莫及之物皆美不胜收" class="headerlink" title="夏：凡追悔莫及之物皆美不胜收"></a>夏：凡追悔莫及之物皆美不胜收</h2><blockquote><p><em><strong>戻らない後悔の全部が美しいって</strong></em><br>そういうのさぁ、僕だってわかるのに</p><p>ヨルシカ - 思想犯</p></blockquote><p>我逃不开的，只有这我一直都知道。</p><p>7 月 11 日晚上，大一最后一个学期终于结束。7 月 14 日，挂在我心口的大石头终于把我砸了个粉碎。我终于开始准备驾考，暑假，也终于宣告终结。</p><p>从那一天开始几乎一个月，我活进了高考以来最深的焦虑，焦虑着何时出发、何时结束，焦虑着我握住方向盘的半个小时中，纵然微小却能使副驾驶不耐烦的每个动作。我活进了一个月的讨好与厌恶，前者给教练，后者给总将教练脾气归咎于自己的自己。支离破碎的生活里，我的精神状态迅速恶化，不敢置身幽闭的环境，不敢和人坦率地交流，甚至不敢阅读沉重的文字。八月初，奔赴驾考考点前夜，我在床上辗转反侧，为一件小事歇斯底里。回想起来才知道，那些日子里我的思考能力一直被屏蔽，我却什么都做不到。</p><p>事出必有因。活成了客套与讨好、被自己厌恶得不敢直视自己的自己，「一遍过拿证」的鲜活例子，四位数起跳、凭良心收取的高得离谱的考试费，资源垄断的驾考考点，不熟悉的环境与不适应的伙食……我裹挟于它们之中，早已分不清谁才是让我连续失利两个科目，放弃暑假内完成驾考的最后一根稻草。我成功脱身那一刻，席卷我的甚至不是失落。我只感到释然。</p><p>或许还有以为暑假已经结束的，虚伪的平淡。平淡的《控制》，平淡的竞赛。平淡地被埋葬的自己。</p><p>但这种真实的麻木只持续到八月底，持续到我踏上漫漫长路，踏上一方异乡的土地。踏上青岛。</p><p>青岛，青岛。</p><p>半年前的我对自己说，如果像这样的送别有下一次，我决不会离开，我要站进航站楼，望着一架架飞机逐渐抬升，冲进它们的云海。</p><p>我最后没有做到，因为这次，我冲进了我的云海。</p><p>青岛，青岛。</p><p>第一天抵达，五四广场海风徐徐，脚下不远处的海面波光粼粼。从那时起，我清晰地知道，我从来没有被埋葬，只不过这两个月中，从来没有被唤醒。我清晰地知道，这就是我终究要来的地方。</p><p>我用一天的时间在崂山、太清、麦岛、台东，在云雾缭绕间、山水环流中，彻底干掉此前因过量运动而疲惫不堪的膝盖，用每天百十张照片的速度塞满相册，乐此不疲。然后是栈桥、八大关，是小青岛、万象城、信号山和鲁迅公园的乱石浅滩；是开海鲜嫩弹牙的虾水饺，是粥全粥到入口即化的黄花鱼，是信号山上某家店里装满一杯凉茶的格调。</p><p>是一路绵延进我心里的海岸线，是一座古老城市的气息与血脉，是无处安放所以无处不在的大海，是我摸不清看不透却挥之不去的青岛。</p><p>青岛，青岛。</p><p>我启程前想，也许这次旅途可以改变很多东西，对我来说的确是这样。难以忘怀的四天里，我与另一个人朝夕相处，直到相距千里，形影不离。难以忘怀的四天里，我后悔直到暑假最后几天才意识到，原来这个夏天本可以完全不一样，原来那一个月的碌碌无为，不会如我所想的那样平复我对暑假的期许。这难得的两个月假期，我本该如此开心地活着。难以忘怀的每一个夜晚，连同难以忘怀的那次半醉，我将自己活成没有明天的模样，害怕时间就此离去。难以忘怀的每一刻，尤其是归途前的最后一个深夜，当我把文字当作记录与埋葬昨天的载体，当我以自己的方式发现、正视今天，以及归途前的最后一个小时，当他把我送到机场，我报之以另一个深拥，我确实已经不需要明天。</p><p>青岛，青岛。</p><p>直到我回到一方似曾相识的土地，感受迟到太久的离别；直到我循环着《思想犯》中的俳句，不知秋风何时能拂去离别吹来冬日，不知何时才能见到另一个夏天；直到四个月后，那四天的幻象仍旧挥之不去，作为逝去夏日里的难得珍宝，熠熠生辉；直到我 2021 的后半段，多了一个魂牵梦萦的地方；直到此刻，当我挥笔写下来路与迷惘，我还在轻声呼唤那座城市。</p><p>青岛，青岛。</p><h2 id="秋：错把飞絮当春雪，竟只是为了将你看不见"><a href="#秋：错把飞絮当春雪，竟只是为了将你看不见" class="headerlink" title="秋：错把飞絮当春雪，竟只是为了将你看不见"></a>秋：错把飞絮当春雪，竟只是为了将你看不见</h2><blockquote><p>ただ、ただ雲を見上げても<br>視界は今日も流れるまま<br>遠く仰いだ夜に花泳ぐ<br><em><strong>春と見紛うほどに、君をただ見失うように</strong></em></p><p>ヨルシカ - 藍二乗</p></blockquote><p>开学头一个月，我恍惚中还活在青岛，闭上眼睛还能闻到海风拂过沙滩，却只能睁开眼，用忙碌回应猝不及防的现实。我和一群孩子过了个中秋，重新拾回了一点活力，但它又被生活、综测与麻木压了下去。回家住了五天又回到学校，从我收拾好书包去图书馆自习的路上写下一段话，片刻思索后按下 Send 键开始，一切都变得不一样。</p><p>那时，我决定告别被糖分绑架的自己。</p><p>大概是从初三开始，糖成了我生活中不可或缺的一部分，我以可乐或奶茶庆祝成功，也用它们盖过失意与怅惘。借助糖分提供的多巴胺，我经历了高中思绪万千的无数个黄昏，被情绪淹没的晚上，以至心神不定的每个昼夜。体重的长期稳定让我忽视这种依赖，直至国庆五天，我以一己之力喝掉了五杯糖分（现在看来）严重超标的奶茶。</p><p>是不是什么错了？为什么我对糖的喜爱已经到了这个地步，以至于靠近奶茶店我就已经在想今天喝什么了？糖对我真的好吗？我没法摆脱对多巴胺的依赖，没有它就活不下去吗？我家的糖尿病史同意不同意呢？</p><p>所以我决定至少做出一些改变。至少告别被糖分绑架的自己。</p><p>这很难。即使我对自己的要求是在不摄入游离糖，不喝含糖饮料不吃高糖零食的基础上尽量减少碳水，这一开始也很难，特别是与一群人一起出门时，大家都想喝茶颜可乐，唯独我必须选择无糖款，或者不喝，再大费口舌解释原因。戒断反应最强烈的时候，我走在路上，眼巴巴望着经过的奶茶店，幻想四季奶青、声声乌龙的口感，再往嘴里猛灌一大口水，加快步伐离开。</p><p>好在养成一个习惯只需要 21 天。我在忙碌中，在订阅者们的监督下，成功度过了最难熬的日子，内心的想法从「啊就这一杯无糖可乐我这周绝对不再喝」，逐步变成了「我上次喝代糖饮料好像还是上个月的事情（除开体育课的运动饮料）」。某天，当我和同学走进超市，惊讶地发现我居然很久没再看过饮料柜，甚至都快忘记可乐的口感时，目标基本达成的成就感无疑比人工添加糖更让人感到愉悦。改变还不止于此。我没有明显感觉，没有实际称过，寒假回家才能证实，但每次视频电话我妈都觉得我在减肥（事实上恩格尔系数快 90% 了）。我感觉得到的是皮肤状况明显改善，不再需要维 A 酸就能和伴随我三年的痘痘「断舍离」，脸部只剩下一些顽固的痘印。</p><p>最重要的是，离开糖之后，我一直在探索更健康的生活方式。放下手游，放下 10min 以内的短视频，放下一切短期刺激，我一次又一次思考自己到底想活成什么样。毕竟，连对糖的依赖都能改，还有什么不能呢？因为对身体素质的追求和体育课致死量的运动，我的活动能力逐渐增强，最大摄氧量一路走高，体测时 1km 跑进了从没想过的 4min。从新闻、资讯开始，晚上我给自己留出时间，屏蔽一切外部干扰，重新习惯与长篇文字为伴的生活。对夏天也好，对糖分也好，对过去的自己也好，我向它们挥手道别，在 suis 的歌声中，寻找我存在的意义。</p><h2 id="初冬：人生真是绝佳的消遣啊"><a href="#初冬：人生真是绝佳的消遣啊" class="headerlink" title="初冬：人生真是绝佳的消遣啊"></a>初冬：人生真是绝佳的消遣啊</h2><blockquote><p><em><strong>Life is such a wonderful waste of time</strong></em><br>I wanna spend it with love<br>If you don&#39;t mind</p><p>SILENT POETS - Almost Nothing</p></blockquote><p>可能因为生活逐渐平淡，没有作为判断依据的大事发生，可能因为比起前一年、前一天，每一年、每一天在我人生中的占比越来越小，我所感知的时间越走越快，即使一件事离我太久，突然忆及也像是昨天。当我稍不注意，一年时光已经消逝。准备给这一年划上句号，回望自己时，我竟想不起什么聊以记叙，仿佛我这一年从未活过，或者每件事都被拆散成了无数个碎片，散落进每一天。</p><p>这个十二月的某一天中午，耳机里塞着熊光的《君に夢中》入眠时，我的意识朦胧间回到了一年半以前，还住在起初难以称之为家、阳台门一开就嘎吱响、有无数小昆虫陪我度过三年的小出租房，还走在一侧开了四家奶茶店、每天来回好几趟、拥挤得必须和车同行的水泥路，还坐在午休刚醒时连人一起昏昏沉沉、一成不变得有点漫长、永远有那些人的教室。我大概从未离开吧。</p><p>这个十二月的某一天下午，我与友人从宜家出来，抱着一大块碍事的小推车即将抵达学校时，被五一广场迷路的另一个人叫住了。不带任何犹豫地，我带上小推车，跳上反向的地铁，一路狂奔跑过地铁站和熙熙攘攘的国金街，连带翘掉了一次班会。那个下午我知道，不需要任何特殊目的与准备，单单是老友见面就能让人很开心。总希望能给人带来帮助的我，那个下午如愿以偿，时至今日，我仍庆幸那时自己做出了这样的决定。我确实从未离开啊。</p><p>这个十二月的某一天晚上，教室里冬风肆虐，吹得我双脚冰凉，本应将精力放进化学，可思绪早被吹散到九霄云外，想起更久远以前相同的寒风，不同在我并非强迫自己吃透难以理解的知识，而是等待着一份热气腾腾的卤肉卷，好塞进外套，隔着棉絮和纸袋温暖我到家前最后一段路程；期待着最后一口下去四溅的汁水，不忘与同行人相谈甚欢。可我早就离开太远了。</p><p>也许正如我怀念高中生活一样，若干年后，已经进入工作岗位的我，会机缘巧合之下怀念起大学，怀念一些陪我度过四年的人，怀念我许多晚上用《死亡搁浅》与人相连，怀念每天早上从寝室到教学楼之间的漫漫长路，怀念某一天，我坐在寝室床上，怀念着那个怀念过去的自己。这么长的马拉松里，只有时间是永恒的冠军，我和回忆里的一切都没能跑过它，包括被时间冲淡变得疏离的回忆本身。不知不觉间我就会长大，会变老，会看着我之后一代代年轻人长大，变老。即便如此，我依旧盼望见到那个还能忆起往事，还会义无反顾地出现在一些人身旁的自己。时间流逝本应让人万般不愿，可人生正是这样绝佳的消遣啊，在路途上有那些人为伴，听起来就不再那么寂寞。启程前，将一些时间没能冲刷掉的事情铭记于心的我，或许早已不再害怕前行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;初代 Cytus 的设定很有意思，作为人类永生的载体，为了防止人类的记忆被新的记忆覆盖后的情感消失，机器人们会将情感化为音乐存储在名为 Cytus 的空间，每过一段时间就使用这些音乐感受情绪与灵魂。&lt;/p&gt;
&lt;p&gt;作为人类，浑浑噩噩中度过的每一天，我同样依赖音乐触摸我的灵魂，而在我选出来的五首歌里，是我过去一年的故事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文长约 4800 字，阅读约需 12 分钟，全程无图，请放心食用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;暮冬：你啊-为何不愿停下&quot;&gt;&lt;a href=&quot;#暮冬：你啊-为何不愿停下&quot; class=&quot;headerlink&quot; title=&quot;暮冬：你啊 为何不愿停下&quot;&gt;&lt;/a&gt;暮冬：你啊 为何不愿停下&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;寂寞的人呐 显得不慌忙啊&lt;br&gt;雨下得再大 &lt;em&gt;&lt;strong&gt;你啊 为何不愿停下&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;越冠冕堂皇 越贪嗔痴狂啊&lt;br&gt;折不折又怎样 你是我永不凋谢的花&lt;/p&gt;
&lt;p&gt;Ring - 堪折&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="年度总结" scheme="https://blog.rachelt.one/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>一把钥匙一把锁，我的双 PC 工作流</title>
    <link href="https://blog.rachelt.one/articles/my-dual-pc-workflow/"/>
    <id>https://blog.rachelt.one/articles/my-dual-pc-workflow/</id>
    <published>2021-11-09T17:12:36.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>学期初，我终于攒出了人生第一台台机。R7 2700X (Zen+) 和 1060 的配置，时至今日最多中端水平，对于一个 <ruby><rb>使用</rb><rt>忍受</rt></ruby> 了一年轻薄本的人来说，却足以被称为一次飞跃。约两个月后的今天，我设想的两种极端情况（完全抛弃 Gram &#x2F; 完全依赖 Gram）都没发生，而我则已经摸出了一个适合自己的方案：一把钥匙（LG Gram）对应一把锁（台机）。正式开始之前，先从硬件配置说起吧。</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><table><thead><tr><th></th><th>台机</th><th>Gram</th></tr></thead><tbody><tr><td>CPU</td><td>Ryzen 7 2700X</td><td>i7-1065G7</td></tr><tr><td>GPU</td><td>GTX 1060</td><td>Iris G7</td></tr><tr><td>RAM</td><td>8GB 3200 x2</td><td>16GB 2933 x2</td></tr><tr><td>屏幕</td><td>4K (ppi 183.58)</td><td>1080p (ppi 157.35)</td></tr></tbody></table><p>如上所示，我并没有给自己攒出一台秒天秒地的 <ruby><rb>台机</rb><rt>空气</rt></ruby> ，在 2021 年的今天，我不得不在 <ruby><rb>配置</rb><rt>预算</rt></ruby> 上做出不少妥协。好在以前从未将这么强悍的配置（即使中端）作为主力，这些妥协并没有影响我的体验，倒很适合我反复考量这两台机器的使用场景与职能。以下是我考量过后的结果：</p><span id="more"></span><h2 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h2><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><p>除非使用的是 Apple 全家桶，否则文件传输始终是不可避免的一大障碍。我解决这个障碍的主要工具是 <a href="https://landrop.app/">LANDrop</a> ，它提供了无与伦比的局域网内互传体验，使 Android &#x2F; Windows &#x2F; iOS 三个平台传文件变得极为顺手。然而，LANDrop 在 Windows 上偶尔会绑定不了端口，并且传输纯文本很麻烦，因此我还将 <a href="https://snapdrop.net/">Snapdrop</a> 作为另一个方案。它只需要浏览器、即开即用，适合承担较轻的文件 &#x2F; 文本传输工作。除此之外，用 Python 随手跑一个 HTTP server 之类的此前是我的常用解，用于传输文件也足够，只是不方便。</p><p>我在 <a href="https://blog.rachelt.one/articles/my-way-of-backing-up/">《从本地到云端，我的数据备份方案》</a> 中所述的方案，在双 PC 的情况下对 Gram 依旧适用，Documents 等文件夹仍然会被实时备份到 OneDrive。这对于 Gram 的定位来说无比方便，我更多时候是在图书馆、教室等地方使用 Gram，只要关机前网络连接顺畅，那么大部分文件都无需担心同步问题。同时，我会有意识地将正在撰写的文档保存至 OneDrive，这样便能在全平台随时随地阅读、编辑。</p><p>至于台机，由于我在寝室还兼职提供打印服务，台机上存储了各种各样的零散文档，把它们全部传到 OneDrive 浪费空间又占用资源，在我注重备份工作文件的情况下，台机的 Documents 等文件夹没有那么重要，所以我并未采取特殊方案保护它们，只开启了 Windows 自带的内网文件共享， 以便需要的时候台机上的文件可以随时从 Gram 使用。</p><p>当然，还有些文件不适合上传至 OneDrive 也不适合手动共享，例如包含了致死量编译中间体和 <code>node_modules</code> 的 Projects。OneDrive 羸弱的自定义特性使备份无比让人脑梗，好在我大部分项目都开源在了 GitHub，提交频繁的情况下并不需要过于担心代码写到一半宕机，但维护两份代码库太耗精力，每次在 Gram 上编辑后还得先 <code>git commit &amp;&amp; git push</code> 再在台机上 <code>git pull</code> 不算优雅，所以我选择了 <a href="https://github.com/canton7/SyncTrayzor">SyncTrayzor</a> ，一个易上手的 Windows 端 Syncthing 工具，用以在两台 Windows 电脑间共享 Projects 文件夹。利用 Syncthing 的排除文件特性，我能够仅共享所有工程的源代码部分，从而实现迅速、即时的文件同步。</p><p>使用 Syncthing 还有一个好处：把 Gram 当「钥匙」成为可能。</p><h3 id="代码管理与安全性"><a href="#代码管理与安全性" class="headerlink" title="代码管理与安全性"></a>代码管理与安全性</h3><p>言归正传，什么是钥匙？什么是锁？</p><p>就我而言，借助更强的性能，主要用于调试、编译的台机是我给自己设下的锁，我 SSH Key 的存放点，诸多账户恢复代码的保存处，被 BitLocker with PIN 锁上的 Gram 则是那把用于解锁自己的钥匙。</p><p>所以大部分时候，我会在台机上写作或者写代码。机械键盘过硬的手感和台机不俗（至少和 Gram 比起来）的性能，加上 4K 屏提供的绝佳锐利度，让这一过程比起盯着 Gram 的 1080p 小屏敲打着不知说好还是坏的笔记本键盘来说，满足感高了不止一个档次。当我准备好 <code>git commit &amp;&amp; git push</code> ，Syncthing 已经把源代码同步好了，只须在 Gram 上的 WSL 中定位到对应的目录，将代码上传至云端。</p><p>这全程经过了数个只有我本人才能解开的认证步骤，最大化保证了「我是我」。首先，BitLocker with PIN 加密的硬盘，防止了暴力将 SSD 拆出读取数据，也解决了 <a href="https://pulsesecurity.co.nz/articles/TPM-sniffing">TPM 明文传输密钥的安全隐患</a> ；然后，Windows Hello 要求使用指纹或 PIN 才能进入系统，对于电源指纹一体化的 Gram 来说非常方便；最后 WSL 里要求 passphrase 才能使用的 SSH Key、被不同密码保护的 Keybase 和各账户…如果真的有人能够连续突破这几道防线，那个人只能是我吧。</p><p>由于对安全性的高要求，加上目前的 Gram 几乎没有性能压力，我完全开启了 <ruby><rb>基于虚拟化的安全性保护</rb><rt>virtualization-based security, VBS</rt></ruby> ，手动启用了 <ruby><rb>内存完整性</rb><rt>Memory integrity</rt></ruby> 等 ，就是此前在 Windows 11 上被发现会「影响系统性能」并因此被口诛笔伐的那系列功能。虽说无法 100% 保证设备安全，很多时候也像是无用功（ <em>「一普通用户这么在意安全干嘛？怕不是藏了不可告人的东西」</em> ），能够降低风险的事情总归不坏。</p><p>我想过在台机上启用更激进的安全策略，可惜 2000 系及以前的 Ryzen 处理器不在 Windows 官方的支持列表里，不确定是 Zen 2 加入的新魔法还是单纯 Zen+ 及更早产品的性能过于拉胯，总之 VBS 在这种情况下较明显地影响到了用户体验，和 Windows 11 的拉胯相辅相成，以至于我为了彻底禁用 Device Guard、Credential Guard 和可能随着 Hyper-V 一同启用的 <ruby><rb>HVCI</rb><rt>Hypervisor-Protected Code Integrity</rt></ruby> 等功能，连着 secure boot 都一起干掉了。挺无奈的。</p><h3 id="娱乐-也是工作的一部分！"><a href="#娱乐-也是工作的一部分！" class="headerlink" title="娱乐 也是工作的一部分！"></a>娱乐 <del>也是工作的一部分！</del></h3><p>如果让我在这两台设备中选出最佳内容消费工具，那我大概会毫不犹豫地选择 iPad Pro。它具有一些我这两台设备都不具备的特征：长续航、无实体键盘、触摸、屏幕比例方正等，还能夹在床边（依赖京造的长臂夹， <strong>不推荐</strong> ），目前不管是接上 USB DAC 听歌、玩音游还是逛 B 站、用 Kindle app 读书和 RSS feed 都是我的第一选择。</p><p>平时写作、开发，或者哪怕单纯开着电脑坐在桌边写作业，BGM 都很有必要，这时台机上的 Windows 11 红利： <ruby><rb>WSA</rb><rt>Windows Subsystem for Android</rt></ruby> 成了不可或缺的一部分，因为 <a href="https://music.apple.com/">Apple Music 网页端</a> 和 iTunes 都一个德性：难用，Android 端的 Apple Music 客户端完美地解决了这一问题。Gram 则更多使用 Foobar2000 播放我从弃置的前端上转移过来的本地音乐，它们包含了一些游戏的解包 BGM、电台曲目等难以在流媒体平台找到或加入播放列表的部分，以及一些个人收藏、自购的专辑。</p><p>无所谓的有两个：除了音游，甚至连音游在内的所有游戏都由台机负责解决，视频消费…我没有重温电影或剧集，甚至没有看它们的习惯，更不可能收藏了。我对视频消费的最高追求是在 YouTube 或者主要是 B 站看码率只有 3Mbps 的 1080p。无所谓了。</p><p>不过总的来说，在这一方面，毕竟我的娱乐需求偏向「随便」，不刻意，所以也不在意。听歌时，大部分情况下，我会随便抓起离我最近的耳机，使用离我最近的随便什么设备，随便听点收藏过而且没有厌倦的曲目。游戏时，作为自闭单机玩家，就…挺随便的，大部分时候没人管我。视频嘛那更随便了，B 站动态过一遍，把感兴趣的加进「稍后再看」然后随便抽空看完，我随便的娱乐需求就解决了。最不随便的居然是 RSS feed，因为 KindleEar 抓取和 Kindle 推送的限制，我被迫精挑细选，结果倒也不错。</p><h2 id="聊以作结"><a href="#聊以作结" class="headerlink" title="聊以作结"></a>聊以作结</h2><p>目前，我在日常使用中需要两台设备协同的部分，可能连带着使用习惯等等，到这里已介绍完毕。篇幅较短，还请见谅。我还考虑过很多其它的方案来扩展这一体系，例如搭建一台 NAS 作为下载机、存档机，使用闲置的 SSD 安装 Linux 等，但它们有的考验我的预算，还有的配置完成后也只会有吃灰的结局，最终我都没有实行。总之，对于现在的我而言，如此就是最优解了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学期初，我终于攒出了人生第一台台机。R7 2700X (Zen+) 和 1060 的配置，时至今日最多中端水平，对于一个 &lt;ruby&gt;&lt;rb&gt;使用&lt;/rb&gt;&lt;rt&gt;忍受&lt;/rt&gt;&lt;/ruby&gt; 了一年轻薄本的人来说，却足以被称为一次飞跃。约两个月后的今天，我设想的两种极端情况（完全抛弃 Gram &amp;#x2F; 完全依赖 Gram）都没发生，而我则已经摸出了一个适合自己的方案：一把钥匙（LG Gram）对应一把锁（台机）。正式开始之前，先从硬件配置说起吧。&lt;/p&gt;
&lt;h2 id=&quot;硬件配置&quot;&gt;&lt;a href=&quot;#硬件配置&quot; class=&quot;headerlink&quot; title=&quot;硬件配置&quot;&gt;&lt;/a&gt;硬件配置&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;台机&lt;/th&gt;
&lt;th&gt;Gram&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Ryzen 7 2700X&lt;/td&gt;
&lt;td&gt;i7-1065G7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;GTX 1060&lt;/td&gt;
&lt;td&gt;Iris G7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RAM&lt;/td&gt;
&lt;td&gt;8GB 3200 x2&lt;/td&gt;
&lt;td&gt;16GB 2933 x2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;屏幕&lt;/td&gt;
&lt;td&gt;4K (ppi 183.58)&lt;/td&gt;
&lt;td&gt;1080p (ppi 157.35)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如上所示，我并没有给自己攒出一台秒天秒地的 &lt;ruby&gt;&lt;rb&gt;台机&lt;/rb&gt;&lt;rt&gt;空气&lt;/rt&gt;&lt;/ruby&gt; ，在 2021 年的今天，我不得不在 &lt;ruby&gt;&lt;rb&gt;配置&lt;/rb&gt;&lt;rt&gt;预算&lt;/rt&gt;&lt;/ruby&gt; 上做出不少妥协。好在以前从未将这么强悍的配置（即使中端）作为主力，这些妥协并没有影响我的体验，倒很适合我反复考量这两台机器的使用场景与职能。以下是我考量过后的结果：&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="数据" scheme="https://blog.rachelt.one/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用 Indirect Display 虚拟显示器，全屏 Moonlight 串流</title>
    <link href="https://blog.rachelt.one/articles/fake-display-for-moonlight/"/>
    <id>https://blog.rachelt.one/articles/fake-display-for-moonlight/</id>
    <published>2021-10-18T11:17:32.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>前几天终于用上了极为先进的 Moonlight，体验到了在移动端低延迟畅玩 3A 大作（主要是躺在床上推《魔夜》），却也遇到了一些不爽的地方，比如目前移动端设备千奇百怪，常规电脑渲染的 16:9 的画面，几乎不能在 2021 年的移动设备上铺满屏幕。怎么办呢？极客湾选择把用不上的输出接口与用不上的显示器接口连接起来，调整这个不存在的显示器的大小；市面上也有很多 HDMI 诱骗器，几十甚至十几块就能解决问题；我在看过蚊子大佬的博客后，选择动手折腾一个 Indirect Display，试试在不依赖外部设备的情况下，虚拟出第二个显示器用来串流。</p><p>因为不同设备的屏幕分辨率、刷新率不尽相同，使用 Indirect Display 还得信任签名时使用的证书，因此本文不会提供编译好的版本。不过编译并不复杂，具备计算机基础知识即可。</p><span id="more"></span><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>前提条件当然是一台运行 Windows 10 的电脑。都这年头了，能用 Moonlight 串流这个条件不可能不满足吧……？</p><p>接下来安装的是 <a href="https://visualstudio.microsoft.com/downloads/">Visual Studio 2019 社区版</a> 。打开安装程序，勾选「使用 C++ 的桌面开发」这个工作负荷。除此之外，还应当在「单个组件」里勾选你电脑指令集架构对应的，用来缓解 Spectre 影响的编译库，使用英文时它通常就在某个已经勾选的 MSVC 的下方，使用中文时搜索「MSVC 最新」可以很快找到。例如，在我的电脑上，默认勾选了 <code>MSVC…x64/x86 build tools (Latest)</code> ，那么只要再勾选上 <code>MSVC…x64/x86 Spectre-mitigated libs (Latest)</code> ，如图所示。</p><p><img src="install-spectre-mitigated-libs.png" alt="install-spectre-mitigated-libs"></p><blockquote><p>如果你安装 Visual Studio 的时候没有安装 Spectre 缓解库，可以打开安装程序补上，或在编译时无视 Spectre 警告和安全风险，尽管我个人不推荐这么做。</p></blockquote><p>等待安装程序下载 Visual Studio 的这段时间，可以用来获取 GitHub 上 <a href="https://github.com/microsoft/Windows-driver-samples/tree/master/video/IndirectDisplay">微软官方提供的 Indirect Display 示范程序</a> 。对 Git 和 Subversion 熟悉的话随意，不熟悉可以点击 <a href="https://github.com/microsoft/Windows-driver-samples/releases/download/159399/IddSample.zip">GitHub - IddSample.zip</a> 或者 <a href="https://hub.fastgit.org/microsoft/Windows-driver-samples/releases/download/159399/IddSample.zip">备用镜像 - IddSample.zip</a> 下载打包好的 zip 文件。它只有 20KB 大，下载下来后解压到任意一个能找到的地方就行。</p><p>Visual Studio 安装完毕后，我们还缺了编译驱动程序所需的 <a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/download-the-wdk">Windows 驱动程序工具包</a> (WDK)。官方提供的版本已经更新到了 Windows 11，跟着官方步骤走不会出问题，但 Windows 11 的软件开发工具包（SDK）尚未在 Visual Studio 中提供，得单独下载，而且还没有本地镜像…… <a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/other-wdk-downloads">其他 WDK 下载</a> 里的 <a href="https://go.microsoft.com/fwlink/?linkid=2128854">适用于 Windows 10 版本 2004 的 WDK</a> 就能够满足需求了。WDK 安装完毕之后会提示安装 Visual Studio 扩展，保持默认设置。</p><h2 id="代码改动"><a href="#代码改动" class="headerlink" title="代码改动"></a>代码改动</h2><p>打开 Visual Studio，点击「打开项目或解决方案」，找到存放代码的地方，打开 <code>IddSampleDriver.sln</code> ，Visual Studio 会自动加载整个项目。接着，在右边「解决方案资源管理器」里，展开 <code>IddSampleDriver - Source Files</code> ，打开 <code>Driver.cpp</code> ，先不管 <code>Driver.tmh</code> 的报错（生成的时候会自动解决），改动下面几个地方：</p><h5 id="Line-27"><a href="#Line-27" class="headerlink" title="Line 27"></a>Line 27</h5><pre><code class="highlight c++"><span class="type">static</span> <span class="keyword">constexpr</span> DWORD IDD_SAMPLE_MONITOR_COUNT = <span class="number">3</span>;</code></pre><p>这一行意思是创建的虚拟显示器数量。默认是 3 个，按需修改吧。</p><h5 id="Line-52-54"><a href="#Line-52-54" class="headerlink" title="Line 52~54"></a>Line 52~54</h5><pre><code class="highlight c++">&#123; <span class="number">2560</span>, <span class="number">1440</span>, <span class="number">144</span> &#125;,&#123; <span class="number">1920</span>, <span class="number">1080</span>,  <span class="number">60</span> &#125;,&#123; <span class="number">1024</span>,  <span class="number">768</span>,  <span class="number">60</span> &#125;,</code></pre><p>这里就是虚拟显示器的显示模式了，三个数字分别代表了宽度、高度和刷新率。可以直接修改已有的数字，如果需要更多显示模式，得将 <code>Header Files</code> 里 <code>Driver.h</code> line 42 的 <code>szModeList</code> 改为相对应的数值（默认是 3）。</p><h5 id="Line-58-75"><a href="#Line-58-75" class="headerlink" title="Line 58~75"></a>Line 58~75</h5><p>这十几行定义了另一个虚拟显示器，用不上可以直接删除。</p><h5 id="Line-772-781"><a href="#Line-772-781" class="headerlink" title="Line 772~781"></a>Line 772~781</h5><p>你应该能够看到数十行像这样的代码：</p><pre><code class="highlight c++">TargetModes.<span class="built_in">push_back</span>(<span class="built_in">CreateIddCxTargetMode</span>(<span class="number">3840</span>, <span class="number">2160</span>, <span class="number">60</span>));</code></pre><p>这些是驱动向 Windows 汇报的显示模式，三个数字也是宽度、高度和刷新率，它们会出现在显示适配器的「列出所有模式」中。在类似代码后新建一行，把 line 52~54 中自定义的内容以类似格式添加在此。</p><h2 id="编译，安装！"><a href="#编译，安装！" class="headerlink" title="编译，安装！"></a>编译，安装！</h2><p>修改完毕，在上方把 Debug 改成 Release，选择你电脑的指令集架构（一般是 <code>x64</code> ），再打开「生成」菜单，点击生成解决方案。等待进度条走完，出现类似 <code>生成: 成功 2 个，失败 0 个，最新 0 个，跳过 0 个</code> 的输出后，编译好的驱动就已经在 <code>IddSampleDriver.sln</code> 所在的文件夹中，指令集架构对应的文件夹里了（例如 <code>x64</code> 在 x64 文件夹下）。</p><p>为了顺利安装上自制驱动，首先要信任自动生成的证书。打开 <code>IddSampleDriver.cer</code> ，点击「安装证书」，「本地计算机」，「将所有的证书都放入下列存储」然后「受信任的根证书颁发机构」，安装。安装完毕后，关闭证书再打开，会显示这个证书已经受信任。</p><p><img src="install-certificate.png" alt="install-certificate"></p><p>接下来就可以安装设备了。打开「设备管理器」，随便选一项，打开上方「操作」里的「添加过时硬件」，手动安装，一路下一步到「从磁盘安装」，定位到 <code>IddSampleDriver</code> 里面的 <code>IddSampleDriver.inf</code> （外面 <code>Release</code> 文件夹里那个是没签名的装不上），安装。如果一切顺利，打开显示设置就能看到添加的显示器了！卸载也很简单，从设备管理器中移除设备完事。</p><img src="results.png" alt="results" style="width:50%; height:auto;" /><p>当然，在我的试验中，Windows 这个特性的稳定性还…不够让人满意，可能会碰到设备管理器中出现了 IddSampleDriver Device 却找不到第二个显示器的情况，此时你也可以试着以管理员身份运行 <code>Release</code> 文件夹中的 <code>IddSampleApp.exe</code> 或者其它可能行得通的办法，只要能够识别一次，以后就都不会出现问题。Enjoy！</p><h2 id="如果不巧发生问题…"><a href="#如果不巧发生问题…" class="headerlink" title="如果不巧发生问题…"></a>如果不巧发生问题…</h2><p><img src="when-signability-test-failed.png" alt="when-signability-test-failed"></p><p>这个问题最常见的原因是签名工具签名时使用当前时间（中国标准时间是 UTC+8），验证时使用 UTC 时间，导致 0:00~8:00 期间无法以默认设置签名（无法签发未来的证书），通过修改签名设置可以解决这一问题，不过最优解是先睡一觉再继续， <strong>早睡早起身体好！</strong></p><p><img src="when-sign-denied.png" alt="when-sign-denied"></p><p>那么大个 <code>Access is denied</code> 告诉我们，签名工具没有驱动的访问权限（例如丢进了某个磁盘的根目录），将项目文件夹整个移动到用户文件夹（例如桌面）后重新编译就能解决。磁盘已满也会出现这个问题，试试清理一下？</p><h2 id="结果如何？"><a href="#结果如何？" class="headerlink" title="结果如何？"></a>结果如何？</h2><p>在我尝试使用这个显示器串流时，遇到了一点问题…Moonlight 无法选择串流的显示器，会抓取默认显示器的视频流，我们看不到创建的这个显示器的画面，要把这个显示器换成默认几乎不可能。那么如果像极客湾一样把原有的线拔掉呢？</p><p><img src="performance.png" alt="performance"></p><p>就…这样了。低得离谱的帧率、码率（实际感受比这还要卡）和高得离谱的输入延迟兼具，《地平线 4》就算了，连《魔夜》主菜单都卡，显卡的性能被直接腰斩（未测试…甚至全靠 CPU 也有可能？），这就是 HDMI 诱骗器好用的原因吧。不管如何，如果你有类似的需求并且使用的软件支持选择显示器，Indirect Display 的方案或许还挺值得一试的。</p><hr><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>虚拟显示器终极解决方案 IndirectDisplay | <a href="https://qwq.moe/ultimate-virtual-monitor-solution-indirect-display">https://qwq.moe/ultimate-virtual-monitor-solution-indirect-display</a></li><li>How to run Parsec without monitor? Here’s a virtual monitor solution for you (Indirect Display) | <a href="https://archeb.medium.com/how-to-run-parsec-without-monitor-heres-a-virtual-monitor-solution-for-you-indirect-display-ecba5173b86a">https://archeb.medium.com/how-to-run-parsec-without-monitor-heres-a-virtual-monitor-solution-for-you-indirect-display-ecba5173b86a</a></li><li>Indirect display driver model overview - Windows drivers | Microsoft Docs | <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/display/indirect-display-driver-model-overview">https://docs.microsoft.com/en-us/windows-hardware/drivers/display/indirect-display-driver-model-overview</a></li><li>Download the Windows Driver Kit (WDK) - Windows drivers | Microsoft Docs | <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk">https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk</a></li><li>visual studio 2012 - Int2Cat - DriverVer set to incorrect date - Stack Overflow | <a href="https://stackoverflow.com/questions/14148500/int2cat-driverver-set-to-incorrect-date">https://stackoverflow.com/questions/14148500/int2cat-driverver-set-to-incorrect-date</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天终于用上了极为先进的 Moonlight，体验到了在移动端低延迟畅玩 3A 大作（主要是躺在床上推《魔夜》），却也遇到了一些不爽的地方，比如目前移动端设备千奇百怪，常规电脑渲染的 16:9 的画面，几乎不能在 2021 年的移动设备上铺满屏幕。怎么办呢？极客湾选择把用不上的输出接口与用不上的显示器接口连接起来，调整这个不存在的显示器的大小；市面上也有很多 HDMI 诱骗器，几十甚至十几块就能解决问题；我在看过蚊子大佬的博客后，选择动手折腾一个 Indirect Display，试试在不依赖外部设备的情况下，虚拟出第二个显示器用来串流。&lt;/p&gt;
&lt;p&gt;因为不同设备的屏幕分辨率、刷新率不尽相同，使用 Indirect Display 还得信任签名时使用的证书，因此本文不会提供编译好的版本。不过编译并不复杂，具备计算机基础知识即可。&lt;/p&gt;</summary>
    
    
    
    
    <category term="串流" scheme="https://blog.rachelt.one/tags/%E4%B8%B2%E6%B5%81/"/>
    
    <category term="应用" scheme="https://blog.rachelt.one/tags/%E5%BA%94%E7%94%A8/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="Moonlight" scheme="https://blog.rachelt.one/tags/Moonlight/"/>
    
  </entry>
  
  <entry>
    <title>STFW.info 现已正式迁移至 RachelT.one！</title>
    <link href="https://blog.rachelt.one/articles/migrating-from-stfw-info-to-rachelt-one/"/>
    <id>https://blog.rachelt.one/articles/migrating-from-stfw-info-to-rachelt-one/</id>
    <published>2021-10-10T14:12:21.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>Rachel 建站以来的第一次域名迁移已完成！从原来一时兴起注册的 Search The F**king Web 到 Rachel T &#x2F; Tone，希望能够使网站更独一无二！</p><p>STFW.info 将在 2022&#x2F;04&#x2F;22 过期，在这期间，对原域名已迁移部分的访问将被重定向至 RachelT.one 对应的子域名，无需迁移部分保持不变；过期后，对 STFW.info 的访问将不再由我控制。若您收藏了过往文章或订阅了我博客的 RSS，建议在旧域名到期前尽快更新。我对域名迁移导致的不便深表歉意，欢迎您随时通过 <a href="https://rachelt.one/">RachelT.one</a> 中的联系方式向我反馈迁移后出现的问题。</p><span id="more"></span><p>说到这里，博客已经蒙尘半年，感谢您在我不辞而别如此久后仍保持对这个微不足道的私人博客的关注。近期可能会有新文章，但没有对技术的深入探讨；此前承诺的 Nuklear 介绍因太过久远积重难返，发布的可能性较低，即使发布也很难达到理想水准，非常抱歉。我个人已经许久没有接触到前沿技术，甚至许久没有写过代码，历史项目的维护也难以为继，还请谅解。大二以来，作为一名高中化学及格次数屈指可数的化工专业学生，专业课程和每周六天的排课让我喘不过气，更重要的是我不知道是否还有继续发展技术水平的必要，然后就在日复一日的生活中逐渐懒散。很遗憾、很让人失望，半年之后，我还被困在一团白茫茫的雾里，摸不出前进的方向。但是如果我不知道，又有谁能知道呢？</p><hr><h4 id="迁移的域名列表："><a href="#迁移的域名列表：" class="headerlink" title="迁移的域名列表："></a>迁移的域名列表：</h4><table><thead><tr><th>原域名</th><th>新域名</th></tr></thead><tbody><tr><td><a href="https://me.stfw.info/">me.stfw.info</a></td><td><a href="https://rachelt.one/">rachelt.one</a></td></tr><tr><td><a href="https://blog.stfw.info/">blog.stfw.info</a></td><td><a href="https://blog.rachelt.one/">blog.rachelt.one</a></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rachel 建站以来的第一次域名迁移已完成！从原来一时兴起注册的 Search The F**king Web 到 Rachel T &amp;#x2F; Tone，希望能够使网站更独一无二！&lt;/p&gt;
&lt;p&gt;STFW.info 将在 2022&amp;#x2F;04&amp;#x2F;22 过期，在这期间，对原域名已迁移部分的访问将被重定向至 RachelT.one 对应的子域名，无需迁移部分保持不变；过期后，对 STFW.info 的访问将不再由我控制。若您收藏了过往文章或订阅了我博客的 RSS，建议在旧域名到期前尽快更新。我对域名迁移导致的不便深表歉意，欢迎您随时通过 &lt;a href=&quot;https://rachelt.one/&quot;&gt;RachelT.one&lt;/a&gt; 中的联系方式向我反馈迁移后出现的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="公告" scheme="https://blog.rachelt.one/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>迎接又一次意难平</title>
    <link href="https://blog.rachelt.one/articles/facing-another-i-could-have-had-it/"/>
    <id>https://blog.rachelt.one/articles/facing-another-i-could-have-had-it/</id>
    <published>2021-04-21T17:16:28.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。</p><p>和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。</p><span id="more"></span><h2 id="It-happens"><a href="#It-happens" class="headerlink" title="It happens."></a>It happens.</h2><p>如何描述呢？和一个孩子不讲道理地把所有东西都砸得稀巴烂一样，我原来初具雏形的人生规划，也被一个没有我名字的名单砸得稀巴烂。</p><p>这或许并不全是坏事。推翻一切从头再来，意味着我有了全新的机遇和全新的选择，我可以追求更不一样的发展目标，可以朝着更不一样的自己前进。不过说实话，我也不知道那都可以是什么。从我得到消息的那一刻起，我的大脑一直一片空白，好像一直在想些什么，却什么都没想出来。让这样的我马上决定未来，未免太勉强我自己了。</p><p>曾几何时，我知道我可以不用担心我羸弱的化学知识，反正不久以后它们都会变成选修课学分里干巴巴的数字，随着时间风化；我知道我马上就能光明正大地坐在属于我的实验室工位上，和同专业的人一起努力；我知道我可以凭借我已经拥有和即将拥有的专业知识完成学业，找到一份比较体面的工作，成为一个我一直想成为的人。</p><p>但现在，我什么都不知道了。如果一定要为今天找一个主题，那它一定是「我不知道」。仿佛宕机一般，我再也不能好好思考问题，再也不能顺畅地表达自己。我甚至还没有想透到底发生了什么，只知道我下个学期仍然要做化学实验，仍然要学有机化学、物理化学；只知道浑浑噩噩快要到头的这一年，被无限期地延长；只知道我一直以来对浑浑噩噩大学四年的恐惧，可能注定要成真，而我还浑然不觉。</p><p>此时浑然不觉的我，真的可以就这样从容接受自己、接受现实吗？还是说，我会在某一刻突然清醒，然后抱头痛哭？如果说海啸往往晚于地震，那地震已经来了，海啸呢？</p><p>海啸尚未降临，选择已经将我淹没。我不知道我该做什么了。我应该继续尝试转专业？尽早安定在化工类？跨专业考研？或者……我真的如我所想的，那么热爱着 Computer Science，以至于需要消耗那么多东西，来为我的热爱陪葬吗？</p><p>一直以来，我秉持着「躺平等死」的态度逃避问题，想把一切留到最后一刻再解决。一直以来，我都知道，我总会无处可逃。在大半个学期过去，我好像还什么都没做到时，我突然也什么都不知道了。</p><p>我终究还是期盼着万事顺意，期盼着让未来的自己活得有模有样，期盼着在纷扰繁杂中以我的步调不断向前。我终究不是能看淡的人。</p><p>如果我是那样的人就好了。</p><p>在久远往昔的展望中，我也曾顽强地说出「不再后悔」。时至今日，在踽踽独行的我真的懈怠、逃避了那么多之后，我也不知道我后不后悔了。</p><h2 id="It-happened"><a href="#It-happened" class="headerlink" title="It happened."></a>It happened.</h2><p>这不是我人生中第一次意难平，也不可能是最后一次。我所知道的是，没有人说得清特定的事对特定的人会产生怎样的影响。我们都没办法预知微小扰动带来的未来。</p><p>几年前某个夏日的下午，我落榜了高中的自主招生考试，在座位上哭得稀里哗啦。今天再来回忆，也许当时的成绩不佳从高中一直注定到今天，也许当时的成绩不佳帮我回避了更多的遗憾，也许当时的成绩不佳让我认识了更好的人、行过了更好的路。这些都不重要，重要的是，当我今天回过头凝望我的人生，这一次的难受，也不过是微不足道的曲折。它并没有阻止我在我的高中度过三年。</p><p>也是在几年前某个夏日，我在百般纠结甚至差一点就放弃机会的情况下，最终还是向模拟联合国提交了申请表。我绝对想不到，当时这小小的举动，引发了一系列的连锁反应，戏剧性地改变了我整个高中甚至整个人生的轨迹。</p><p>如果转专业失利是我大学碰到的第一个不如意，它又会带来什么？我不知道，我也不可能知道。人都是走一步看一步的嘛。</p><p>去年这个时候的我对怀念高中生活的大学生嗤之以鼻，今年这个时候的我不争气地希望那段混着蝉鸣的回忆从未终结。在未来真正到来之前，一切都是未知数。</p><p>而我祈祷着明天更好的太阳，祈祷着无数个明天的回望中，我还以不让自己后悔的姿态活着。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。&lt;/p&gt;
&lt;p&gt;和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>从本地到云端，我的数据备份方案</title>
    <link href="https://blog.rachelt.one/articles/my-way-of-backing-up/"/>
    <id>https://blog.rachelt.one/articles/my-way-of-backing-up/</id>
    <published>2021-04-10T01:00:23.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。</p></blockquote><p>我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。</p><p>事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。</p><p>不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows &#x2F; Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。</p><span id="more"></span><h2 id="云端"><a href="#云端" class="headerlink" title="云端"></a>云端</h2><p>需要说明的是，本文提及的所有云端服务，几乎都可以用同类竞品代替，我的选择主要出于个人喜好，尤其是依赖的生态圈。尽管我的选择存在种种缺陷，考虑到首要目的是最小的精力开销备份最多的数据，还请不要介意，也欢迎提出更多建议。</p><h3 id="Google-Photos"><a href="#Google-Photos" class="headerlink" title="Google Photos"></a>Google Photos</h3><p>我主要照片来源为主力 Android 设备。凭借与 Google 生态的无缝融合，拍摄后十秒内照片基本已备份完毕，可以在所有登陆了 Google 账号的设备上访问。</p><p>当然不止这些。考虑到 6 月开始 <a href="https://blog.google/products/photos/storage-changes/">所有照片都会占用云端存储空间</a> ，我把吃灰的初代 Pixel XL 翻了出来，让它重新派上了用场。我在两台设备上安装了 <a href="https://syncthing.net/">Syncthing</a> ，把照片文件夹从主力机共享给 Pixel，然后使用 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> 模块 <a href="https://forum.xda-developers.com/t/advanced-charging-controller-acc.3668427/">Advanced Charging Controller (ACC)</a> 把 Pixel 最大充电量限制到 80%，插上电扔一边就完事了。这样，只要我一连上 Wi-Fi，所有新照片都会自动同步到 Pixel，接着使用无限云端存储备份原图，最大限度保证了图片的安全。此外，我还利用 Syncthing 的 <ruby><rb>仅发送 &#x2F; 仅接收</rb><rt>send only &#x2F; receive only</rt></ruby> 模式，仅将主力机的照片发送至 Pixel，这样当 Pixel 的 32 GB 存储不够用时，我随时都可以使用 Google Photos 的清理本地文件功能，留出更多的空间给新的照片。</p><p>这样做的缺陷也很明显。首先，照片备份完全依赖 Google，万一某一天 Google 彻底无法访问，或者云端存储耗尽，或者 Google Photos 停止服务，我数年攒下的回忆就会消失；其次，Pixel 已发布四年有余，尽管我相信 Google 为它配备了最好的硬件，一旦它的闪存因为频繁大量碎片读写而报废，那照片备份就会进入倒计时；再就是，每次照片备份都会把同样的文件上传两次（尚未测试主力机关闭上传时能否更新照片库），我颇为担心额外的流量开销；而且 Google Photos 偶尔会把同一张照片当两张存，删哪张都不对劲（删除压缩版本：主力机上原图被带着一起删掉；删除原图版本：云端只保留压缩版）。因此，照片备份绝不能只有 Google Photos，还得带上后面将要提到的 <code>rsync</code> 。</p><h3 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h3><p>OneDrive 无疑是 Windows 上文件备份首选，本文的这一部分就是依赖 OneDrive 的多端同步完成的。它在国内的速度出人意料地不错，它在上传大文件时没能跑满带宽，但碎片文件的同步做得很棒，把文件复制进备份文件夹后就会马上开始备份，几乎感知不到延迟。</p><p>这当然只是一小部分。OneDrive 更大的优势在于它深度整合进了 Windows 10，只要登录 Microsoft 账户就会开始同步文件，并且还能够傻瓜式地将「文档」、「桌面」、「图片」这三个文件夹一键移动进备份目录中，再也不用手动上传。方便吗？真的很方便，把「文档」移入 OneDrive 文件夹后我再也不需要在 Office 内手动摁下「保存」，也不需要担心游戏存档没同步上 Steam 云了。</p><p>然而，让人头疼的就是，「文档」除了正儿八经的文档之外，还被很多应用当作垃圾站，简直就是 Android 的内置存储。当我点开 OneDrive 应用一看，发现图片列表里塞满了伊比利亚的海报时，内心也挺复杂的。OneDrive 只能同步单一文件夹的所有内容，不支持多文件夹、不支持排除文件夹，也是个问题。例如，QQ、TIM 会把好几百 MB 大的数据库存在「文档」下的私有目录中，每次退出都会重新上传，只能在 QQ &#x2F; TIM 的设置内改变数据存储目录解决，更何况很多应用的数据存放目录根本就没法改，花费大量上传带宽可能还没能备份完所有文件，别提还有个叫 <code>node_modules</code> 的毒瘤了，它直接打消了我开发目录放「文档」下的想法。</p><p>方便是方便了，问题却迟迟难以解决，因此我其实一直都想把 OneDrive 换成 Google Drive，考虑到它不能在我所有的设备上顺畅使用，我至今仍未迈出第一步。各位如果觉得有不错的备份服务，也可以在评论区留下推荐。总之，OneDrive 的拉胯是本地备份刚需的一大原因。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Android 端极其全面的 Google 备份能够帮我解决大部分需求，从联系人到 Wi-Fi 密码、应用数据，只要我还在 Google 的生态圈中，它们就会在所有接入 Google 的设备上可用。不得不承认的是，这带来了不小的隐私隐患，毕竟天下乌鸦一般黑，作为一个中国大陆人，比起吃相更难看的国产大厂和 iCloud（由云上贵州运营），还是 Google 比较靠谱。</p><p>说到 iCloud，想必这是大部分 iOS 用户的首选。在 iOS 上，它也确实提供了比 Android 上 Google 服务更优的体验。Google 有的它一个不差，Google 没有的（点名 iMessage）它做得相当出色。尽管如此，考虑到那个大大的「云上贵州」以及 iOS 对我而言用来养蛊（指国产应用）的本质，我一直不愿意把所有数据全部交给 iCloud。如果你重度依赖 iOS &#x2F; macOS，iCloud 应当足够满足云端备份需求。</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>云端服务大部分都能找到替代，本地应用就不一定了，比如下面的第一个。</p><h3 id="钛备份Titanium-Backup"><a href="#钛备份Titanium-Backup" class="headerlink" title="钛备份Titanium Backup"></a><ruby><rb>钛备份</rb><rt>Titanium Backup</rt></ruby></h3><p>热爱折腾的 Android 用户应该都听说过「钛备份」的大名，Android 2.X 时代诞生的它一直走到今天。虽然界面「返璞归真」「不忘初心」，功能却鲜有同类能望其项背。除了常规备份还原，它还能把还原的应用安装来源恢复成 Google Play Store，实现照常在 Play Store 上安装更新。这项功能的缺失，是阻碍我切换到其它界面更现代的备份应用的主要原因。</p><p>我目前的设定是每周日凌晨自动备份新安装的 &#x2F; 新版本的用户应用，每周二、周五凌晨自动备份修改过的用户数据，以确保我需要的时候能随时调出备份。只保存在本地也不太靠谱，钛备份能够帮我把文件自动上传到 Google Drive &#x2F; Box &#x2F; Dropbox，这应该很好用，所以我选择下文的 <code>rsync-time-backup</code> 。</p><h3 id="rsync-time-backup"><a href="#rsync-time-backup" class="headerlink" title="rsync-time-backup"></a>rsync-time-backup</h3><p><a href="https://rsync.samba.org/">rsync</a> 是一个方便的文件同步命令行工具， <a href="https://github.com/laurent22/rsync-time-backup">rsync-time-backup</a> 大大提高了使用 <code>rsync</code> 备份文件的便利性。只需要输入源文件夹和目标文件夹， <code>rsync-time-backup</code> 就会自动把文件以类似 macOS 上「<ruby><rb>时光机</rb><rt>Time Machine</rt></ruby>」的方式备份，而且可以在任意平台任意设备上备份、恢复。</p><p>依赖 <ruby><rb>Windows Subsystem for Linux</rb><rt>WSL</rt></ruby> 1 以及 Termux，我一举解决了 Windows 和 Android 双端的文件同步问题。WSL1 上只需要 <code>sudo mkdir /mnt/drive/ &amp;&amp; sudo mount -t drvfs &lt;盘符:&gt; /mnt/drive/</code> 即可将存储盘手动挂载到可访问目录 <code>/mnt/drive/</code> 下，接着就可以从 <code>/mnt/c/</code> 把文件备份过去。Android 则更加方便，不需要手动挂载，直接使用 Termux 访问 <code>/mnt/</code> 下的存储盘就行（可能需要一些权限，而且不一定支持 NTFS）。<code>rsync-time-backup</code> 同时还支持连接远程服务器，如果有条件搭建 NAS 或拥有带 USB 口的路由器，都不再需要手动将备份盘在多设备间换来换去。</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>目前我本地备份文件的传输均通过 <code>rsync-time-backup</code> 完成，所以……也许这篇小短文可以到此为止？那就在这一部分说说以上工具同类们的使用感受吧。</p><p>钛备份这么多年来一直被各种备份工具「追平」甚至「超越」，可它们最多也只能备份和还原数据，距离替代钛备份还有相当长的距离，以至于当我实在忍不了钛备份的时候，除了零星几个 <a href="https://forum.xda-developers.com/t/app-root-5-0-1st-nov-2020-migrate-custom-rom-migration-tool.3862763/">Migrate</a> 和 <a href="https://swiftapps.org/">Swift Backup</a> ，大部分人都劝我接着忍下去。尽管如此，如果你没有那么复杂的需求，你也完全可以使用这两个工具应急。</p><p>我并非 macOS 用户不好评价，Windows 10 上自带的类似功能：「文件历史记录」我还是能吐槽的。它提供了（至少比命令行直观）的图形界面，默认备份用户目录，可以手动指定文件夹，可以备份到网络位置，插上存储盘后每一小时自动备份一次，听起来无比美好，如果可以忽略性能极其糟糕的「设置」应用，并且不在意备份文件不能在其他设备上使用的话。我的电脑在维修点被重置了系统，Windows 便认为这是两台电脑，拒绝为我恢复文件，哪怕是根本和设备 ID 或者当前用户无关的文件夹都不行，最后只能手动把文件复制回来，用 PowerToys Rename 通过正则表达式匹配批量去掉了每个文件后的时间戳，再全部取消只读，才勉强让大部分应用、文件恢复正常（还有几个死活好不了）。尽管它方便，私以为还是 <code>rsync-time-backup</code> 靠谱。</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>数据备份工具当然不止上文提及的这些。如果你拥有小主机甚至 NAS，数据备份会无比方便；如果没有，你也可以像我这样探索适合自己的备份方案。不管怎样，最重要的都是数据本身。追求更简单的数据备份方式当然无可非议，但如果代价是带来更大的安全风险，我还是认为需要再留个后手（例如我备份文件一般存储在 U 盘，最珍贵的数据会在可靠的机械硬盘、两个云端存储都保留一份）。</p><p>希望这篇文章能为你带来一些启发。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。&lt;/p&gt;
&lt;p&gt;事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。&lt;/p&gt;
&lt;p&gt;不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows &amp;#x2F; Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="备份" scheme="https://blog.rachelt.one/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="记录" scheme="https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="数据" scheme="https://blog.rachelt.one/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>为什么我不推荐 LG Gram</title>
    <link href="https://blog.rachelt.one/articles/why-not-lg-gram/"/>
    <id>https://blog.rachelt.one/articles/why-not-lg-gram/</id>
    <published>2021-04-06T14:08:28.000Z</published>
    <updated>2024-01-11T15:26:20.260Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 <a href="https://github.com/cdr/code-server">code-server</a> 。</p><p>但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。</p><p>在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。</p><blockquote><p>我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。  </p></blockquote><span id="more"></span><h2 id="太长不看"><a href="#太长不看" class="headerlink" title="太长不看"></a>太长不看</h2><p>就像上面说的那样，我真无法向人掏心窝子地推荐 LG Gram。</p><p>Gram 的拉胯，绝对不只是哪个方面出了问题，而是方方面面都有问题。它的 <a href="./#%E6%80%A7%E8%83%BD">性能</a> 锁死到了最高 15W 的功耗，使用单热管单风扇企图为 i7 散热 ，并且 <a href="./#%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87%E5%92%8C%E4%BA%AE%E5%BA%A6">屏幕分辨率和亮度</a>  、 <a href="./#%E9%94%AE%E7%9B%98">键盘</a> 手感及背光都不尽如人意，还有 <a href="./#%E6%89%AC%E5%A3%B0%E5%99%A8">扬声器</a> 破音、音量过小……这些 <a href="./#%E7%A1%AC%E4%BB%B6">硬件</a> 缺陷， <a href="./#%E8%BD%AF%E4%BB%B6">软件</a> 部分同样兼容性差、不能让人放心， <a href="./#%E5%94%AE%E5%90%8E%E4%B8%8E%E6%9C%8D%E5%8A%A1">售后服务</a> 搅屎棍当得还颇有特色。</p><p>如果你想听听详细的吐槽（约 5000 字），那么请继续往下翻。否则，您可以直接退出，或者跳到我的 <a href="./#%E6%80%BB%E7%BB%93">总结</a> 。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>这大概是 Gram 被诟病得最多，也是对日常使用影响最大的一个问题了。它主要的性能限制并非处理器（正相反它搭载的可是实打实的 10 代顶级移动端 i7），而是为了续航和散热对功耗作出的激进限制。毕竟是来自牙膏厂的 x86-64 架构，远做不到 Apple M1 那种级别的能耗比，15W 的功率限制 (PL1) 让 Gram 在持续高性能需求面前捉襟见肘，尤其是这 15W 还要同时支持 CPU 和 GPU。据一些测试，i7-1065G7 配上至少 40W 的供电才能如鱼得水，15W 嘛…它简直就像是被挂在架子上晒干的咸鱼。</p><p>如果很难从数字感受 15W 有多低的话，这里是一些实际使用体验。</p><p>从打开 DaVinci Resolve 的那一刻开始，掉帧和卡顿就像不断循环的 BGM，以最大音量反复播放，连剪个音频都颇为费劲。当我把 4K H.265 的素材导入进去后，它直接「乐死了」，预览区域动弹不得。</p><p>这对轻薄本要求确实太高了，讲点更实际的，比如外接显示器。4K 分辨率下，虽然日常操作还算流畅只是偶有掉帧，但当我打开 B 站看着视频和弹幕一会儿慢下来一会儿突然加速时…我觉得这方面我还是更喜欢用移动设备。</p><p>游戏性能更不用说。如果你晕 3D，那 Gram 能玩到你吐；如果你不晕 3D，用 Gram 就能体验晕 3D 了。往好处想，至少阻断了一大笔开销不是？不过说实话，画质调到勉强能看清，在 Cyberpunk 2077 上能跑到 7 FPS 也很对得住这颗处理器了。</p><p>我也不是没有尝试过绕过功耗墙，但迄今为止所有的尝试均以失败告终，更何况性能限制并非只有功耗墙。我能做的就是在 BIOS 里降低 50 mV 左右的电压，尽可能降低热量对性能的影响。</p><h3 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h3><p>单热管单风扇压 i7，你怕了吗？我怕了。开个机 CPU 温度 80 起跳 100 封顶，风扇转速拉满，听起来就像是企图用它玩游戏的人无助的哀嚎。处理只是需要稍微高点性能的任务，Gram 的 CD 面都会很快散发出比较明显的热感，以至于我怀疑，这次送修很有可能是长期高温导致的虚焊。</p><p>不仅如此。Gram 底面近乎无孔的设计（只有扬声器，螺丝藏在脚垫下面）严重加剧了散热的难度。它的风扇开口挪到了显示屏下方转轴处，避免放在软表面上导致风口被堵住的同时加大了散热难度，在下面摆个散热底座也收效甚微。</p><p>热量排不出去的结果就是，哪怕绕过了功耗墙，也会很快撞上温度墙而降频，性能暴跌。这也正是我手动调低电压的原因。功耗墙绕不过了，减缓一点撞上温度墙的速度总没问题吧？</p><p>问题挺大的，至少感知不强是真的。</p><h3 id="屏幕分辨率和亮度"><a href="#屏幕分辨率和亮度" class="headerlink" title="屏幕分辨率和亮度"></a>屏幕分辨率和亮度</h3><p>屏幕是 LG Gram 的一大优势，但它还是存在一些小小的问题，比如，只有 1080P（16 寸及以上不是），和峰值亮度不够。</p><p>前者不用说了，正是为了弥补这块分辨率不够的屏幕我才会考虑买个 4K 显示器用来写代码。对比同学的 Redmibook Pro 15，1080P 的字体显示即使是 14 寸 + 已经用上了所有优化方案的情况下都还有掩盖不住的发虚。</p><p>后者嘛，室内无法感觉到明显的差异，我也一直觉得没啥问题，直到我上次在高铁上顶着阳光用它码字，屏幕暗到只能勉强看清楚我写了啥。如果是游戏本还好，没有室外使用场景，可这是专注移动办公的轻薄本，我也只能含泪吐槽了。</p><h3 id="质感"><a href="#质感" class="headerlink" title="质感"></a>质感</h3><p>我身边所有人第一次接触 Gram 的时候，结合它极低的体重，无一例外都觉得它的外壳是塑料。</p><p><del>其实它就是塑料没想到吧嘿嘿嘿。</del></p><p>解释得多了就非常、非常让人懒得再解释下去了。它的外壳真的是金属，而且如果你不小心撞掉一小块漆，USB-C 口插着电把手放到那块掉漆的地方它还能电你。它只是长得很塑料，内里还是挺扎实的。</p><p>但内里扎实有什么用？看到 Gram 不一定能摸到 Gram，看着拉胯那还是拉胯。</p><h3 id="扬声器"><a href="#扬声器" class="headerlink" title="扬声器"></a>扬声器</h3><p>宣传图上说的 DTS:X Ultra 听起来很不错，实际使用感受让人决定把它直接关掉。</p><p>这可能并不是 DTS 的错，毕竟 DTS 做得再好，硬件上的鸿沟终究是软件无法弥补的。Gram 双扬声器的设计，没能节约多少内部空间（那个扬声器大小再塞一对进去都还绰绰有余），还成为了设计的一大败笔。就算一个人在安静的环境下用电脑，我都不会想打开 Gram 的扬声器。</p><p>它拉胯到什么程度呢？哪怕声音只开到 50% 都还是能听到破音，有时我会把声音拉到 100% 将 QQ 电话转接到外放，本就不高的通话质量经过破音这一折腾，<br>简直就是耳朵堕胎的灾难。</p><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>不知道什么原因，我手上的这款 Gram 有比较明显的延迟。平常使用感觉不出来，但一旦操作被简化到触控板&#x2F;键盘轻点，它诡异的延迟就暴露无遗。Montaro 不是音游还能忍，Muse Dash 我用 Gram 玩过一把之后转手就申请了退款。</p><p>至于是什么原因，我到现在也还没有摸清楚，在我外接显示器和键鼠、关闭所有后处理效果后，这一症状没有任何缓解。值得一提的是，接上显卡坞后似乎没有那么严重了（尚未严格测试），可能是 Iris 核显带来的问题？目前我已经打消了在 PC 上玩音游的念头，也就无从查证了。</p><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>Gram 键盘的手感也是长久以来一直被人诟病的点之一，尤其是它软绵绵的回弹。在手感优异的笔记本键盘大行其道的今天，很多时候友商产品线里 Gram 一半价格的产品甚至我写到这里时用的罗技 K380 就足以将 Gram 的手感按在地上摩擦。</p><p>有个不知算不算问题的问题，鉴于 Gram 外壳用料偏软，键盘面用力按压就会有比较明显的下陷。当然，会下陷的只有一小块部位，一般敲键盘也远远达不到能让它下陷的力度，这就见仁见智了。</p><p>当然，Gram 的键盘还是有点优势的，比如键程。它的键程是我摸过所有笔记本里最长的，哪怕和游戏本相比也不遑多让。这又是一个见仁见智的问题：我觉得它一定程度上让手感好了一点，也正因如此一直对它的手感持中立态度，不过也有人认为，过长的键程配合过软的回弹，手感烂上加烂。</p><p>除此之外，Gram 的键位争议不小，不过在 2020 14 寸款上似乎没有体现，至少方向键是很正常的等大的小按键，Fn 功能左右映射到 Home 和 End，上下映射到 Page Up 和 Down 也很贴心。</p><p>再来说说背光。它的背光峰值亮度就跟屏幕峰值亮度一样拉胯，尤其是键盘是白色的背光也是白色的，打开背光后外部稍微有点光，整个键盘就会连个字母都看不见，能派上用场的场景就只有伸手不见五指的深夜一个人码字。</p><p>深夜一个人码字也就算了，至少有点使用场景，更让人无法忍受的是，它的背光不仅亮度低还漏光，亮得还不均匀。有几个字母不管怎么看就是比别的字母亮，而当从侧面看去的时候，缝里透出的光，证明了按键的亮度确实。</p><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>我特别好奇一开始到底是哪篇评测说的鬼话，说「LG Gram 的触控板很大，做工很好，手感很不错」。</p><p>事实上，它的触控板不大（16:10 设备另说），摸起来手感确实很好，只要别按下去。上下两端最大下沉深度和按压所需力度摸起来就像是两个触控板，如果以使用 MacBook 触控板的习惯，很可能从下往上拖动的时候，拖到一半就已经被判定为松开了。</p><p>做工嘛…就更不敢恭维了。从我拿到它的那一天开始，它的四边接缝就不均匀，宽的可以卡进去小拇指指甲，窄的和外壳紧密相贴。更迷惑的是，触控板似乎不是固定的，因为每次剧烈晃动后我把它从包里拿出来，各边的宽窄都会有变化。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="预装第一方"><a href="#预装第一方" class="headerlink" title="预装第一方"></a>预装第一方</h3><p>LG 自家应用虽然不够优雅，但也还算不错。它自带了控制中心、电源管理、阅读模式、屏幕显示、使用指南等应用，我们慢慢讲。</p><p>谢天谢地，Gram 没带 McAfee 也没带一票「电脑管家」，只有一个颇为简洁的控制应用，可调整最大充电量、开盖启动、C 口充电模式等。听起来很不错，但它在某次更新后就没能再打开。更糟的是，大部分设置在 BIOS 里根本找不到，也就彻底不能再修改了。</p><p>除此之外的系统控制，基本上就是 Windows 功能的套壳。电源管理，有点像部分 Android 系统自带的情景模式，没啥槽点（于我而言更没啥使用场景）；阅读模式好像会和 Windows 自带的同名功能冲突，作用也大致相同，都是套个变黄滤镜。</p><p>屏幕显示倒是有点意思，会在部分键盘操作时冒出来给个比亮灯更明显的反馈，比如开启 &#x2F; 关闭大写锁定、调整键盘背光亮度等等。值得一提的是，把它卸载掉之后，别的所有功能都能正常运行，唯独触控板开关指示灯状态再也不变了（快捷键功能一切正常），逼人不得不使出浑身解数再把它找回来——对了，LG 官网上根本找不到它们。</p><h3 id="预装第三方"><a href="#预装第三方" class="headerlink" title="预装第三方"></a>预装第三方</h3><p>抛开那些「还不错」的官方应用，Gram 上带的第三方应用就让人不敢恭维了。它预装了好几个 Microsoft Store 里的，可以进行音频视频和图片编辑的应用，它们价格高昂但用户数量和评价都不算高，使用体验也确实不怎么样，尤其是和那些免费好用的桌面端应用比起来。</p><p>不过，如果只是轻度使用，它们也确实能满足一定程度的需求，这点不假，如果你能忍受它们令人难受的界面和操作逻辑，以及它们由不知名的小开发商发布的话。</p><p>除开这些，Gram 就没有更多的预装应用了。考虑到 UWP 应用都有独立的沙盒并且可以一键卸载，比起那些预装一大堆应用的大厂，也确实挺干净。</p><h3 id="非预装第三方"><a href="#非预装第三方" class="headerlink" title="非预装第三方"></a>非预装第三方</h3><p>这听起来不应该有问题啊？不都是运行在 x86-64 平台上的 Windows 家庭版（Gram 搭载的不是家庭中文版）吗？能有啥问题？</p><p>Intel Extreme Tuning Utility (XTU) 先给了我当头一棒，然后是所有企图监测 GPU 的软件。</p><p>前者以及所有我尝试过的同类软件都不支持调整 10 代及更新的、非原设计支持的产品，这也正是我必须要在 BIOS 里修改电压的原因。后者更气人，不管是不是牙膏厂官方都读不出来这颗 Iris 核显的具体数据，甚至有离谱的时不时告诉我，核显的频率在 4 GHz 和 0 之间反复横跳，而 CPU 不过也才 2 GHz。</p><p>另一个问题来源于驱动。Intel 的驱动更新来源是个谜，配合上国内时好时坏的 Microsoft Store 则有过之而无不及，甚至我电脑送修前备份数据的时候一打开 Microsoft Store 才意识到，原来显卡管理应用一直都有更新，只是从来没装上过。</p><p>糟糕的驱动更新导致部分应用渲染问题难以迅速得到解决，比如 Steam 九大名著之一，《山》。我前几次打开它时，直到我把它关掉都只能看到卡住的白色四边形，直至我插上了外接显卡，它才终于正常工作。</p><h2 id="售后与服务"><a href="#售后与服务" class="headerlink" title="售后与服务"></a>售后与服务</h2><h3 id="保修政策"><a href="#保修政策" class="headerlink" title="保修政策"></a>保修政策</h3><p>另一个槽点来了：LG Gram 一个非常亮眼的点就是极其强大的可扩展性，它堆料近乎顶级，还预留了顶级的扩展位供用户自行定制，但是…用户一旦定制，保修就没了。</p><p>LG 官方的说明原文如下：</p><blockquote><p>「笔记本产品需要添加内存或SSD（固态硬盘）时，须由LG售后指定维修站或指定经销商负责，由顾客付费进行，后续享有LG包修服务，客户要求使用第三方内存或SSD、或自行更换时，LG不提供服务，并且后续不享有LG包修服务。」  </p></blockquote><p>翻译过来也就是说，即使拥有这么强的可扩展性，LG 还是只允许用户在屈指可数质量也参差不齐的官方授权维修点对设备进行定制。就算 Gram 的后盖实在配不上它的可维护性，总该至少给个尝试的机会吧？而且，在我重读数次后发现，似乎只要用户不是在 LG 官方购买的内存条 &#x2F; 硬盘并交由 LG 官方安装，LG 都有权拒绝保修。这对于一款以可扩展性著称的笔记本，实在是不应该。</p><h3 id="维修站点"><a href="#维修站点" class="headerlink" title="维修站点"></a>维修站点</h3><p>这一项的拉胯直接拖了整个保修的后腿。我前前后后一共接触了三家维修点，每一家给我的感觉都不一样。总体上来说，技术人员比接待人员更适合接待人，外包服务比官方维修给人感觉更好，这对于一个 LG 这种体量的公司而言实在是太不应该了。接下来是我比较长的维修记录，若您嫌太长可以点击 这里 直接跳到总结部分。</p><h4 id="重庆商社家维电器有限公司"><a href="#重庆商社家维电器有限公司" class="headerlink" title="重庆商社家维电器有限公司"></a>重庆商社家维电器有限公司</h4><p>这是三家里面我最满意的一家，也是唯一一家实际探访的。</p><p>2020 年暑期内存价格非常实惠，我旅游之余特意在京东上买了根内存条送到重庆，想着重庆有维修点，可以顺路把 Gram 的内存从 8 GB 扩容至 16 GB，就当是在重庆到处逛逛。</p><p>电话询问后，对方表示 LG 笔记本电脑维修有专门的师傅，需要提前预约，并给了我师傅的电话。我和师傅还算聊得开，交流一会儿后对方爽快地答应了维修时间。</p><p>从外观看起来，这家维修点专门承接各大厂商的维修外包，许多品牌的电子设备都在他们家维修，LG 就是其中之一。在我和第一次见到笔记本顾客的师傅有一搭没一搭地聊了几分钟后，师傅把装好内存条的电脑拿回给我并收了¥100 维修费，此次维修告终。</p><p>不得不说，师傅的操作可以用无比娴熟来形容，实在不敢相信他是第一次实际维修以难拆出名的 Gram。维修过程很愉快，但此次维修后师傅并未给我开具维修单，也未在 LG 的系统里留下维修记录，留下了一个小问题。</p><h4 id="长沙乐广电器维修服务有限公司"><a href="#长沙乐广电器维修服务有限公司" class="headerlink" title="长沙乐广电器维修服务有限公司"></a>长沙乐广电器维修服务有限公司</h4><p>我对 LG 售后服务的失望从这家开始。明明在官网上的维修范围里白纸黑字包含了「笔记本电脑」，当我准备抽空去一趟，想一个电话打过去先求救+预约时，得到的答复却是非常慵懒傲慢的「我们暂时并不提供笔记本电脑维修服务」，然后扔给了我售后服务热线的电话。</p><p>我还能怎么样？全湖南估计也就这一个维修点了，还不给我修笔记本，只能乖乖去找北京。</p><h4 id="北京乐金电子技术服务中心"><a href="#北京乐金电子技术服务中心" class="headerlink" title="北京乐金电子技术服务中心"></a>北京乐金电子技术服务中心</h4><p>与北京总维修点接触了几次后，我深深地感受到，一开始要是没找长沙维修点而是直接打电话给了当年帮我装内存的师傅，可能这个问题已经结了。</p><p>当我一个电话打到 <a href="tel:4008199999">4008199999</a> 也就是 LG 售后服务热线时，我连笔记本电脑该转接哪个键都没听到，又一次深刻意识到了笔记本电脑业务在 LG 中国的式微。没办法，转接家用电子吧。对面的人工客服倒是挺靠谱，记录下了我的问题类型、姓名和电话，告诉我稍后会安排专人打电话回来。</p><p>第二天（周一）上午，我成功接到了被标记为北京乐金电子技术服务中心的电话（奇怪的是，我在写下本文时，官网上查询服务点全北京范围内和寄修的收货地址附近都没有这家）。直到我电脑寄出前，与我联系的一直是一位语气比长沙乐广还要慵懒还要傲慢口音还操着点京腔，每次我提问题或要求重复听起来都很不耐烦的女士。我与她交谈数次后，她要求我将发票和凭证寄给指定的地址，维修前的交流到此为止。</p><p>顺丰把快递送到北京后，我接到了另一个京腔操着口音的电话，来自 LG 售后点的维修师傅。这次电话交流相当愉快。对方在无维修记录、无维修单，并且明确知道内存非 LG 官方指定的情况下仍为我免费处理，也接受了我拆机维护、清灰的请求，还同意维修完毕后运行三天以保证问题短期内不再复现。</p><p>不久后，我从顺丰处顺利取回电脑，该次维修圆满结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里已经 5500 字，我依然觉得前文一定还有遗漏。Gram 为数不多的优势就是轻薄和长续航了，但在 PD 高容量充电宝大行其道的今天，维持一整天的续航并不是什么难事，这又在 Gram 的坟上盖了一抔土。</p><p>可我依然觉得我会买 LG Gram。我就是喜欢它塑料般用两根手指就能拎走的机身，就是喜欢它干干净净的自带系统，就是喜欢它不管从哪个角度都一样好看的屏幕，还有足以维持我在咖啡店码一下午字，不需要带任何其它配件的续航。我更喜欢那种轻便的感觉，这种感觉胜过一切不满，让我享受与它共同出门的每一天。</p><p>即使它具备这么多缺点，最重要的还是我不曾也不会后悔购入 LG Gram，并且我还有极强的更新至最新款的欲望（奈何没钱）。LG Gram 根本不是一台尽善尽美的电脑，但它在它的垂直领域确实占据了独一无二的位置。我不推荐任何人在不明确自身需求的情况下贸然选择 Gram 作为主力机，但如果你身边的朋友碰巧拥有一台 Gram，那还蛮值得试试的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 &lt;a href=&quot;https://github.com/cdr/code-server&quot;&gt;code-server&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。&lt;/p&gt;
&lt;p&gt;在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="Windows" scheme="https://blog.rachelt.one/tags/Windows/"/>
    
    <category term="LG Gram" scheme="https://blog.rachelt.one/tags/LG-Gram/"/>
    
  </entry>
  
  <entry>
    <title>站在普通人的角度，谈谈教育、兴趣、Linux 与编程</title>
    <link href="https://blog.rachelt.one/articles/education-interest-linux-and-programming/"/>
    <id>https://blog.rachelt.one/articles/education-interest-linux-and-programming/</id>
    <published>2021-03-17T17:51:15.000Z</published>
    <updated>2024-01-11T15:26:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？</p><p>尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。</p><blockquote><p>本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。</p></blockquote><span id="more"></span><h2 id="当我们谈论现实"><a href="#当我们谈论现实" class="headerlink" title="当我们谈论现实"></a>当我们谈论现实</h2><p>我记得有听好友吐槽过教科书的不伦不类。它们既想激发学生对学科的兴趣，又想保持自身的绝对严谨，其结果就是往往写了很多复杂的公式和推理，却并没有带来什么实际意义，甚至都没能告诉学生这些理论知识能用来干什么。</p><p>这是一个很大的问题。一方面我们抱怨着现在的学生对学习越来越不感兴趣，另一方面我们把教科书写得越来越让学生提不起兴趣。</p><p>当我们不是因为学科之美，而是因为应试、因为绩点、因为越来越严重的内卷化而不得不学习某个学科的时候，它已经变味了，已经像饱受诟病的那样，「我又不可能买个菜还算个解析几何」。</p><p>不仅仅我们的教育是这样。每一个站在风口的行业，面临的都是这样的困境。我很小很小的时候，所有人都在学乐器学书画；我读初中了，所有人都在学机器人；我上大学了，大人们疯狂往计算机里挤，小朋友们也开始学少儿 Python 了。虽然在所有人都往人多的地方走的世界无可厚非，虽然确实真的有很多人藉此培养了自己的热爱，但对于更多的只是因为「它在风口上」、「怕孩子掉队」而一头扎进去的人，这值得吗？</p><p>在我看来，教科书、兴趣班甚至每个对某学科比常人多懂一些的人应该做的，不是摆架子摆身段昭告天下这门学科有多科学、多严谨、多复杂，学习它能带来多少好处，能帮助人在什么竞争中又出人头地一分。恰恰相反，是要让大部分人感受到这门学科有多诱人，让人知道为什么历史上有那么多名人，沉醉于这个学科带来的愉悦。</p><p>所有行业都应如此。Linux 之所以诱人，不是因为它历史有多么悠久，不是因为它配置起来有多复杂，更不可能是因为它只向有兴趣的人开放，而是因为，当我第一次在键盘上敲出那些命令，让看起来就很高端的、疯狂输出各种字符的窗口只围着我一个人转；当我花了好几个小时第一次编译出自己的嵌入式系统，随便抓起个 U 盘烧录完成功启动一台微型电脑；或者更早之前，当我执行 <code>sl</code> 之后看见一辆停不下来的火车从屏幕这边开到了屏幕那边时，内心涌起的兴奋感和成就感，就算用多少本 Linux 史书都压不下去。</p><p>就像我之所以能从容面对藏在各种各样的代码里各种各样的 bug 而丝毫不泄气，能够花一整个下午只是为了稳定一个很简单的特性，不是因为我用的语言有多先进，不是因为我写出来的代码性能有多优异，只是因为我满足了自己或者身边人的某个微不足道的需求，而满足这些需求带给我的成就感，胜过读完十本《从入门到精通》。</p><p>停止把这一切妖魔化吧。不管是数学还是物理，是 Linux 还是编程，它们对大部分人而言都不过只是一种与世界相处的方式，很多时候我们却一直在强调我们所懂的东西有多么深奥和高级，一直在为这一切设置无形的门槛，一直在劝退每一个试图了解这一切的人。「只有特别感兴趣的人才会深入钻研」没错，但是不试试，又怎么能知道自己是不是感兴趣呢？实在不行就当盲人摸象了吧，摸了象的盲人好歹能在某一天再次摸到象时意识到这是象，被「象很大很高很重一脚能把你踩死」这种话吓住连象都不敢摸的盲人，下次见到象也只有干瞪眼的份儿。</p><p>总有一天，我们都会负起自己该负的责任，成为各行各业各领域不可或缺的那一代人。到那时，难道我们还要设置门槛，劝退那些稍稍感兴趣的、还在犹豫的人吗？</p><p>至少我拒绝。如果我有机会，我会毫不犹疑地扔掉那些初步接触时根本不重要的死板而繁杂的理论。</p><p>一直以来，我也确实是这么做的。我想鼓励身边更多的人找寻 Linux 和编程的乐趣，想让他们知道编程不是改改代码看看输出就完事儿了，而是经常甚至马上可以派上用场的东西，如果有想做的东西大可一步一个脚印地做出来没人看笑话，Linux 也不是萌新之敌不会随随便便就让电脑爆炸，正相反，每条正确的指令带来的正反馈和命令行带来的强掌控感让人欲罢不能。在学习的过程中必然会碰到很多艰难险阻，而且会发现自己还有太多太多不知道的东西，那都不重要。重要的是，兴趣被调动起来了，然后一切都好说了。</p><p>话又说回来，那些理论真的不重要吗？当然不，否则也不会几乎所有人都从理论谈起。非要让我说的话，初次了解时，知道「这是个啥」确实很重要，除此之外的那些长篇大论，就留到兴趣使然时再说吧。</p><h2 id="当我们谈论我"><a href="#当我们谈论我" class="headerlink" title="当我们谈论我"></a>当我们谈论我</h2><p>我接触编程的具体时间已经很模糊了。很久以前，当我还是个 MC 玩家时，我第一次接触了我的「万恶之源」：ModPE。它采用 JavaScript 的基本语法，实现了一些能在 Minecraft PE 中改变游戏局势的功能。</p><p>在游戏里，当你不再需要挖一整个下午才能挖到一点点钻石，而是可以写几行代码直接刷满几箱子的钻石，你会选择哪个？这就是我初次真切地感受到编程带来的「成就感」。</p><p>那之后在社交平台上的成就暂且不提，借着 ModPE 的机会，我逐渐跟着各种现在看来很稚嫩的教程开始访问 Android 系统提供的诸多功能，直到我成功绕过游戏创建了第一个现在看来也很稚嫩的悬浮窗。很稚嫩，但作为一丢丢刺激、一丢丢兴奋和一丢丢成就感已经够了。以此为契机，我开始逐渐接触 Java 与 Android 开发。</p><p>在这之后，就是上架应用，获得微不足道又确实让人欢呼雀跃的下载量，甚至还有来自那么几个人的捐赠。</p><p>在这之后，就是逐渐接触越来越多的东西，学到越来越多的知识，开始思考、了解这一切的本质，开始逐渐向着独当一面进化。</p><p>尽管如此，在我已经懒得关注那些数字的今天，我还是很怀念第一行代码带给我的最初的感动。那是几乎改变了我整个人生轨迹的力量。</p><p>所以我其实并不觉得自己就有什么特别不一样的地方，我只是碰巧多会了一门手艺而已，这本质上和隔壁张三会木工楼上李四会弹琴一样，只是给了我一个稍微有点不同的与世界相处的方式。</p><p>家里书桌书架坏了，张三可以自己修，我们在忍和换之间还能选择；《底特律》的开场音乐尤其动人，李四可以自己把它弹出来，我们可以静静欣赏或者在内心大呼「卧槽牛逼」；教务系统少了好看的界面，会编程的人自己写一个，其他人还能忍受，又不是不能用。懂得如何更好地与世界相处确实会带来一些差异，但它远远没到被神化成一个不可或缺的技能的地步。</p><p>大部分人不会木工不会弹琴不会编程，他的一辈子照样可以过得很快乐。</p><p>一些时候的一些人，明明比普通人多了那么多能与世界好好相处的方式，过得却并不快乐。</p><hr><p>希望读完这篇并不短的随笔的你，在面对世俗的现实时，过得能更加快乐。</p><p>至少你可能还有写下人生中的第一行饱含着自由与激情的代码，或是执行人生中第一条不是因为「教程」这么说而是因为你想这么做的指令，或是摸出积满尘土的乐器感受遥远的生疏和热爱，或是不为了不挂科只是单纯地想要了解一门学科而翻开一本书的机会嘛，不是吗？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？&lt;/p&gt;
&lt;p&gt;尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
