<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rachel&#39;s Blog | Rachel030219</title>
  
  <subtitle>Where dreams converge</subtitle>
  <link href="https://blog.stfw.info/atom.xml" rel="self"/>
  
  <link href="https://blog.stfw.info/"/>
  <updated>2021-09-20T21:59:14.524Z</updated>
  <id>https://blog.stfw.info/</id>
  
  <author>
    <name>Rachel030219</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迎接又一次意难平</title>
    <link href="https://blog.stfw.info/articles/facing-another-i-could-have-had-it/"/>
    <id>https://blog.stfw.info/articles/facing-another-i-could-have-had-it/</id>
    <published>2021-04-21T17:16:28.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。</p><p>和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。</p><span id="more"></span><h2 id="It-happens"><a href="#It-happens" class="headerlink" title="It happens."></a>It happens.</h2><p>如何描述呢？和一个孩子不讲道理地把所有东西都砸得稀巴烂一样，我原来初具雏形的人生规划，也被一个没有我名字的名单砸得稀巴烂。</p><p>这或许并不全是坏事。推翻一切从头再来，意味着我有了全新的机遇和全新的选择，我可以追求更不一样的发展目标，可以朝着更不一样的自己前进。不过说实话，我也不知道那都可以是什么。从我得到消息的那一刻起，我的大脑一直一片空白，好像一直在想些什么，却什么都没想出来。让这样的我马上决定未来，未免太勉强我自己了。</p><p>曾几何时，我知道我可以不用担心我羸弱的化学知识，反正不久以后它们都会变成选修课学分里干巴巴的数字，随着时间风化；我知道我马上就能光明正大地坐在属于我的实验室工位上，和同专业的人一起努力；我知道我可以凭借我已经拥有和即将拥有的专业知识完成学业，找到一份比较体面的工作，成为一个我一直想成为的人。</p><p>但现在，我什么都不知道了。如果一定要为今天找一个主题，那它一定是「我不知道」。仿佛宕机一般，我再也不能好好思考问题，再也不能顺畅地表达自己。我甚至还没有想透到底发生了什么，只知道我下个学期仍然要做化学实验，仍然要学有机化学、物理化学；只知道浑浑噩噩快要到头的这一年，被无限期地延长；只知道我一直以来对浑浑噩噩大学四年的恐惧，可能注定要成真，而我还浑然不觉。</p><p>此时浑然不觉的我，真的可以就这样从容接受自己、接受现实吗？还是说，我会在某一刻突然清醒，然后抱头痛哭？如果说海啸往往晚于地震，那地震已经来了，海啸呢？</p><p>海啸尚未降临，选择已经将我淹没。我不知道我该做什么了。我应该继续尝试转专业？尽早安定在化工类？跨专业考研？或者……我真的如我所想的，那么热爱着 Computer Science，以至于需要消耗那么多东西，来为我的热爱陪葬吗？</p><p>一直以来，我秉持着「躺平等死」的态度逃避问题，想把一切留到最后一刻再解决。一直以来，我都知道，我总会无处可逃。在大半个学期过去，我好像还什么都没做到时，我突然也什么都不知道了。</p><p>我终究还是期盼着万事顺意，期盼着让未来的自己活得有模有样，期盼着在纷扰繁杂中以我的步调不断向前。我终究不是能看淡的人。</p><p>如果我是那样的人就好了。</p><p>在久远往昔的展望中，我也曾顽强地说出「不再后悔」。时至今日，在踽踽独行的我真的懈怠、逃避了那么多之后，我也不知道我后不后悔了。</p><h2 id="It-happened"><a href="#It-happened" class="headerlink" title="It happened."></a>It happened.</h2><p>这不是我人生中第一次意难平，也不可能是最后一次。我所知道的是，没有人说得清特定的事对特定的人会产生怎样的影响。我们都没办法预知微小扰动带来的未来。</p><p>几年前某个夏日的下午，我落榜了高中的自主招生考试，在座位上哭得稀里哗啦。今天再来回忆，也许当时的成绩不佳从高中一直注定到今天，也许当时的成绩不佳帮我回避了更多的遗憾，也许当时的成绩不佳让我认识了更好的人、行过了更好的路。这些都不重要，重要的是，当我今天回过头凝望我的人生，这一次的难受，也不过是微不足道的曲折。它并没有阻止我在我的高中度过三年。</p><p>也是在几年前某个夏日，我在百般纠结甚至差一点就放弃机会的情况下，最终还是向模拟联合国提交了申请表。我绝对想不到，当时这小小的举动，引发了一系列的连锁反应，戏剧性地改变了我整个高中甚至整个人生的轨迹。</p><p>如果转专业失利是我大学碰到的第一个不如意，它又会带来什么？我不知道，我也不可能知道。人都是走一步看一步的嘛。</p><p>去年这个时候的我对怀念高中生活的大学生嗤之以鼻，今年这个时候的我不争气地希望那段混着蝉鸣的回忆从未终结。在未来真正到来之前，一切都是未知数。</p><p>而我祈祷着明天更好的太阳，祈祷着无数个明天的回望中，我还以不让自己后悔的姿态活着。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。&lt;/p&gt;
&lt;p&gt;和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>从本地到云端，我的数据备份方案</title>
    <link href="https://blog.stfw.info/articles/my-way-of-backing-up/"/>
    <id>https://blog.stfw.info/articles/my-way-of-backing-up/</id>
    <published>2021-04-10T01:00:23.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。</p></blockquote><p>我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。</p><p>事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。</p><p>不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows / Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。</p><span id="more"></span><h2 id="云端"><a href="#云端" class="headerlink" title="云端"></a>云端</h2><p>需要说明的是，本文提及的所有云端服务，几乎都可以用同类竞品代替，我的选择主要出于个人喜好，尤其是依赖的生态圈。尽管我的选择存在种种缺陷，考虑到首要目的是最小的精力开销备份最多的数据，还请不要介意，也欢迎提出更多建议。</p><h3 id="Google-Photos"><a href="#Google-Photos" class="headerlink" title="Google Photos"></a>Google Photos</h3><p>我主要照片来源为主力 Android 设备。凭借与 Google 生态的无缝融合，拍摄后十秒内照片基本已备份完毕，可以在所有登陆了 Google 账号的设备上访问。</p><p>当然不止这些。考虑到 6 月开始 <a href="https://blog.google/products/photos/storage-changes/">所有照片都会占用云端存储空间</a> ，我把吃灰的初代 Pixel XL 翻了出来，让它重新派上了用场。我在两台设备上安装了 <a href="https://syncthing.net/">Syncthing</a> ，把照片文件夹从主力机共享给 Pixel，然后使用 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> 模块 <a href="https://forum.xda-developers.com/t/advanced-charging-controller-acc.3668427/">Advanced Charging Controller (ACC)</a> 把 Pixel 最大充电量限制到 80%，插上电扔一边就完事了。这样，只要我一连上 Wi-Fi，所有新照片都会自动同步到 Pixel，接着使用无限云端存储备份原图，最大限度保证了图片的安全。此外，我还利用 Syncthing 的 <ruby><rb>仅发送 / 仅接收</rb><rt>send only / receive only</rt></ruby> 模式，仅将主力机的照片发送至 Pixel，这样当 Pixel 的 32 GB 存储不够用时，我随时都可以使用 Google Photos 的清理本地文件功能，留出更多的空间给新的照片。</p><p>这样做的缺陷也很明显。首先，照片备份完全依赖 Google，万一某一天 Google 彻底无法访问，或者云端存储耗尽，或者 Google Photos 停止服务，我数年攒下的回忆就会消失；其次，Pixel 已发布四年有余，尽管我相信 Google 为它配备了最好的硬件，一旦它的闪存因为频繁大量碎片读写而报废，那照片备份就会进入倒计时；再就是，每次照片备份都会把同样的文件上传两次（尚未测试主力机关闭上传时能否更新照片库），我颇为担心额外的流量开销；而且 Google Photos 偶尔会把同一张照片当两张存，删哪张都不对劲（删除压缩版本：主力机上原图被带着一起删掉；删除原图版本：云端只保留压缩版）。因此，照片备份绝不能只有 Google Photos，还得带上后面将要提到的 <code>rsync</code> 。</p><h3 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h3><p>OneDrive 无疑是 Windows 上文件备份首选，本文的这一部分就是依赖 OneDrive 的多端同步完成的。它在国内的速度出人意料地不错，它在上传大文件时没能跑满带宽，但碎片文件的同步做得很棒，把文件复制进备份文件夹后就会马上开始备份，几乎感知不到延迟。</p><p>这当然只是一小部分。OneDrive 更大的优势在于它深度整合进了 Windows 10，只要登录 Microsoft 账户就会开始同步文件，并且还能够傻瓜式地将「文档」、「桌面」、「图片」这三个文件夹一键移动进备份目录中，再也不用手动上传。方便吗？真的很方便，把「文档」移入 OneDrive 文件夹后我再也不需要在 Office 内手动摁下「保存￼」，也不需要担心游戏存档没同步上 Steam 云了。</p><p>然而，让人头疼的就是，「文档」除了正儿八经的文档之外，还被很多应用当作垃圾站，简直就是 Android 的内置存储。当我点开 OneDrive 应用一看，发现图片列表里塞满了伊比利亚的海报时，内心也挺复杂的。OneDrive 只能同步单一文件夹的所有内容，不支持多文件夹、不支持排除文件夹，也是个问题。例如，QQ、TIM 会把好几百 MB 大的数据库存在「文档」下的私有目录中，每次退出都会重新上传，只能在 QQ / TIM 的设置内改变数据存储目录解决，更何况很多应用的数据存放目录根本就没法改，花费大量上传带宽可能还没能备份完所有文件，别提还有个叫 <code>node_modules</code> 的毒瘤了，它直接打消了我开发目录放「文档」下的想法。</p><p>方便是方便了，问题却迟迟难以解决，因此我其实一直都想把 OneDrive 换成 Google Drive，考虑到它不能在我所有的设备上顺畅使用，我至今仍未迈出第一步。各位如果觉得有不错的备份服务，也可以在评论区留下推荐。总之，OneDrive 的拉胯是本地备份刚需的一大原因。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Android 端极其全面的 Google 备份能够帮我解决大部分需求，从联系人到 Wi-Fi 密码、应用数据，只要我还在 Google 的生态圈中，它们就会在所有接入 Google 的设备上可用。不得不承认的是，这带来了不小的隐私隐患，毕竟天下乌鸦一般黑，作为一个中国大陆人，比起吃相更难看的国产大厂和 iCloud（由云上贵州运营），还是 Google 比较靠谱。</p><p>说到 iCloud，想必这是大部分 iOS 用户的首选。在 iOS 上，它也确实提供了比 Android 上 Google 服务更优的体验。Google 有的它一个不差，Google 没有的（点名 iMessage）它做得相当出色。尽管如此，考虑到那个大大的「云上贵州」以及 iOS 对我而言用来养蛊（指国产应用）的本质，我一直不愿意把所有数据全部交给 iCloud。如果你重度依赖 iOS / macOS，iCloud 应当足够满足云端备份需求。</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>云端服务大部分都能找到替代，本地应用就不一定了，比如下面的第一个。</p><h3 id="钛备份Titanium-Backup"><a href="#钛备份Titanium-Backup" class="headerlink" title="钛备份Titanium Backup"></a><ruby><rb>钛备份</rb><rt>Titanium Backup</rt></ruby></h3><p>热爱折腾的 Android 用户应该都听说过「钛备份」的大名，Android 2.X 时代诞生的它一直走到今天。虽然界面「返璞归真」「不忘初心」，功能却鲜有同类能望其项背。除了常规备份还原，它还能把还原的应用安装来源恢复成 Google Play Store，实现照常在 Play Store 上安装更新。这项功能的缺失，是阻碍我切换到其它界面更现代的备份应用的主要原因。</p><p>我目前的设定是每周日凌晨自动备份新安装的 / 新版本的用户应用，每周二、周五凌晨自动备份修改过的用户数据，以确保我需要的时候能随时调出备份。只保存在本地也不太靠谱，钛备份能够帮我把文件自动上传到 Google Drive / Box / Dropbox，这应该很好用，所以我选择下文的 <code>rsync-time-backup</code> 。</p><h3 id="rsync-time-backup"><a href="#rsync-time-backup" class="headerlink" title="rsync-time-backup"></a>rsync-time-backup</h3><p><a href="https://rsync.samba.org/">rsync</a> 是一个方便的文件同步命令行工具， <a href="https://github.com/laurent22/rsync-time-backup">rsync-time-backup</a> 大大提高了使用 <code>rsync</code> 备份文件的便利性。只需要输入源文件夹和目标文件夹， <code>rsync-time-backup</code> 就会自动把文件以类似 macOS 上「<ruby><rb>时光机</rb><rt>Time Machine</rt></ruby>」的方式备份，而且可以在任意平台任意设备上备份、恢复。</p><p>依赖 <ruby><rb>Windows Subsystem for Linux</rb><rt>WSL</rt></ruby> 1 以及 Termux，我一举解决了 Windows 和 Android 双端的文件同步问题。WSL1 上只需要 <code>sudo mkdir /mnt/drive/ &amp;&amp; sudo mount -t drvfs &lt;盘符:&gt; /mnt/drive/</code> 即可将存储盘手动挂载到可访问目录 <code>/mnt/drive/</code> 下，接着就可以从 <code>/mnt/c/</code> 把文件备份过去。Android 则更加方便，不需要手动挂载，直接使用 Termux 访问 <code>/mnt/</code> 下的存储盘就行（可能需要一些权限，而且不一定支持 NTFS）。<code>rsync-time-backup</code> 同时还支持连接远程服务器，如果有条件搭建 NAS 或拥有带 USB 口的路由器，都不再需要手动将备份盘在多设备间换来换去。</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>目前我本地备份文件的传输均通过 <code>rsync-time-backup</code> 完成，所以……也许这篇小短文可以到此为止？那就在这一部分说说以上工具同类们的使用感受吧。</p><p>钛备份这么多年来一直被各种备份工具「追平」甚至「超越」，可它们最多也只能备份和还原数据，距离替代钛备份还有相当长的距离，以至于当我实在忍不了钛备份的时候，除了零星几个 <a href="https://forum.xda-developers.com/t/app-root-5-0-1st-nov-2020-migrate-custom-rom-migration-tool.3862763/">Migrate</a> 和 <a href="https://swiftapps.org/">Swift Backup</a> ，大部分人都劝我接着忍下去。尽管如此，如果你没有那么复杂的需求，你也完全可以使用这两个工具应急。</p><p>我并非 macOS 用户不好评价，Windows 10 上自带的类似功能：「文件历史记录」我还是能吐槽的。它提供了（至少比命令行直观）的图形界面，默认备份用户目录，可以手动指定文件夹，可以备份到网络位置，插上存储盘后每一小时自动备份一次，听起来无比美好，如果可以忽略性能极其糟糕的「设置」应用，并且不在意备份文件不能在其他设备上使用的话。我的电脑在维修点被重置了系统，Windows 便认为这是两台电脑，拒绝为我恢复文件，哪怕是根本和设备 ID 或者当前用户无关的文件夹都不行，最后只能手动把文件复制回来，用 PowerToys Rename 通过正则表达式匹配批量去掉了每个文件后的时间戳，再全部取消只读，才勉强让大部分应用、文件恢复正常（还有几个死活好不了）。尽管它方便，私以为还是 <code>rsync-time-backup</code> 靠谱。</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>数据备份工具当然不止上文提及的这些。如果你拥有小主机甚至 NAS，数据备份会无比方便；如果没有，你也可以像我这样探索适合自己的备份方案。不管怎样，最重要的都是数据本身。追求更简单的数据备份方式当然无可非议，但如果代价是带来更大的安全风险，我还是认为需要再留个后手（例如我备份文件一般存储在 U 盘，最珍贵的数据会在可靠的机械硬盘、两个云端存储都保留一份）。</p><p>希望这篇文章能为你带来一些启发。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。&lt;/p&gt;
&lt;p&gt;事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。&lt;/p&gt;
&lt;p&gt;不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows / Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="备份" scheme="https://blog.stfw.info/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="数据" scheme="https://blog.stfw.info/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="记录" scheme="https://blog.stfw.info/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>为什么我不推荐 LG Gram</title>
    <link href="https://blog.stfw.info/articles/why-not-lg-gram/"/>
    <id>https://blog.stfw.info/articles/why-not-lg-gram/</id>
    <published>2021-04-06T14:08:28.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 <a href="https://github.com/cdr/code-server">code-server</a> 。</p><p>但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。</p><p>在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。</p><blockquote><p>我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。  </p></blockquote><span id="more"></span><h2 id="太长不看"><a href="#太长不看" class="headerlink" title="太长不看"></a>太长不看</h2><p>就像上面说的那样，我真无法向人掏心窝子地推荐 LG Gram。</p><p>Gram 的拉胯，绝对不只是哪个方面出了问题，而是方方面面都有问题。它的 <a href="./#%E6%80%A7%E8%83%BD">性能</a> 锁死到了最高 15W 的功耗，使用单热管单风扇企图为 i7 散热 ，并且 <a href="./#%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87%E5%92%8C%E4%BA%AE%E5%BA%A6">屏幕分辨率和亮度</a>  、 <a href="./#%E9%94%AE%E7%9B%98">键盘</a> 手感及背光都不尽如人意，还有 <a href="./#%E6%89%AC%E5%A3%B0%E5%99%A8">扬声器</a> 破音、音量过小……这些 <a href="./#%E7%A1%AC%E4%BB%B6">硬件</a> 缺陷， <a href="./#%E8%BD%AF%E4%BB%B6">软件</a> 部分同样兼容性差、不能让人放心， <a href="./#%E5%94%AE%E5%90%8E%E4%B8%8E%E6%9C%8D%E5%8A%A1">售后服务</a> 搅屎棍当得还颇有特色。</p><p>如果你想听听详细的吐槽（约 5000 字），那么请继续往下翻。否则，您可以直接退出，或者跳到我的 <a href="./#%E6%80%BB%E7%BB%93">总结</a> 。</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>这大概是 Gram 被诟病得最多，也是对日常使用影响最大的一个问题了。它主要的性能限制并非处理器（正相反它搭载的可是实打实的 10 代顶级移动端 i7），而是为了续航和散热对功耗作出的激进限制。毕竟是来自牙膏厂的 x86-64 架构，远做不到 Apple M1 那种级别的能耗比，15W 的功率限制 (PL1) 让 Gram 在持续高性能需求面前捉襟见肘，尤其是这 15W 还要同时支持 CPU 和 GPU。据一些测试，i7-1065G7 配上至少 40W 的供电才能如鱼得水，15W 嘛…它简直就像是被挂在架子上晒干的咸鱼。</p><p>如果很难从数字感受 15W 有多低的话，这里是一些实际使用体验。</p><p>从打开 DaVinci Resolve 的那一刻开始，掉帧和卡顿就像不断循环的 BGM，以最大音量反复播放，连剪个音频都颇为费劲。当我把 4K H.265 的素材导入进去后，它直接「乐死了」，预览区域动弹不得。</p><p>这对轻薄本要求确实太高了，讲点更实际的，比如外接显示器。4K 分辨率下，虽然日常操作还算流畅只是偶有掉帧，但当我打开 B 站看着视频和弹幕一会儿慢下来一会儿突然加速时…我觉得这方面我还是更喜欢用移动设备。</p><p>游戏性能更不用说。如果你晕 3D，那 Gram 能玩到你吐；如果你不晕 3D，用 Gram 就能体验晕 3D 了。往好处想，至少阻断了一大笔开销不是？不过说实话，画质调到勉强能看清，在 Cyberpunk 2077 上能跑到 7 FPS 也很对得住这颗处理器了。</p><p>我也不是没有尝试过绕过功耗墙，但迄今为止所有的尝试均以失败告终，更何况性能限制并非只有功耗墙。我能做的就是在 BIOS 里降低 50 mV 左右的电压，尽可能降低热量对性能的影响。</p><h3 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h3><p>单热管单风扇压 i7，你怕了吗？我怕了。开个机 CPU 温度 80 起跳 100 封顶，风扇转速拉满，听起来就像是企图用它玩游戏的人无助的哀嚎。处理只是需要稍微高点性能的任务，Gram 的 CD 面都会很快散发出比较明显的热感，以至于我怀疑，这次送修很有可能是长期高温导致的虚焊。</p><p>不仅如此。Gram 底面近乎无孔的设计（只有扬声器，螺丝藏在脚垫下面）严重加剧了散热的难度。它的风扇开口挪到了显示屏下方转轴处，避免放在软表面上导致风口被堵住的同时加大了散热难度，在下面摆个散热底座也收效甚微。</p><p>热量排不出去的结果就是，哪怕绕过了功耗墙，也会很快撞上温度墙而降频，性能暴跌。这也正是我手动调低电压的原因。功耗墙绕不过了，减缓一点撞上温度墙的速度总没问题吧？</p><p>问题挺大的，至少感知不强是真的。</p><h3 id="屏幕分辨率和亮度"><a href="#屏幕分辨率和亮度" class="headerlink" title="屏幕分辨率和亮度"></a>屏幕分辨率和亮度</h3><p>屏幕是 LG Gram 的一大优势，但它还是存在一些小小的问题，比如，只有 1080P（16 寸及以上不是），和峰值亮度不够。</p><p>前者不用说了，正是为了弥补这块分辨率不够的屏幕我才会考虑买个 4K 显示器用来写代码。对比同学的 Redmibook Pro 15，1080P 的字体显示即使是 14 寸 + 已经用上了所有优化方案的情况下都还有掩盖不住的发虚。</p><p>后者嘛，室内无法感觉到明显的差异，我也一直觉得没啥问题，直到我上次在高铁上顶着阳光用它码字，屏幕暗到只能勉强看清楚我写了啥。如果是游戏本还好，没有室外使用场景，可这是专注移动办公的轻薄本，我也只能含泪吐槽了。</p><h3 id="质感"><a href="#质感" class="headerlink" title="质感"></a>质感</h3><p>我身边所有人第一次接触 Gram 的时候，结合它极低的体重，无一例外都觉得它的外壳是塑料。</p><p><del>其实它就是塑料没想到吧嘿嘿嘿。</del></p><p>解释得多了就非常、非常让人懒得再解释下去了。它的外壳真的是金属，而且如果你不小心撞掉一小块漆，USB-C 口插着电把手放到那块掉漆的地方它还能电你。它只是长得很塑料，内里还是挺扎实的。</p><p>但内里扎实有什么用？看到 Gram 不一定能摸到 Gram，看着拉胯那还是拉胯。</p><h3 id="扬声器"><a href="#扬声器" class="headerlink" title="扬声器"></a>扬声器</h3><p>宣传图上说的 DTS:X Ultra 听起来很不错，实际使用感受让人决定把它直接关掉。</p><p>这可能并不是 DTS 的错，毕竟 DTS 做得再好，硬件上的鸿沟终究是软件无法弥补的。Gram 双扬声器的设计，没能节约多少内部空间（那个扬声器大小再塞一对进去都还绰绰有余），还成为了设计的一大败笔。就算一个人在安静的环境下用电脑，我都不会想打开 Gram 的扬声器。</p><p>它拉胯到什么程度呢？哪怕声音只开到 50% 都还是能听到破音，有时我会把声音拉到 100% 将 QQ 电话转接到外放，本就不高的通话质量经过破音这一折腾，<br>简直就是耳朵堕胎的灾难。</p><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>不知道什么原因，我手上的这款 Gram 有比较明显的延迟。平常使用感觉不出来，但一旦操作被简化到触控板/键盘轻点，它诡异的延迟就暴露无遗。Montaro 不是音游还能忍，Muse Dash 我用 Gram 玩过一把之后转手就申请了退款。</p><p>至于是什么原因，我到现在也还没有摸清楚，在我外接显示器和键鼠、关闭所有后处理效果后，这一症状没有任何缓解。值得一提的是，接上显卡坞后似乎没有那么严重了（尚未严格测试），可能是 Iris 核显带来的问题？目前我已经打消了在 PC 上玩音游的念头，也就无从查证了。</p><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>Gram 键盘的手感也是长久以来一直被人诟病的点之一，尤其是它软绵绵的回弹。在手感优异的笔记本键盘大行其道的今天，很多时候友商产品线里 Gram 一半价格的产品甚至我写到这里时用的罗技 K380 就足以将 Gram 的手感按在地上摩擦。</p><p>有个不知算不算问题的问题，鉴于 Gram 外壳用料偏软，键盘面用力按压就会有比较明显的下陷。当然，会下陷的只有一小块部位，一般敲键盘也远远达不到能让它下陷的力度，这就见仁见智了。</p><p>当然，Gram 的键盘还是有点优势的，比如键程。它的键程是我摸过所有笔记本里最长的，哪怕和游戏本相比也不遑多让。这又是一个见仁见智的问题：我觉得它一定程度上让手感好了一点，也正因如此一直对它的手感持中立态度，不过也有人认为，过长的键程配合过软的回弹，手感烂上加烂。</p><p>除此之外，Gram 的键位争议不小，不过在 2020 14 寸款上似乎没有体现，至少方向键是很正常的等大的小按键，Fn 功能左右映射到 Home 和 End，上下映射到 Page Up 和 Down 也很贴心。</p><p>再来说说背光。它的背光峰值亮度就跟屏幕峰值亮度一样拉胯，尤其是键盘是白色的背光也是白色的，打开背光后外部稍微有点光，整个键盘就会连个字母都看不见，能派上用场的场景就只有伸手不见五指的深夜一个人码字。</p><p>深夜一个人码字也就算了，至少有点使用场景，更让人无法忍受的是，它的背光不仅亮度低还漏光，亮得还不均匀。有几个字母不管怎么看就是比别的字母亮，而当从侧面看去的时候，缝里透出的光，证明了按键的亮度确实。</p><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>我特别好奇一开始到底是哪篇评测说的鬼话，说「LG Gram 的触控板很大，做工很好，手感很不错」。</p><p>事实上，它的触控板不大（16:10 设备另说），摸起来手感确实很好，只要别按下去。上下两端最大下沉深度和按压所需力度摸起来就像是两个触控板，如果以使用 MacBook 触控板的习惯，很可能从下往上拖动的时候，拖到一半就已经被判定为松开了。</p><p>做工嘛…就更不敢恭维了。从我拿到它的那一天开始，它的四边接缝就不均匀，宽的可以卡进去小拇指指甲，窄的和外壳紧密相贴。更迷惑的是，触控板似乎不是固定的，因为每次剧烈晃动后我把它从包里拿出来，各边的宽窄都会有变化。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="预装第一方"><a href="#预装第一方" class="headerlink" title="预装第一方"></a>预装第一方</h3><p>LG 自家应用虽然不够优雅，但也还算不错。它自带了控制中心、电源管理、阅读模式、屏幕显示、使用指南等应用，我们慢慢讲。</p><p>谢天谢地，Gram 没带 McAfee 也没带一票「电脑管家」，只有一个颇为简洁的控制应用，可调整最大充电量、开盖启动、C 口充电模式等。听起来很不错，但它在某次更新后就没能再打开。更糟的是，大部分设置在 BIOS 里根本找不到，也就彻底不能再修改了。</p><p>除此之外的系统控制，基本上就是 Windows 功能的套壳。电源管理，有点像部分 Android 系统自带的情景模式，没啥槽点（于我而言更没啥使用场景）；阅读模式好像会和 Windows 自带的同名功能冲突，作用也大致相同，都是套个变黄滤镜。</p><p>屏幕显示倒是有点意思，会在部分键盘操作时冒出来给个比亮灯更明显的反馈，比如开启 / 关闭大写锁定、调整键盘背光亮度等等。值得一提的是，把它卸载掉之后，别的所有功能都能正常运行，唯独触控板开关指示灯状态再也不变了（快捷键功能一切正常），逼人不得不使出浑身解数再把它找回来——对了，LG 官网上根本找不到它们。</p><h3 id="预装第三方"><a href="#预装第三方" class="headerlink" title="预装第三方"></a>预装第三方</h3><p>抛开那些「还不错」的官方应用，Gram 上带的第三方应用就让人不敢恭维了。它预装了好几个 Microsoft Store 里的，可以进行音频视频和图片编辑的应用，它们价格高昂但用户数量和评价都不算高，使用体验也确实不怎么样，尤其是和那些免费好用的桌面端应用比起来。</p><p>不过，如果只是轻度使用，它们也确实能满足一定程度的需求，这点不假，如果你能忍受它们令人难受的界面和操作逻辑，以及它们由不知名的小开发商发布的话。</p><p>除开这些，Gram 就没有更多的预装应用了。考虑到 UWP 应用都有独立的沙盒并且可以一键卸载，比起那些预装一大堆应用的大厂，也确实挺干净。</p><h3 id="非预装第三方"><a href="#非预装第三方" class="headerlink" title="非预装第三方"></a>非预装第三方</h3><p>这听起来不应该有问题啊？不都是运行在 x86-64 平台上的 Windows 家庭版（Gram 搭载的不是家庭中文版）吗？能有啥问题？</p><p>Intel Extreme Tuning Utility (XTU) 先给了我当头一棒，然后是所有企图监测 GPU 的软件。</p><p>前者以及所有我尝试过的同类软件都不支持调整 10 代及更新的、非原设计支持的产品，这也正是我必须要在 BIOS 里修改电压的原因。后者更气人，不管是不是牙膏厂官方都读不出来这颗 Iris 核显的具体数据，甚至有离谱的时不时告诉我，核显的频率在 4 GHz 和 0 之间反复横跳，而 CPU 不过也才 2 GHz。</p><p>另一个问题来源于驱动。Intel 的驱动更新来源是个谜，配合上国内时好时坏的 Microsoft Store 则有过之而无不及，甚至我电脑送修前备份数据的时候一打开 Microsoft Store 才意识到，原来显卡管理应用一直都有更新，只是从来没装上过。</p><p>糟糕的驱动更新导致部分应用渲染问题难以迅速得到解决，比如 Steam 九大名著之一，《山》。我前几次打开它时，直到我把它关掉都只能看到卡住的白色四边形，直至我插上了外接显卡，它才终于正常工作。</p><h2 id="售后与服务"><a href="#售后与服务" class="headerlink" title="售后与服务"></a>售后与服务</h2><h3 id="保修政策"><a href="#保修政策" class="headerlink" title="保修政策"></a>保修政策</h3><p>另一个槽点来了：LG Gram 一个非常亮眼的点就是极其强大的可扩展性，它堆料近乎顶级，还预留了顶级的扩展位供用户自行定制，但是…用户一旦定制，保修就没了。</p><p>LG 官方的说明原文如下：</p><blockquote><p>「笔记本产品需要添加内存或SSD（固态硬盘）时，须由LG售后指定维修站或指定经销商负责，由顾客付费进行，后续享有LG包修服务，客户要求使用第三方内存或SSD、或自行更换时，LG不提供服务，并且后续不享有LG包修服务。」  </p></blockquote><p>翻译过来也就是说，即使拥有这么强的可扩展性，LG 还是只允许用户在屈指可数质量也参差不齐的官方授权维修点对设备进行定制。就算 Gram 的后盖实在配不上它的可维护性，总该至少给个尝试的机会吧？而且，在我重读数次后发现，似乎只要用户不是在 LG 官方购买的内存条 / 硬盘并交由 LG 官方安装，LG 都有权拒绝保修。这对于一款以可扩展性著称的笔记本，实在是不应该。</p><h3 id="维修站点"><a href="#维修站点" class="headerlink" title="维修站点"></a>维修站点</h3><p>这一项的拉胯直接拖了整个保修的后腿。我前前后后一共接触了三家维修点，每一家给我的感觉都不一样。总体上来说，技术人员比接待人员更适合接待人，外包服务比官方维修给人感觉更好，这对于一个 LG 这种体量的公司而言实在是太不应该了。接下来是我比较长的维修记录，若您嫌太长可以点击 这里 直接跳到总结部分。</p><h4 id="重庆商社家维电器有限公司"><a href="#重庆商社家维电器有限公司" class="headerlink" title="重庆商社家维电器有限公司"></a>重庆商社家维电器有限公司</h4><p>这是三家里面我最满意的一家，也是唯一一家实际探访的。</p><p>2020 年暑期内存价格非常实惠，我旅游之余特意在京东上买了根内存条送到重庆，想着重庆有维修点，可以顺路把 Gram 的内存从 8 GB 扩容至 16 GB，就当是在重庆到处逛逛。</p><p>电话询问后，对方表示 LG 笔记本电脑维修有专门的师傅，需要提前预约，并给了我师傅的电话。我和师傅还算聊得开，交流一会儿后对方爽快地答应了维修时间。</p><p>从外观看起来，这家维修点专门承接各大厂商的维修外包，许多品牌的电子设备都在他们家维修，LG 就是其中之一。在我和第一次见到笔记本顾客的师傅有一搭没一搭地聊了几分钟后，师傅把装好内存条的电脑拿回给我并收了¥100 维修费，此次维修告终。</p><p>不得不说，师傅的操作可以用无比娴熟来形容，实在不敢相信他是第一次实际维修以难拆出名的 Gram。维修过程很愉快，但此次维修后师傅并未给我开具维修单，也未在 LG 的系统里留下维修记录，留下了一个小问题。</p><h4 id="长沙乐广电器维修服务有限公司"><a href="#长沙乐广电器维修服务有限公司" class="headerlink" title="长沙乐广电器维修服务有限公司"></a>长沙乐广电器维修服务有限公司</h4><p>我对 LG 售后服务的失望从这家开始。明明在官网上的维修范围里白纸黑字包含了「笔记本电脑」，当我准备抽空去一趟，想一个电话打过去先求救+预约时，得到的答复却是非常慵懒傲慢的「我们暂时并不提供笔记本电脑维修服务」，然后扔给了我售后服务热线的电话。</p><p>我还能怎么样？全湖南估计也就这一个维修点了，还不给我修笔记本，只能乖乖去找北京。</p><h4 id="北京乐金电子技术服务中心"><a href="#北京乐金电子技术服务中心" class="headerlink" title="北京乐金电子技术服务中心"></a>北京乐金电子技术服务中心</h4><p>与北京总维修点接触了几次后，我深深地感受到，一开始要是没找长沙维修点而是直接打电话给了当年帮我装内存的师傅，可能这个问题已经结了。</p><p>当我一个电话打到 <a href="tel:4008199999">4008199999</a> 也就是 LG 售后服务热线时，我连笔记本电脑该转接哪个键都没听到，又一次深刻意识到了笔记本电脑业务在 LG 中国的式微。没办法，转接家用电子吧。对面的人工客服倒是挺靠谱，记录下了我的问题类型、姓名和电话，告诉我稍后会安排专人打电话回来。</p><p>第二天（周一）上午，我成功接到了被标记为北京乐金电子技术服务中心的电话（奇怪的是，我在写下本文时，官网上查询服务点全北京范围内和寄修的收货地址附近都没有这家）。直到我电脑寄出前，与我联系的一直是一位语气比长沙乐广还要慵懒还要傲慢口音还操着点京腔，每次我提问题或要求重复听起来都很不耐烦的女士。我与她交谈数次后，她要求我将发票和凭证寄给指定的地址，维修前的交流到此为止。</p><p>顺丰把快递送到北京后，我接到了另一个京腔操着口音的电话，来自 LG 售后点的维修师傅。这次电话交流相当愉快。对方在无维修记录、无维修单，并且明确知道内存非 LG 官方指定的情况下仍为我免费处理，也接受了我拆机维护、清灰的请求，还同意维修完毕后运行三天以保证问题短期内不再复现。</p><p>不久后，我从顺丰处顺利取回电脑，该次维修圆满结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里已经 5500 字，我依然觉得前文一定还有遗漏。Gram 为数不多的优势就是轻薄和长续航了，但在 PD 高容量充电宝大行其道的今天，维持一整天的续航并不是什么难事，这又在 Gram 的坟上盖了一抔土。</p><p>可我依然觉得我会买 LG Gram。我就是喜欢它塑料般用两根手指就能拎走的机身，就是喜欢它干干净净的自带系统，就是喜欢它不管从哪个角度都一样好看的屏幕，还有足以维持我在咖啡店码一下午字，不需要带任何其它配件的续航。我更喜欢那种轻便的感觉，这种感觉胜过一切不满，让我享受与它共同出门的每一天。</p><p>即使它具备这么多缺点，最重要的还是我不曾也不会后悔购入 LG Gram，并且我还有极强的更新至最新款的欲望（奈何没钱）。LG Gram 根本不是一台尽善尽美的电脑，但它在它的垂直领域确实占据了独一无二的位置。我不推荐任何人在不明确自身需求的情况下贸然选择 Gram 作为主力机，但如果你身边的朋友碰巧拥有一台 Gram，那还蛮值得试试的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 &lt;a href=&quot;https://github.com/cdr/code-server&quot;&gt;code-server&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。&lt;/p&gt;
&lt;p&gt;在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="LG Gram" scheme="https://blog.stfw.info/tags/LG-Gram/"/>
    
    <category term="Windows" scheme="https://blog.stfw.info/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>站在普通人的角度，谈谈教育、兴趣、Linux 与编程</title>
    <link href="https://blog.stfw.info/articles/education-interest-linux-and-programming/"/>
    <id>https://blog.stfw.info/articles/education-interest-linux-and-programming/</id>
    <published>2021-03-17T17:51:15.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？</p><p>尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。</p><blockquote><p>本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。</p></blockquote><span id="more"></span><h2 id="当我们谈论现实"><a href="#当我们谈论现实" class="headerlink" title="当我们谈论现实"></a>当我们谈论现实</h2><p>我记得有听好友吐槽过教科书的不伦不类。它们既想激发学生对学科的兴趣，又想保持自身的绝对严谨，其结果就是往往写了很多复杂的公式和推理，却并没有带来什么实际意义，甚至都没能告诉学生这些理论知识能用来干什么。</p><p>这是一个很大的问题。一方面我们抱怨着现在的学生对学习越来越不感兴趣，另一方面我们把教科书写得越来越让学生提不起兴趣。</p><p>当我们不是因为学科之美，而是因为应试、因为绩点、因为越来越严重的内卷化而不得不学习某个学科的时候，它已经变味了，已经像饱受诟病的那样，「我又不可能买个菜还算个解析几何」。</p><p>不仅仅我们的教育是这样。每一个站在风口的行业，面临的都是这样的困境。我很小很小的时候，所有人都在学乐器学书画；我读初中了，所有人都在学机器人；我上大学了，大人们疯狂往计算机里挤，小朋友们也开始学少儿 Python 了。虽然在所有人都往人多的地方走的世界无可厚非，虽然确实真的有很多人藉此培养了自己的热爱，但对于更多的只是因为「它在风口上」、「怕孩子掉队」而一头扎进去的人，这值得吗？</p><p>在我看来，教科书、兴趣班甚至每个对某学科比常人多懂一些的人应该做的，不是摆架子摆身段昭告天下这门学科有多科学、多严谨、多复杂，学习它能带来多少好处，能帮助人在什么竞争中又出人头地一分。恰恰相反，是要让大部分人感受到这门学科有多诱人，让人知道为什么历史上有那么多名人，沉醉于这个学科带来的愉悦。</p><p>所有行业都应如此。Linux 之所以诱人，不是因为它历史有多么悠久，不是因为它配置起来有多复杂，更不可能是因为它只向有兴趣的人开放，而是因为，当我第一次在键盘上敲出那些命令，让看起来就很高端的、疯狂输出各种字符的窗口只围着我一个人转；当我花了好几个小时第一次编译出自己的嵌入式系统，随便抓起个 U 盘烧录完成功启动一台微型电脑；或者更早之前，当我执行 <code>sl</code> 之后看见一辆停不下来的火车从屏幕这边开到了屏幕那边时，内心涌起的兴奋感和成就感，就算用多少本 Linux 史书都压不下去。</p><p>就像我之所以能从容面对藏在各种各样的代码里各种各样的 bug 而丝毫不泄气，能够花一整个下午只是为了稳定一个很简单的特性，不是因为我用的语言有多先进，不是因为我写出来的代码性能有多优异，只是因为我满足了自己或者身边人的某个微不足道的需求，而满足这些需求带给我的成就感，胜过读完十本《从入门到精通》。</p><p>停止把这一切妖魔化吧。不管是数学还是物理，是 Linux 还是编程，它们对大部分人而言都不过只是一种与世界相处的方式，很多时候我们却一直在强调我们所懂的东西有多么深奥和高级，一直在为这一切设置无形的门槛，一直在劝退每一个试图了解这一切的人。「只有特别感兴趣的人才会深入钻研」没错，但是不试试，又怎么能知道自己是不是感兴趣呢？实在不行就当盲人摸象了吧，摸了象的盲人好歹能在某一天再次摸到象时意识到这是象，被「象很大很高很重一脚能把你踩死」这种话吓住连象都不敢摸的盲人，下次见到象也只有干瞪眼的份儿。</p><p>总有一天，我们都会负起自己该负的责任，成为各行各业各领域不可或缺的那一代人。到那时，难道我们还要设置门槛，劝退那些稍稍感兴趣的、还在犹豫的人吗？</p><p>至少我拒绝。如果我有机会，我会毫不犹疑地扔掉那些初步接触时根本不重要的死板而繁杂的理论。</p><p>一直以来，我也确实是这么做的。我想鼓励身边更多的人找寻 Linux 和编程的乐趣，想让他们知道编程不是改改代码看看输出就完事儿了，而是经常甚至马上可以派上用场的东西，如果有想做的东西大可一步一个脚印地做出来没人看笑话，Linux 也不是萌新之敌不会随随便便就让电脑爆炸，正相反，每条正确的指令带来的正反馈和命令行带来的强掌控感让人欲罢不能。在学习的过程中必然会碰到很多艰难险阻，而且会发现自己还有太多太多不知道的东西，那都不重要。重要的是，兴趣被调动起来了，然后一切都好说了。</p><p>话又说回来，那些理论真的不重要吗？当然不，否则也不会几乎所有人都从理论谈起。非要让我说的话，初次了解时，知道「这是个啥」确实很重要，除此之外的那些长篇大论，就留到兴趣使然时再说吧。</p><h2 id="当我们谈论我"><a href="#当我们谈论我" class="headerlink" title="当我们谈论我"></a>当我们谈论我</h2><p>我接触编程的具体时间已经很模糊了。很久以前，当我还是个 MC 玩家时，我第一次接触了我的「万恶之源」：ModPE。它采用 JavaScript 的基本语法，实现了一些能在 Minecraft PE 中改变游戏局势的功能。</p><p>在游戏里，当你不再需要挖一整个下午才能挖到一点点钻石，而是可以写几行代码直接刷满几箱子的钻石，你会选择哪个？这就是我初次真切地感受到编程带来的「成就感」。</p><p>那之后在社交平台上的成就暂且不提，借着 ModPE 的机会，我逐渐跟着各种现在看来很稚嫩的教程开始访问 Android 系统提供的诸多功能，直到我成功绕过游戏创建了第一个现在看来也很稚嫩的悬浮窗。很稚嫩，但作为一丢丢刺激、一丢丢兴奋和一丢丢成就感已经够了。以此为契机，我开始逐渐接触 Java 与 Android 开发。</p><p>在这之后，就是上架应用，获得微不足道又确实让人欢呼雀跃的下载量，甚至还有来自那么几个人的捐赠。</p><p>在这之后，就是逐渐接触越来越多的东西，学到越来越多的知识，开始思考、了解这一切的本质，开始逐渐向着独当一面进化。</p><p>尽管如此，在我已经懒得关注那些数字的今天，我还是很怀念第一行代码带给我的最初的感动。那是几乎改变了我整个人生轨迹的力量。</p><p>所以我其实并不觉得自己就有什么特别不一样的地方，我只是碰巧多会了一门手艺而已，这本质上和隔壁张三会木工楼上李四会弹琴一样，只是给了我一个稍微有点不同的与世界相处的方式。</p><p>家里书桌书架坏了，张三可以自己修，我们在忍和换之间还能选择；《底特律》的开场音乐尤其动人，李四可以自己把它弹出来，我们可以静静欣赏或者在内心大呼「卧槽牛逼」；教务系统少了好看的界面，会编程的人自己写一个，其他人还能忍受，又不是不能用。懂得如何更好地与世界相处确实会带来一些差异，但它远远没到被神化成一个不可或缺的技能的地步。</p><p>大部分人不会木工不会弹琴不会编程，他的一辈子照样可以过得很快乐。</p><p>一些时候的一些人，明明比普通人多了那么多能与世界好好相处的方式，过得却并不快乐。</p><hr><p>希望读完这篇并不短的随笔的你，在面对世俗的现实时，过得能更加快乐。</p><p>至少你可能还有写下人生中的第一行饱含着自由与激情的代码，或是执行人生中第一条不是因为「教程」这么说而是因为你想这么做的指令，或是摸出积满尘土的乐器感受遥远的生疏和热爱，或是不为了不挂科只是单纯地想要了解一门学科而翻开一本书的机会嘛，不是吗？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？&lt;/p&gt;
&lt;p&gt;尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>归于平凡的 18 岁，致终将平凡的自己</title>
    <link href="https://blog.stfw.info/articles/to-the-years-forthcoming/"/>
    <id>https://blog.stfw.info/articles/to-the-years-forthcoming/</id>
    <published>2021-02-18T16:00:30.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>如此平凡的晚上，伴着半梦半醒时远方传来的烟花声，人生中平凡的另一年悄然而至，或者已经开始，无声无息。</p><p>我就这样迎来了自己的成年，迎来了获知此前的期待早已失去意义的一刻。</p><p>在这一刻，我想回头看看自己。</p><span id="more"></span><h2 id="归于平凡"><a href="#归于平凡" class="headerlink" title="归于平凡"></a>归于平凡</h2><p>我想了很久该如何总结自己 18 年以来的人生，到最后我发现我承担不起。</p><p>就像一千个读者心里有一千个哈姆雷特，重要的不是活在作家心中的角色，而是角色在每个观众心中的投影。</p><p>就像我可以是在学术上咬死不放的暴躁学长，可以是不温柔不可爱但是噎死人第一名的逗比，也可以是在某些问题上有所见解的倾听者，更可以是数年前激起不大不小的风波的千古罪人。</p><p>那些几近被遗忘的，浩如烟海的过往并未因无人在意而毫无意义。它们组成了如今「我」的每一块碎片，牵一发而动全身。我在意地注视着它们，为自己保留放不下的傲气，在平凡的往复中忘却了存在的定义。</p><p>所以我选择把定义「我」这一任务，不负责任地交给每一个试图找到我的定义的人。</p><p>而在我眼里，至少我过去一直都是一个忠于自己的、平凡的人。</p><h2 id="终将平凡"><a href="#终将平凡" class="headerlink" title="终将平凡"></a>终将平凡</h2><p>我身边不平凡的人很多，但我从最开始就没想象过不平凡的自己。我胸无大志，幻想着平凡的生活，现在依然。</p><p>我找不同的理由逃避，我像极了吃不到葡萄的狐狸。</p><p>即使如此，我对平凡与生活的热爱，从一开始就占了上风。从偶尔挥笔写下供以后的自己理解的思绪，到 B 站娜娜子 <a href="https://space.bilibili.com/30751170">@cookie-NANA</a> 动态里一点一滴的快乐，再到身边某条陈旧的街道和快要消逝已然无法分辨的字迹，它们让我感觉我确确实实地活过，而非一个匆匆离去的过客。</p><p>我大概很难成为什么不一样的人。与生俱来的表现欲消失后，剩下的就只有对被关注的紧张与害怕。漏洞也好缺点也好，问题没人发现就不能得到解决，可我连跨出舒适圈让它们被指出的勇气都没有。</p><p>所以我很开心身边有那些人，也自私地希望身边那些人能和我一起度过时光之海，前往不知在何处的彼岸。</p><p>我也很开心能认识许多不一样的人、见识许多不一样的东西，在时光之海的浪潮冲刷掉粉饰与浮华后，还能让我留下一些用以珍藏。</p><p>我更开心的是能一直像如今的自己一样，平凡地倾听与被倾听、贴近与被贴近，不因种种桎梏畏首畏尾，不因弱点和软肋偶尔自然流露而紧张。再直肠子、再神经大条，也总会有我能信任的人、能做到的事。</p><p>或许将平凡贯彻到底，也能成为一种不平凡吧。</p><hr><p>这就是一个孩子在踏入黄金时代前，说不上是总结或者展望的，堆砌辞藻的陈词滥调。非常感谢你读到这里。</p><p>未开的荼蘼终归要绽放，正如久远的往昔也会随风而去。我不知道我如今的期望能在存留多久，这也正是我把它们存留于此的原因。很多年后我可能会感慨，可能会觉得可笑，也可能会感激自己，从一开始就没有动摇。</p><p>但是还没到那一天呢。</p><p>谁说得准呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如此平凡的晚上，伴着半梦半醒时远方传来的烟花声，人生中平凡的另一年悄然而至，或者已经开始，无声无息。&lt;/p&gt;
&lt;p&gt;我就这样迎来了自己的成年，迎来了获知此前的期待早已失去意义的一刻。&lt;/p&gt;
&lt;p&gt;在这一刻，我想回头看看自己。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>「分区存储」是个啥？</title>
    <link href="https://blog.stfw.info/articles/scoped-storage-in-reality/"/>
    <id>https://blog.stfw.info/articles/scoped-storage-in-reality/</id>
    <published>2020-11-12T02:20:35.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>书接上回。</p><p><a href="../android-storage-behavior-change/">前文</a> 我们说到，Android 10 引入的「分区存储」成为了不少媒体、用户、开发者关注的焦点。关于这一特性的文章层出不穷，但很可惜，这些文章要么只是概览，要么和官方一样说得一套一套的让人丈二和尚摸不着头脑，还有些搞错了分区存储的定位和原理。加上 iOS 和 Sandboxie 等前辈在应用隔离方面的成功实践，大部分人一看到「分区存储」这几个字，首先想到的就是这些前辈，进而理所当然地以为 Android 的分区存储 = 给应用挂载独立的存储空间，不管应用怎么造作都不会影响到用户和其他应用。</p><p>理想很美好，可惜事实并非如此。我们慢慢讲。</p><blockquote><p>本文大部分论断囿于作者的能力、阅历和经验，仅代表作者的理解与推断，还请广纳思想，避免偏听偏信。</p></blockquote><span id="more"></span><h2 id="咋回事儿？"><a href="#咋回事儿？" class="headerlink" title="咋回事儿？"></a>咋回事儿？</h2><p>关于「分区存储」，引用官方在 <a href="https://developer.android.com/training/data-storage#scoped-storage">Android 文件和数据存储概览</a> 里的描述：</p><blockquote><p>为了让用户更好地管理自己的文件并减少混乱，以 Android 10（API 级别 29）及更高版本为目标平台的应用在默认情况下被赋予了对外部存储空间的分区访问权限（即分区存储）。此类应用只能访问外部存储空间上的应用专属目录，以及本应用所创建的特定类型的媒体文件。</p></blockquote><p>前文里已经粗浅地将开发者方面文件访问的历史变化捋了捋，少数派的这篇文章： <a href="https://sspai.com/post/61168">《还存储空间一片清朗：Android 的「沙盒」机制何时到来？》</a> 讲得也比较透彻，尤其是用户体验和隐私方面，在此不再展开细说。</p><h2 id="那它到底是什么？"><a href="#那它到底是什么？" class="headerlink" title="那它到底是什么？"></a>那它到底是什么？</h2><p>就应用启用分区存储后的实际文件访问行为而言，这里要再强调一遍前文强调过的内容：至少在 Android 10 上， <strong>分区存储只是关掉了应用的存储权限</strong> 。</p><p>启用了分区存储的应用，能够访问的内容限于：</p><ul><li>应用的专属存储目录（ <code>Android/data</code> 文件夹下）</li><li>媒体文件（要访问其他应用的文件需要申请权限）</li><li>用户通过 <ruby><rb>存储访问框架</rb><rt>Storage Access Framework</rt></ruby> （SAF）授权的其他文件</li></ul><p>等等，是不是搞错了什么？这三样可都不是新面孔。最后这个……还用说吗？这可是老朋友了，Android 5.0 Lollipop 开始几近成为完全体，从完全存储权限迁移到 SAF 也没有想象中那么费劲。第二个更早，连最早被引入 Android 的时代都难以追溯（很可能和 Android 1.0 一样老），只是在 Android 10 上，一些特性因为分区存储受到了更严格的限制。第一个在 Android 2.2 Froyo 上已经存在，比分区存储这个概念产生整整早了九年。再过三年，2013 年的时候，Android 4.4 KitKat 已经让应用不需要额外申请权限就能访问自己的专属存储目录了。</p><p>由此可见，所谓「分区存储」给应用分配的「沙箱」，从七年前开始存在至今，并且这七年来几乎没有变过。</p><p>除非应用申请暂时关闭分区存储，否则应用能访问的文件范围仅限于此。分区存储除了对媒体文件施加了一些额外的限制，其余都和关闭了存储权限没啥两样。至少现在，与其把分区存储看成一种新行为，一种新标准可能更加确切。</p><h2 id="为什么说-Android-11-是「一次跃进」？"><a href="#为什么说-Android-11-是「一次跃进」？" class="headerlink" title="为什么说 Android 11 是「一次跃进」？"></a>为什么说 Android 11 是「一次跃进」？</h2><p>Android 11 带来了一个很大的改变：位于 <code>Android/data</code> 目录下的文件不能被其它应用访问。</p><p>这乍看起来是一个令人窒息的操作（当然它也的确是），让应用放在 <code>Android/data</code> 下错误日志之类的文件或文件夹对用户隐藏，给以往很多理所当然的操作带来了巨大的困难，甚至直接成为不可能。</p><p>然而，这却是 Android 分区存储的拼图中，颇为重要的一块。Android 10 发布后，不少应用因各种原因（比如适配最新 Android 版本的需要和 Google Play Store 的威逼）开始接受分区存储，开始规范自身的行为，开始将 <code>Android/data</code> 作为自身文件存储的根目录。即使是 QQ 和微信这类「老顽固」，也已经在将数据迁移到 <code>Android/data</code> （虽然迁移得让人扼腕）。经过了一年的过渡，在 Android 11 推出的时候，顺水推舟让应用的存储目录不再对用户和其他应用可见，从而形成的，不正是用户一直渴望的，不管应用怎么造作都不会影响到用户和其他应用的「沙箱」吗？</p><p>说得确切些，「分区存储只是关掉存储权限」，并不意味着分区存储不是沙箱机制。和其他沙箱不同的地方在于，分区存储并不是动态地将应用放到独立存储空间中运行（Rikka 的 <a href="https://sr.rikka.app/">存储空间隔离（存储重定向）</a> 一直在做的事情），而是给应用提供一套行为规范，让应用主动利用系统给应用分配的独立存储空间。这个「系统给应用分配的独立存储空间」，就是 Android 11 上被系统保护起来的 <code>Android/data</code> 。</p><hr><h3 id="跋：不算科普的絮叨"><a href="#跋：不算科普的絮叨" class="headerlink" title="跋：不算科普的絮叨"></a>跋：不算科普的絮叨</h3><p>如本节标题一样，原以为本文会写成一篇小小的科普，没想到写着写着推断 <del>（阴谋论）</del> 占了上风，自然也就不会像正经的科普一样可靠。不管怎么说，还是希望各位能够多提出意见、发表感慨。思想的碰撞，无论是对参与方还是对旁观者，或许都有所裨益。</p><p>本文的资料主要来源已经在文中或前文以超链接形式给出，感谢对应的作者以及读到此的各位对本文的莫大贡献。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;书接上回。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../android-storage-behavior-change/&quot;&gt;前文&lt;/a&gt; 我们说到，Android 10 引入的「分区存储」成为了不少媒体、用户、开发者关注的焦点。关于这一特性的文章层出不穷，但很可惜，这些文章要么只是概览，要么和官方一样说得一套一套的让人丈二和尚摸不着头脑，还有些搞错了分区存储的定位和原理。加上 iOS 和 Sandboxie 等前辈在应用隔离方面的成功实践，大部分人一看到「分区存储」这几个字，首先想到的就是这些前辈，进而理所当然地以为 Android 的分区存储 = 给应用挂载独立的存储空间，不管应用怎么造作都不会影响到用户和其他应用。&lt;/p&gt;
&lt;p&gt;理想很美好，可惜事实并非如此。我们慢慢讲。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文大部分论断囿于作者的能力、阅历和经验，仅代表作者的理解与推断，还请广纳思想，避免偏听偏信。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.stfw.info/tags/Android/"/>
    
    <category term="开发" scheme="https://blog.stfw.info/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="存储" scheme="https://blog.stfw.info/tags/%E5%AD%98%E5%82%A8/"/>
    
    <category term="分区存储" scheme="https://blog.stfw.info/tags/%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>写给所有人的 Android 文件访问行为变更</title>
    <link href="https://blog.stfw.info/articles/android-storage-behavior-change/"/>
    <id>https://blog.stfw.info/articles/android-storage-behavior-change/</id>
    <published>2020-11-08T16:44:50.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>Android 初代发布至今已有 12 年，这些年间，Android 一直因系统版本碎片化而饱受诟病。据 Google 数据，在统计范围内仍有 26.3% 的设备运行着 Android Marshmallow 及以下版本的系统，而升级到 Pie 及以上的设备更是只占了 39.5%。面对如此繁杂的系统版本，应用的兼容性是个大问题，尤其是文件访问方面的资料太杂乱分散，带来麻烦又浪费时间。本文以 Poweramp LRC Plugin 的开发为契机写就，希望能帮助此后跳进存储这个大坑里的开发者，以及想了解不同系统版本差异的用户。</p><span id="more"></span><blockquote><p>本文探讨对象为 Android 原生 / 类原生系统，深度定制系统带来的其他问题（点名批评一些国产砍了 DocumentsUI <sup><a href="#Android-4-4-KitKat-19">这是什么？ </a></sup> ），不会也无法在此提及。</p><p>下文范围限于通用文件访问，访问媒体文件或作为提供者的场景仅作补充，可能不够严谨。</p></blockquote><h2 id="Android-4-4-KitKat-以前-18"><a href="#Android-4-4-KitKat-以前-18" class="headerlink" title="Android 4.4 KitKat 以前 (~18)"></a>Android 4.4 KitKat 以前 (~18)</h2><p>众所周知，在 KitKat 以前的 Android 设备上，各路应用群魔乱舞，可谓「自启与保活齐飞，权限滥用共提权漏洞一色」，Android 4.1 之前连单独的读取权限都还没有。这一阶段，申请存储权限的应用能访问整个设备的存储空间（包括外置存储，如 TF 卡等）。那段时间的文件访问方式五花八门，应用可以通过 <code>GET_CONTENT</code> 和 <code>PICK</code> 两个 <ruby><rb>意图</rb><rt>Intent</rt></ruby> 的 <ruby><rb>行为</rb><rt>action</rt></ruby> 打开其它应用以选择文件，随后通过得到的 <ruby><rb>链接</rb><rt>URI</rt></ruby> 读取文件或对文件执行特定操作。前者获取到的 URI 只会允许应用读取内容，无法获取文件而不需要存储权限，后者则能使应用获取到指向文件本身的 URI，却并没能改变「群魔乱舞」的状况。</p><p>事实上，当时流行的解决方法（甚至被称为「正确」方法）是将 <code>PICK</code> 获取到的 URI 根据格式和来源解析并获取对应的文件路径，再通过 Java 提供的文件读写方案操作文件。获取路径的过程很复杂（也很脏），但它以添加几十行前人摸索出来的方法为代价，延续了许多开发者 Java 的操作习惯，或者单单只是绝对路径更「方便」，再加上文件系统直至 Android 10 才对应用封闭，这一方案「长盛不衰」。</p><blockquote><p>关于 <code>GET_CONTENT</code> 和 <code>PICK</code> ，官方的表述较难理解，同时由于写下此文时找不到合适的测试设备，虚拟机镜像也早已无处可寻，以上只是大概且很可能有所疏漏，建议使用前参考 <a href="https://developer.android.google.cn/reference/android/content/Intent#ACTION_GET_CONTENT">官方 ACTION_GET_CONTENT 文档</a> （只有英文）并多次测试，若有错误欢迎指出。</p></blockquote><p>不过，何必非得弄得这么脏？应用已经有了整个存储的读写权限，自己造一个文件选择器也不是什么难事。除此之外，经历过那段时期的人一定忘不了 <code>/sdcard/</code> 、 <code>/storage/emulated/0/</code> 等等绝对路径。如此，花样层出不穷，用户体验严重割裂，粗放管理（以及粗放管理下积累起来的过时资料）或许就是一大堆问题的起源、今日文件存储问题的开始。谁知道呢？</p><h2 id="Android-4-4-KitKat-19"><a href="#Android-4-4-KitKat-19" class="headerlink" title="Android 4.4 KitKat (19)"></a>Android 4.4 KitKat (19)</h2><p>从 KitKat 起，Android 引入了一套全新系统「<ruby><rb>存储访问框架</rb><rt>Storage Access Framework</rt></ruby>」，也就是 SAF，以及对应的 <ruby><rb>标准 UI</rb><rt>DocumentsUI</rt></ruby> 。 <a href="https://developer.android.google.cn/about/versions/kitkat#44-storage-access">官方描述</a> 如下：</p><blockquote><p>新的<strong>存储访问框架</strong>让用户能够在其所有首选文档存储提供程序中方便地浏览并打开文档、图像以及其他文件。用户可以通过易用的标准 UI，以统一方式在所有应用和提供程序中浏览文件和访问最近使用的文件。</p></blockquote><p>用大白话来说，使用 SAF，应用可以打开一个文件选择界面，使用户在标准 UI 内从所有 <ruby><rb>文档提供程序</rb><rt>document provider</rt></ruby> （作为文件来源的应用，比如照片、网盘）中选择文件，并将其授权给应用。引入 SAF 统一了用户体验，增加了文件来源（以往只能从某个应用选择，现在可在一个地方看到所有应用），也不要求通过 SAF 读写文件的应用获取存储权限。标准 UI 集成了 <code>GET_CONTENT</code> 的支持，也就是说，本身并没有适配 SAF 的应用也可以 0 成本通过标准 UI 选择文件，并保持与原来相同的行为（只要没用脏方法）。同时，Android 开始收紧外置存储的访问，应用必须请求读写权限才能操作外置存储，并且 <a href="https://www.androidcentral.com/kitkat-sdcard-changes">外置存储限制不小</a> 。这也造成了一揽子依赖 SD 卡的应用在系统更新到 KitKat 后停止工作，带来了不少抱怨。</p><p>KitKat 的 SAF 提供了 <code>CREATE_DOCUMENT</code> 和 <code>OPEN_DOCUMENT</code> 两个 action，分别对应创建文件和打开文件。 <code>GET_CONTENT</code> 并没有消失，它仍能像此前一样用于读入数据，而 SAF 提供给应用的是文件的「长期、持续访问权限」。例如，如果应用需要导入头像，那么它只需要 <code>GET_CONTENT</code> 即可，但若应用需要剪裁头像并保存到原文件，则必须使用 <code>OPEN_DOCUMENT</code> 。</p><p>随着 SAF 一同进入 KitKat 的，还有 <ruby><rb>内容解析器</rb><rt>ContentResolver</rt></ruby> 的新方法： <a href="https://developer.android.google.cn/reference/android/content/ContentResolver#openFileDescriptor(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal)">openFileDescriptor</a> 。它返回 <code>ParcelFileDescriptor</code> ，提供来自 Java 的 <ruby><rb>文件描述符</rb><rt>FileDescriptor</rt></ruby> ，与实际的文件对应，可以使用 Java 的文件读写方案读取。文件描述符只指向文件内容，提供基础的读写，但不包含文件路径，也没有 Java 常用的 <ruby><rb>文件</rb><rt>File</rt></ruby> 的复杂功能。根据 <a href="https://developer.android.google.cn/training/secure-file-sharing/request-file#OpenFile">官方的描述</a> ，</p><blockquote><p>由于客户端应用只会收到文件的内容 URI，因此，在此过程中可确保文件的安全。由于此 URI 中不包含目录路径，因此客户端应用无法发现和打开服务器应用中的任何其他文件。只有客户端应用可以访问该文件，而且必须具有服务器应用授予的权限才能访问。</p></blockquote><h2 id="Android-5-0-Lollipop-21"><a href="#Android-5-0-Lollipop-21" class="headerlink" title="Android 5.0 Lollipop (21)"></a>Android 5.0 Lollipop (21)</h2><p>Android 在 Lollipop 上进一步扩展了 SAF 的功能，允许应用使用新增的 action <code>OPEN_DOCUMENT_TREE</code> 请求用户授予某个目录下所有文件和文件夹的完全权限。由于标准 UI 具备外置存储的访问权限，应用可以通过这一新增特性再次取得 SD 卡权限，尽管通过 SAF 访问文件与此前有较大出入，但终归算是能用。</p><p>但是，秉着「能不做为什么做」的理念，诸多应用仍旧固守传统的文件访问方式，即便它们可以申请访问整个存储空间并获得类似的权限。</p><h2 id="Android-6-0-Marshmallow-23"><a href="#Android-6-0-Marshmallow-23" class="headerlink" title="Android 6.0 Marshmallow (23)"></a>Android 6.0 Marshmallow (23)</h2><p>Marshmallow 带来了 <ruby><rb>运行时权限</rb><rt>Runtime Permission</rt></ruby> ，针对 Marshmallow 及更新的 Android 版本开发的应用，不仅需要像以前一样在清单文件中声明，还需要在使用权限的时候由用户手动许可，才能够使应用获取权限。理想很美好，但没有统一规范的结果就是应用针对的 Android 版本提高了，滥用权限还是没变。在国内最常见的是，当应用第一次启动时，弹出一堆授权窗口，用户只能选择同意，否则，有点良心的应用会好好说明为什么需要权限，中等的是重复请求授权，没良心的直接不给用。</p><p>另一项重大的改动在于 <ruby><rb>可采用的存储设备</rb><rt>Adoptable Storage</rt></ruby> ，它允许用户将 SD 卡等外置存储格式化并作为内置存储使用，从而大幅增大存储空间。这与本文主题关系不大，但值得注意的是应用通过系统方法获取到的缓存文件夹等会随着应用安装的位置而变动，一定程度上避免了应用使用绝对路径访问文件。但…真的有人将 SD 卡这么用么？随着主流设备逐渐淘汰手机的 Micro SD 卡槽，这一特性也成为历史。</p><h2 id="Android-7-0-Nougat-24"><a href="#Android-7-0-Nougat-24" class="headerlink" title="Android 7.0 Nougat (24)"></a>Android 7.0 Nougat (24)</h2><p>Nougat 将应用间共享文件限制得更加严格，禁止将附带文件路径（ <code>file://</code> ）的 URI 暴露给任何其他应用，只能提供 <code>content://</code> URI。当然，只要一直遵循规范，无论是文档提供程序还是普通应用都不会在这里撞墙。</p><p>可能导致问题的是另一项特性： <ruby><rb>虚拟文件</rb><rt>Virtual Files</rt></ruby> 。此前的文档提供程序所提供的 URI 必须对应实际存在的文件，但在一些情况下，存储的文件或许并不能直接使用。考虑到这个问题，Nougat 提供了不需要对应实际文件的虚拟文件，其无法使用传统的文件读写方案读取，需要采取 <a href="https://developer.android.google.cn/about/versions/nougat/android-7.0?hl=zh_cn#virtual_files">特殊的方法</a> 获得文件输入流。</p><blockquote><p>虚拟文件本身概念抽象，加上官方的描述自相矛盾且 Nougat 以后就从未提及，使用到它的应用不多，相关的文章更是少之又少，能够把一切说清的几乎没有，因此本文暂且将其搁置不论。没有碰到最好，万一碰到了，可以参考这篇文章： <a href="https://commonsware.com/blog/2016/09/06/virtual-files-faq.html">Virtual Files FAQ (Sorta) - CommonsWare</a> ，目前能找到的最详细的描述。</p></blockquote><p>此外，Nougat 还提供了 <ruby><rb>作用域目录访问</rb><rt>Scoped Directory Access</rt></ruby> 以及一系列特定的存储目录（称为「标准外部存储目录」），例如图片、音乐等，在获得用户对这些存储目录的授权后，应用即获得了这一目录的完整权限。这有点像是 <code>OPEN_DOCUMENT_TREE</code> ，同样不需要声明权限，同样可以获得完全权限，但应用获得的路径由应用决定，免去了用户选择这一步骤。尽管如此，应用已经对完全读写权限的使用习以为常，因而这一特性的实际使用场景十分有限。其具体文档已经无处可寻，大概和下文将提到的、 Android 10 推出的 <ruby><rb>分区存储</rb><rt>Scoped Storage</rt></ruby> ，或者 Android 提供的强大的媒体文件访问脱不了干系。</p><h2 id="Android-8-0-Oreo-26"><a href="#Android-8-0-Oreo-26" class="headerlink" title="Android 8.0 Oreo (26)"></a>Android 8.0 Oreo (26)</h2><p>SAF 在 Oreo 被进一步增强，带来了三个新特性。</p><p>针对尚未下载的云端文件，Android 允许第三方的文档提供程序提供新型「可寻址的文件描述符」，这种文件描述符以及 <a href="https://developer.android.google.cn/reference/android/os/storage/StorageManager#openProxyFileDescriptor(int,%20android.os.ProxyFileDescriptorCallback,%20android.os.Handler)">新的使用方法</a> （以 <code>ProxyFileDescriptorCallback</code> 作为回调）使应用每次对文件进行操作的时候都会唤起文档提供程序并动态地加载应用所需内容，要多少就加载多少，从而避免了文件提供给应用时，文件必须全部下载到设备上。</p><blockquote><p>事实上，虽然该特性是全新的，但文件描述符还是那个 <code>ParcelFileDescriptor</code> ，只是使用方法变了而已。</p></blockquote><p>此前，媒体文件不能像文件一样被操作（例如移动、复制、删除），媒体管理器（相册、音乐播放器等）要让某个媒体文件变成可以操作的文档，只能在存储空间里面一个一个文件夹找（遍历）。Oreo <a href="https://developer.android.google.cn/reference/android/provider/MediaStore#getDocumentUri(android.content.Context,%20android.net.Uri)">引入的新操作</a> 允许媒体文件的 URI 与文档的 URI 互相转换，从而为媒体管理器提供了极大的方便。尽管如此，这种操作并不会同步授予应用对应文件的权限，应用仍然需要使用 SAF 获取用户许可才能操作文件。</p><p>最后一个新特性允许应用「从文件系统的根目录中确定路径」，根据官方的描述，可以满足有如下需求的应用：</p><blockquote><ul><li>您的应用使用可以显示特定文档位置的“另存为”对话框。</li><li>您的应用在搜索结果视图中显示文件夹并且如果用户选择某个文件夹，应用必须加载此特定文件夹内的子文档。</li></ul></blockquote><p>之所以这个特性写得这么保守又简短，是因为 Android 开发者文档根本没有说如何利用这种路径，而且这个特性的讨论度低得吓人，貌似作用就只有展示给用户。下面附上一段个人的测试结果，仅供参考，如果用不上的话可以跳过不看。</p><blockquote><p>根据测试，这个特性仅对通过 <code>OPEN_DOCUMENT_TREE</code> 获取到的文档树 URI 生效，如果对 <code>OPEN_DOCUMENT</code> 获取到的文档 URI 使用则会报 <code>java.lang.SecurityException</code> ，提示需要只有系统应用才能获取的 <code>MANAGE_DOCUMENTS</code> 权限。并且，这个特性有时会给出 <code>raw: /storage/emulated/0/XXX</code> ，而有时只会给出类似 <code>primary:XXX</code> 或者 <code>home:XXX </code> 的路径（后者 <code>home</code> 估计意为文档的主目录，前者大概是「标准外部存储目录」？），挺混乱的。</p></blockquote><h2 id="Android-9-Pie-28"><a href="#Android-9-Pie-28" class="headerlink" title="Android 9 Pie (28)"></a>Android 9 Pie (28)</h2><p>Pie 上对文件访问改动很少，唯一的差异是进一步提升了应用文件的安全性：针对 Pie 及更高版本开发的应用「无法使用所有人都可访问的 Unix 权限与其他应用共享数据」，也就是无法使应用自身存储的数据对所有应用开放。</p><h2 id="Android-10-29"><a href="#Android-10-29" class="headerlink" title="Android 10 (29)"></a>Android 10 (29)</h2><p>Android 10 带来的「 <ruby><rb>分区存储</rb><rt>Scoped storage</rt></ruby> 」是近年 Android 更新讨论的焦点之一。从 Android 10 开始，所有针对 Android 10 及更高版本开发的应用，除非使用特殊方法，否则都无法访问传统的存储空间。应用只能访问自己的专属文件或缓存文件夹，或通过系统提供的标准方法访问位于存储空间的媒体文件，要么就必须使用 SAF 配合系统标准方法。这意味着此前所有的「脏方法」，在针对的 Android 版本提升后全部失效。为了确保开发者积极适配 Android 的新特性，Google 目前还要求新应用上架 Google Play Store 及老应用更新时，针对的 Android 版本必须为 Android 10 以上。也就是说，只要是这几个月在 Play Store 更新过的 Android 应用，基本都适配了分区存储规范。</p><p>但是，分区存储并没有从实质上解决文件和文件访问方式混乱不堪的问题。首先，Google 为了给应用更多的缓冲时间，预留了 <a href="https://developer.android.google.cn/training/data-storage/files/external-scoped#opt-out-of-scoped-storage">一个标记</a> ，允许应用暂时通过老方法访问存储空间。而且 Android 作为开放的系统，不说那些直接提供安装包给用户的，大型的应用分发渠道（应用商店）远不止 Play Store 一家，虽然各家商店都有自己的规范，但各家商店审核不严格（点名批评所有国民级应用），而且这些规范都又老又旧，仿佛来自上个世纪。最后也是最重要的是，分区存储并不是类似于 iOS 或者 Windows 上 Sandboxie 的应用沙箱，至少在 Android 10 不可能是。正相反，从行为上而言，它只是 <strong>关掉了应用的存储权限</strong> 。</p><p>关于分区存储，在此就先按下不表。三言两语不一定能讲清楚，而若要详尽解答各个问题，可能就要另起一篇文章了。总之，对于本文，知道分区存储只是关掉存储权限即可。</p><p>除了分区存储，Android 10 在文件方面还作出了数项改进。</p><p>为了防止媒体文件在写入时被修改，Android 10 上的应用可以 <a href="https://developer.android.google.cn/training/data-storage/files/media#pending-media-files">标记媒体文件为待处理</a> ，从而获取对媒体文件的独占访问权限，推测其效果大概类似于 Windows 上的「文件被占用」。</p><p>同样是写入媒体文件，Android 10 默认会按照文件类型将媒体文件存储至对应文件夹，也 <a href="https://developer.android.google.cn/training/data-storage/files/media#provide-hint">给了应用指定存放路径的自由</a> 。例如，使用系统标准方法存储、不指定路径的图片默认在 <code>Pictures</code> 文件夹，应用也可以选择将其保存在 <code>Pictures/我的应用</code> 里。为了防止这个特性被滥用（比如明明是个图片却要丢进音乐里），Android <a href="https://developer.android.google.cn/reference/android/provider/MediaStore.MediaColumns#RELATIVE_PATH">作出了相应的限制</a> 。</p><p>在 Android 10 上，不同的外置存储拥有各自唯一的名称。如果应用需要记录文件的来源，或者控制文件存储到哪个外置存储， <a href="https://developer.android.google.cn/training/data-storage/files/external#unique-volume-names">这个特性</a> 便能派上用场。</p><h2 id="Android-11-30"><a href="#Android-11-30" class="headerlink" title="Android 11 (30)"></a>Android 11 (30)</h2><p>文件访问及分区存储在 Android 11 上迎来了一次跃进。</p><p>Android 10 用于通过老方法访问存储空间的标记，在针对的 Android 版本提升到 Android 11 后不再可用，为了适应部分应用（比如文件管理）的需要，新的权限 <code>MANAGE_EXTERNAL_STORAGE</code> 应运而生。申请这个权限的应用和此前一样，拥有对存储空间的完整访问权限。根据观察，暂且可以把这个权限当作原来标记的替代品，其功能相差不大。当然，Google 可不是傻瓜，毕竟是自己造出来的规范，自然不会让随便什么阿猫阿狗都能挂着这个权限在 Play Store 上招摇过市。具体的使用范例、条件等可以查阅 <a href="https://developer.android.google.cn/training/data-storage/manage-all-files">管理所有文件的官方文档</a> 。</p><p>在 Android 11 上，Java 提供的传统文件访问方案被部分带了回来：只要拥有媒体文件的读写权限（例如应用专属目录的文件或是应用自身创建在存储空间的媒体文件），应用就可以通过 <a href="https://developer.android.google.cn/training/data-storage/shared/media#direct-file-paths">直接文件路径</a> 读取这些媒体文件。当然，这种方案受到分区存储的限制，强行访问应用不该访问的地方会导致报错。</p><p>Pie 引入的特性在 Android 11 上又进了一步：针对 Android 11 开发的应用不但不能让自己的数据对所有应用开放，也不能访问其他针对 Oreo 及以下版本的应用开放的数据。</p><p>受影响的还包括应用位于 <code>Android</code> 目录下的外部存储目录。以前，这些目录的访问限制很少，只要应用没有启用分区存储并且拥有存储权限，它就几乎能在这里肆意妄为。现在，无论是停用分区存储还是使用 SAF 请求用户授权， <code>Android/data</code> 目录都不再对应用开放（虽然它还在那里），意味着分区存储正朝着 Google 预想的方向前进，并且已取得一定成效。Android 11 的 SAF 对 <code>OPEN_DOCUMENT_TREE</code> 的限制不止于此。针对 Android 11 开发的应用无法再请求用户授予对各个存储设备（包括自带的存储空间和外置存储，例如 SD 卡）根目录以及系统下载目录的权限，提高用户的隐私安全。</p><hr><h3 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h3><p>作为一个文笔不精阅历不深的摸鱼开发者，花了快 5500 个字，终于讲完了 KitKat 以后各个 Android 版本之间文件访问的差异，本文也从一开始的科普向逐渐转为了文末的四不像。本文不够清楚，更不够深入浅出，也没有什么深度，只是尽可能还原这些特性本貌的同时偶尔穿插个人的见闻、体验与感受，还请各位多多包涵、多多指教。</p><p>本文的资料来源主要是 Android 官方提供的行为变更文档、Stack Overflow 的诸多提问者与回答者以及 Google 找到的其他网站，特此向这些作者、开发者与网站运营者致以敬意。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 初代发布至今已有 12 年，这些年间，Android 一直因系统版本碎片化而饱受诟病。据 Google 数据，在统计范围内仍有 26.3% 的设备运行着 Android Marshmallow 及以下版本的系统，而升级到 Pie 及以上的设备更是只占了 39.5%。面对如此繁杂的系统版本，应用的兼容性是个大问题，尤其是文件访问方面的资料太杂乱分散，带来麻烦又浪费时间。本文以 Poweramp LRC Plugin 的开发为契机写就，希望能帮助此后跳进存储这个大坑里的开发者，以及想了解不同系统版本差异的用户。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://blog.stfw.info/tags/Android/"/>
    
    <category term="开发" scheme="https://blog.stfw.info/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="存储" scheme="https://blog.stfw.info/tags/%E5%AD%98%E5%82%A8/"/>
    
    <category term="行为变更" scheme="https://blog.stfw.info/tags/%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用 OBS 和 Virtual Cable 私人直播</title>
    <link href="https://blog.stfw.info/articles/stream-privately-with-obs-and-virtual-cable/"/>
    <id>https://blog.stfw.info/articles/stream-privately-with-obs-and-virtual-cable/</id>
    <published>2020-09-14T14:53:41.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>明天就能玩到心心念念的原神了，作为从漫画发布起就一直关注的云旅行者，在因为时间和年龄错过了内测之后，终于有机会到提瓦特大陆一睹期待已久的美景。欢喜之余，自然想让亲近的人与自己分享这份激动。</p><p>这就带来了问题。鉴于隐私、年龄等因素，在 B 站直播并不是个好主意。最好的平台当然是 QQ，它不需要双方再额外装上其它令人生畏的国产软件。然而，我所用的 TIM PC 端 2.3.2 版内建的「屏幕分享」并不包括系统音频，也无法捕捉 OBS 混音处理后的音频。OBS 强大，可面对 QQ 这种私有协议+客户端也无计可施。VB-Audio Virtual Cable 能够设置为实体麦克风的侦听输出，但若要将系统音频全部塞进去（考虑到大部分游戏并不支持设置音频输出设备），就只能将默认音频输出设置为 Virtual Cable，带来了对面说话 -&gt; 通过 Virtual Cable 播放给对面的套娃场景，更别说在各种各样的地方指定输出设备得有多复杂了。</p><p>还好，OBS 论坛里的 <a href="https://obsproject.com/forum/threads/obs-as-an-audio-input-virtualcam-but-for-audio.116802/">这篇帖子</a> 的博主和我有一样的疑惑，并且帖子里给出了可以用的回答。本文以中文将其记录，并改造成了 QQ 可用的版本，同时提供了其它场景可能可行的解决方案。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p><a href="https://obsproject.com/">Open Broadcaster Software (OBS)</a> - 混音</p><blockquote><p>对，只拿来当混音台。太委屈这么强大的工具了，所以如果你有更好的选择，只要它支持同时内录和麦克风录制并且可以播放到指定设备，就可以用它替代 OBS，也欢迎向我推荐。</p></blockquote></li><li><p><a href="https://vb-audio.com/Cable/">VB-Audio Virtual Table</a> - 输出混音后的音频</p></li><li><p>手和脑</p></li></ol><h2 id="音频调试"><a href="#音频调试" class="headerlink" title="音频调试"></a>音频调试</h2><p>首先打开 OBS Studio 配置音频。OBS 提供了友好的简体中文界面，找到位于下方的「混音器」并不难。在这里，你能看到「桌面音频」和「麦克风/Aux」，前者代表了系统音频，而后者则来自系统默认的麦克风。默认情况下，只需要对这二者进行混音即可。当然，为避免奇奇怪怪的问题导致抽风（比如默认麦克风被修改）或是只希望录制来源于特定窗口的音频，左侧「来源」对音视频源的自定义设置极其丰富。在那儿添加了一个音频源之后，就能在「混音器」里找到了。我的图片中添加了一个指定了输入设备的「音频输入捕获」。</p><p>设定好之后，点击右下角的「开始录制」就能测试音频了。你可以播放音乐并以正常姿势说几句话，同时不断调整混音器中的音量。录制完毕后，在资源管理器的「视频」文件夹后可以找到录制结果。播放它，找到最舒适的音量大小，然后在 OBS 中修改音量即可。</p><h2 id="音频输出"><a href="#音频输出" class="headerlink" title="音频输出"></a>音频输出</h2><p>在调试完毕确认可以使用后，点击「混音器」里任意一个音频源右下角的齿轮图标，进入「高级音频属性」。</p><p><img src="1.png" alt="Screenshot 1"></p><p>在「高级音频属性」面板中，将你需要使用的所有音频源的「音频监听」设置为「仅监听」或「监听和输出」。对于这篇文章的目的而言，这两者都一样，但如果你还想在游戏的同时通过 OBS 录制，那就只能选择「监听和输出」。</p><p><img src="2.png" alt="Screenshot 2"></p><p>随后，转向左上角文件 -&gt; 设置，打开「音频」选项卡，调整「监听设备」，将其修改到此前装好 Virtual Cable 后新出现的 CABLE Input。</p><p><img src="3.png" alt="Screenshot 3"></p><p>这样，当其它应用将 CABLE Output 作为麦克风时，它能录制到的音频就只有在 OBS 混音完成后的音频和其它（如果有）应用通过 CABLE Input 输出的音频。</p><p>万事俱备，只差最后一步。打开 TIM / QQ，进入设置，快速定位到「音视频通话」选项卡，此时应该能够看到自定义麦克风的选项。剩下的步骤已经很明确了，配置完毕后找个好友或者自己开小号，使用 QQ 自带的「屏幕分享」，看看效果吧！</p><p><img src="4.png" alt="Screenshot 4"></p><p>再多说一句，若你并不使用 QQ 的「屏幕共享」，希望能够将 OBS 录制的视频也作为视频源，可以体验这个插件： <a href="https://obsproject.com/forum/resources/obs-virtualcam.949/">OBS Virtualcam</a> ，具体使用方法在插件说明里讲得很清楚，在此不再赘述。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;明天就能玩到心心念念的原神了，作为从漫画发布起就一直关注的云旅行者，在因为时间和年龄错过了内测之后，终于有机会到提瓦特大陆一睹期待已久的美景。欢喜之余，自然想让亲近的人与自己分享这份激动。&lt;/p&gt;
&lt;p&gt;这就带来了问题。鉴于隐私、年龄等因素，在 B 站直播并不是个好主意。最好的平台当然是 QQ，它不需要双方再额外装上其它令人生畏的国产软件。然而，我所用的 TIM PC 端 2.3.2 版内建的「屏幕分享」并不包括系统音频，也无法捕捉 OBS 混音处理后的音频。OBS 强大，可面对 QQ 这种私有协议+客户端也无计可施。VB-Audio Virtual Cable 能够设置为实体麦克风的侦听输出，但若要将系统音频全部塞进去（考虑到大部分游戏并不支持设置音频输出设备），就只能将默认音频输出设置为 Virtual Cable，带来了对面说话 -&amp;gt; 通过 Virtual Cable 播放给对面的套娃场景，更别说在各种各样的地方指定输出设备得有多复杂了。&lt;/p&gt;
&lt;p&gt;还好，OBS 论坛里的 &lt;a href=&quot;https://obsproject.com/forum/threads/obs-as-an-audio-input-virtualcam-but-for-audio.116802/&quot;&gt;这篇帖子&lt;/a&gt; 的博主和我有一样的疑惑，并且帖子里给出了可以用的回答。本文以中文将其记录，并改造成了 QQ 可用的版本，同时提供了其它场景可能可行的解决方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="记录" scheme="https://blog.stfw.info/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="直播" scheme="https://blog.stfw.info/tags/%E7%9B%B4%E6%92%AD/"/>
    
    <category term="串流" scheme="https://blog.stfw.info/tags/%E4%B8%B2%E6%B5%81/"/>
    
    <category term="应用" scheme="https://blog.stfw.info/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>一个男生使用了 7 天 Apple Watch，这是他的生活发生的变化</title>
    <link href="https://blog.stfw.info/articles/7-days-with-apple-watch/"/>
    <id>https://blog.stfw.info/articles/7-days-with-apple-watch/</id>
    <published>2020-08-12T14:12:51.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p><del>建议改成：一个男生背叛了 7 天 Android…</del></p><p>不管「背叛了 Android」是不是实话，「背叛了 Android 阵营的智能可穿戴设备」是真的。</p><blockquote><p>本文约 4100 字，阅读约需 10 分钟。作者使用的设备为 Apple Watch Series 4 | 40 mm | GPS 版，搭载 watchOS 6.2.8。本文很长，全程无图，还请包涵。</p></blockquote><hr><p>几个月以前，我还是个傻傻地以为自己对 Android 的忠诚就像对外语系的忠诚一样牢不可破的毛头小子。后来，因为种种因素，我的志愿几乎全填了工科系，还入手了 iPhone 8 用国产软件大呼真香（参见前文），现在，就连一直渴望拥有的 Galaxy Watch / Wear OS 设备，都被我换成了 Apple Watch Series 4。</p><p>网上关于 Apple Watch 的文章很多很多，但 Apple Watch 给不同的人带来的感受，自然会因经历不同、使用场景不同等原因而不尽相同。这是我，一个 Android 开发者&amp;爱好者、Windows 用户，直到半个月前都从来没有亲自接触过 Apple 生态的人，在初步接触并依赖其生态（尤其是深度使用智能可穿戴设备）后所写下的感悟。</p><span id="more"></span><h2 id="为什么是-Apple-Watch-？"><a href="#为什么是-Apple-Watch-？" class="headerlink" title="为什么是 Apple Watch ？"></a>为什么是 Apple Watch ？</h2><p>要回答这个问题，我们得先来看看智能穿戴设备的现状。目前，市面上的可穿戴设备百花齐放，异彩纷呈，呈了又呈。某宝搜索「智能手环」和「智能手表」都能得到整整 100 页搜索结果，从一线国际大厂到不知名山寨小厂，人人都想挤进这个已经趋近饱和的红海分一杯羹。</p><p>但是，目前市售的「智能穿戴设备」，真的智能吗？大部分仅能实现运动追踪、心率检测的手环暂且不提，不妨看看 Wikipedia 对于「智能手表」的定义：</p><blockquote><p><strong>智能手表</strong>（<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E6%96%87">英文</a>：<strong>Smartwatch</strong>）是安装有<a href="https://zh.wikipedia.org/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F">嵌入式系统</a>、用于增强基于<a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%90%98">报时</a>等功能的腕部<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E8%A1%A8">手表</a>，其功能相似于一台<a href="https://zh.wikipedia.org/wiki/%E4%B8%AA%E4%BA%BA%E6%95%B0%E7%A0%81%E5%8A%A9%E7%90%86">个人数码助理</a>。早期智能手表既可以执行<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AE%A1%E7%AE%97%E5%99%A8%E6%89%8B%E8%A1%A8&action=edit&redlink=1">计算</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BF%BB%E8%AF%91">翻译</a>或者操作<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8E%8C%E4%B8%8A%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F&action=edit&redlink=1">掌上电子游戏</a>等基础功能，中期智能手表则实现了<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A9%BF%E6%88%B4%E5%BC%8F%E9%9B%BB%E8%85%A6">可穿戴式电脑</a>的功能。大多数智能手表可以运行<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8B%95%E8%BB%9F%E4%BB%B6%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F">流动软件应用程序</a>，一些可以运行<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E5%8B%95%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">移动操作系统</a>，少数有着完整的<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E8%A1%A8%E6%89%8B%E6%9C%BA">移动电话</a>功能。其他的功能大多与便携式多媒体播放有关，比如播放<a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E9%A2%91%E5%B9%BF%E6%92%AD">调频</a><a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%94%B5">广播</a>与音频或视频文件，以及通过<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99">蓝牙</a>耳机收听。</p></blockquote><p>也就是说，许多厂商冠以「手表」之名的，其实无法被列入「智能手表」的行列，只能算是「大多数」之外的「少数」，或者就是被许多网友戏称为的「大手环」。手环不好吗？当然不，手环很好，尤其是最近的小米手环 5，它香到让一个已经入了 Apple Watch S4 的人垂涎三尺。如果没有智能手表相关需求，我会让向我征求建议的人直接买它。</p><p>让我想入手一款「智能手表」的，另有原因。</p><p>进入高三的第四个月，我入手了一块二手的 Moto 360 Sport ，企图尝鲜 Wear OS。当时的想法是，反正就两百来块钱，就算很垃圾很垃圾，只要体验到了 Wear OS 就不算亏。没想到，在接下来不到一个月的时间中，我不断吐槽着 Moto 360 Sport 的垃圾，一边深深地感受着 Wear OS 的魅力。它陪着我跑完了人生中跑得最快的一次长跑测试（当然还是很慢），让我养成了晚自习课间跑步的习惯，养成了下教学楼必揣蓝牙耳机的习惯，也养成了每天看看自己的 Heart Points 并尽力达成目标的习惯。这让我在突然将主力设备切换回戴了一年有余的小米手环 3 NFC 版时，产生了很强的落差感。现在想想，「毕业后买可穿戴设备」的想法起源于很早以前，可如此坚定地说「毕业后买块表」，确实是在那之后。</p><p>既然如此，为什么最终却选择了 Apple Watch，而非我大加赞赏的 Wear OS，或是非常欣赏的 Gear / Galaxy Watch 设备呢？</p><p>正如我前文所提到的那样，Apple 十分擅长建立一个完善而封闭的生态。Apple 的生态不一定是最开放的，社区不一定是最庞大的，然而凭 Apple 的号召力，便能够轻而易举地让开发者围着它转。最明显的例子就是 Apple Pay，它从在国内正式上线起就成了大众关注的焦点，甚至间接地推动国产厂商纷纷推出自家系统的预装钱包。尽管如此，无论怎样发展，在中国大陆用得最爽、各家银行支持最完备、用起来最能给人安全感的，一直是 Apple Pay。就算抛开这些，单论刷卡体验，Apple Pay 几乎秒响应这一项，已经够让人扔掉国产设备了。</p><p>另一个原因是系统的完成度 / 可靠度。放到智能穿戴设备上来说，我不希望我的手表三天两头出各种千奇百怪的 bug，也不希望在我脱离手机只有 Wi-Fi 的时候，我还要考虑怎样才能访问手表的语音助手。我更不希望它的底层让一块配置本就不高的智能手表承受太多它不应承担的重量，比如跑一个 Android，享受计时器熄屏后就被杀掉，或是同时开音乐和跑步就分分钟暴死在我面前。当然，优化上乘同样也是 Apple 良性生态的体现。</p><p>那 Wear OS 真的就没有一点好处了么？当然不。我到现在为止还会被 Wear OS 的动画所折服，还会在一些交互的小细节上发现 Google 的认真，还会想再次体验那些初见不经意，实际用起来却离不开的亮点。更重要的是，跑在手表上的 Android，仍旧吸引人。可惜，Wear OS 的生态实在过于残缺，生态又恰恰是决定消费者选择的重要因素。现在来看小米手表的失利，其实就是 Wear OS 及其生态在中国大陆的失利。</p><h2 id="有何感慨？"><a href="#有何感慨？" class="headerlink" title="有何感慨？"></a>有何感慨？</h2><blockquote><p>事先声明，对公司的好感不代表对其特定产品的好感，公司的作风也不代表产品的品质。</p></blockquote><p>即使是市面上最好的智能手表，最终还是免不了被归类于「大手环」。没错，Apple Watch Series 4 拥有一块够用的屏幕，能够安装诸多第三方应用，有着不错的开发者支持，在我使用它的这些天，它的用处却与小米手环 3 如出一辙，甚至还不如后者。Apple Watch 能记录步数并转化为热量或距离，小米手环也能；Apple Watch 能为一天的活动设置目标，小米手环也能；Apple Watch 能发出久坐提醒，小米手环也能；Apple Watch 能全天候测量心率，小米手环也能；Apple Watch 能刷公交卡，小米手环也能；Apple Watch 能用 Siri ，小米手环 4 以后的 NFC 版也有小爱同学；Apple Watch 最多两天一充，小米手环续航两周；Apple Watch 不能自动监测睡眠，但是小米手环能。</p><p>「不是有很多第三方应用能够提供相当不错的睡眠监测体验吗？」</p><p>是这样没错，这是 Apple Watch 的优势。然而，比起在各种良莠不齐的应用之间互相比较、换来换去（甚至找不到足够科学 / 精确的），还要忍受对于试用来说高昂的付费和最大 48 小时的退款处理（再次夸奖 Play Store 的一键后悔药），官方推出的睡眠记录功能，无疑会大大改善用户体验。当然，watchOS 7 上 Apple 将要推出官方的睡眠追踪，免除了用户自行选择应用之苦，比较让人期待。</p><p>这还只是睡眠追踪。在 App Store 里有着数不尽的应用可供选择，这些应用足够强大，可因为手表自身的特性以及我个人的使用习惯，许多应该交由手机完成的事情或是我用不上的功能我都没有强行分配给它。当我筛选掉大部分我并不需要的功能之后，剩下来的应用，似乎也不多了。</p><p>顺带一提，Apple Watch 上虽然有网易云音乐，但还处在一个相对来讲「不好用」甚至「不能用」的状态。无法查看歌单，无法搜索歌曲，「我喜欢」播放的甚至不是我点过红心的歌，下载没有下载进度，我连在下载哪首歌都不知道…我以后再也不说 Wear OS 的网易云音乐是残废了，我终于见到真正的残废了……</p><p>当然，还有值得夸的地方，比如呼吸。每天送来的呼吸提醒，让我开始关心精神的放松。一分钟的正念冥想短暂，却让人有达成的动力。还有活动圆环，我将其设置在 700 大卡，为了达成给自己设定的目标，我这些天每天出门晨跑，虽然只有三公里（或者更少，根本达不到 700 大卡，还好我有下午出门散步的习惯），也算是开始运动了。</p><p>并且，藉由 Apple 的算法，Apple Watch 对我个人各项指标的了解可以说做到了极致。除了「静息心率」、「步行平均心率」、「健身记录」这些大家都有 <del>（你说 XXX 没有？抬走）</del> 的东西，Apple 还提供了「心率变异性」、分离的「活动能量」与「静息能量」、「心率恢复」、「最大摄氧量」……看着自己的身体指标随着坚持锻炼逐渐改善，内心想必会满溢着成就感吧。</p><p>最重要的是，Apple 生态圈内的一切健康数据，从步数到经期，从呼吸、睡眠到性行为，都能在 iOS 自带的「健康」应用中查阅或录入（当然有些只能手动录入）。这是生态带来的、其它智能穿戴设备无可比拟的优势。Android 这边或许有个 Google Fit 可以一战，那国内呢？难怪 Apple 生态能「真香」。</p><p>Apple Watch 继承了 iPhone 的支付体验，比起小米手环 3 NFC 版，刷公交卡快多了。至于别的…因为我身处某不知名小县城，本地的店铺基本上都支持但只支持蓝绿二维码作为移动支付手段。即便是美宜佳或者蜜雪冰城这种从体量和定位上都应该标配 POS 机的地方，都只配备了扫码机，甚至只有二维码。二维码已经几乎垄断了小额支付，导致银行卡沦落到购买大件的专属。上次刷 iPhone 的 Apple Pay 是在本地的大型超市，但我还没到可以把逛超市变成日常的地步（因为抑制不住自己花钱），所以刷卡暂时还没用上。一定要说的话，受限于手表自身各种因素所以没有 iPhone 那么「闪」，但总归会比憨憨二维码快吧？大概。</p><p>再说说重量吧。比起小米手环 3 或者手环这一品类，作为手表的 Apple Watch 确实重不少。习惯了小米手环后换到 Apple Watch 看起来就是 20 克到 40 克的变化，实际发生的时候「异物感」仍然存在。轻量是几乎所有手表都无法企及的、手环独占的优势。当然，适应期只有最开始的几天。后来，情况逐渐演变成了：能够感知到 Apple Watch 的存在，却并不觉得这种重量让人不适。习惯于使用手环的人，在切换到手表之前建议稍加关注。</p><p>无论可自定义功能和第三方应用如何，是「智能手环」还是「智能手表」，其最终作用都相差不大，都会融入使用者生活，成为难以发觉但又不可或缺的一部分。从这个角度来讲，Apple Watch 确实就是一个「大手环」。褪去浮华的包装，真正能留住人的，不仅仅是生态本身，更是生态所带来的人文关怀。Apple Watch 提供了 Apple 一直致力于提供的完整的辅助功能体验，尽管这对于我来说起不到什么作用。真正让我关心的，是将我上面所述的那些褪去「功能」的外皮后所剩下的灵魂。这种灵魂体现在每一次 Apple Watch 提醒我起来活动，体现在每一次 Nike Run Club 在我跑完步后都让不一样的人用不一样的话语传递相同的鼓励，也体现在「健康」应用内的种种提醒与设置，这在近年来频频出现的 Apple Watch 以各种方式拯救生命的新闻中已经被展现得淋漓尽致。</p><p>这才是 Wear OS 乃至一众 Android 阵营的智能穿戴设备缺少的东西。市面上的很多产品都在模仿 Apple Watch，可皮毛的模仿不足以体现出公司产品灵魂所向，尤其是如果这个公司还既 996 又 251。这种人文关怀同样体现在了 Apple 这么多年积攒的广告中。每年的贺岁档广告，从《老唱片》、《三分钟》到《一个桶》、《女儿》，说白了都是在做营销，但它能给人在别家广告中找不到的感动。这是我不喜欢 Apple 的一些产品，不喜欢 Apple 高昂的定价，却对这家公司颇有好感的原因。</p><p>说到这里，我仍然看好 Wear OS 的发展。其原因我已无从知晓，也许就是一个 Google 出品，一个 Android base，一个开放生态，或者只是一个按下表冠后环形展开应用列表的流畅动画（Xiaomi’s Apple Watch clone 出来挨打）以及种种类似的细节……甚至听起来就十分不可靠的「回忆」，初次使用智能手表时的 bittersweet。其实挺奇妙的，这种理由居然也能成为选择某一平台 / 系统的驱动力。但它就这样发生了。因此，我不会停止，也从未停止期盼。</p><h2 id="或许就此止步"><a href="#或许就此止步" class="headerlink" title="或许就此止步"></a>或许就此止步</h2><p>写着写着，一篇本来应该像前文一样的总结，变成了一个老叔叔（迫真）的自言自语。如果你还想问我是否推荐，我只能说不推荐。小米手环 5 NFC 版是性价比更更更高的选择。但如果你需要一块智能手表并且恰好拥有 iPhone…除了 Apple Watch，还有什么更好的选择吗？</p><p>感谢你阅读到这里。</p><p>Rachel</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;建议改成：一个男生背叛了 7 天 Android…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;不管「背叛了 Android」是不是实话，「背叛了 Android 阵营的智能可穿戴设备」是真的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文约 4100 字，阅读约需 10 分钟。作者使用的设备为 Apple Watch Series 4 | 40 mm | GPS 版，搭载 watchOS 6.2.8。本文很长，全程无图，还请包涵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;几个月以前，我还是个傻傻地以为自己对 Android 的忠诚就像对外语系的忠诚一样牢不可破的毛头小子。后来，因为种种因素，我的志愿几乎全填了工科系，还入手了 iPhone 8 用国产软件大呼真香（参见前文），现在，就连一直渴望拥有的 Galaxy Watch / Wear OS 设备，都被我换成了 Apple Watch Series 4。&lt;/p&gt;
&lt;p&gt;网上关于 Apple Watch 的文章很多很多，但 Apple Watch 给不同的人带来的感受，自然会因经历不同、使用场景不同等原因而不尽相同。这是我，一个 Android 开发者&amp;amp;爱好者、Windows 用户，直到半个月前都从来没有亲自接触过 Apple 生态的人，在初步接触并依赖其生态（尤其是深度使用智能可穿戴设备）后所写下的感悟。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://blog.stfw.info/tags/iOS/"/>
    
    <category term="Apple Watch" scheme="https://blog.stfw.info/tags/Apple-Watch/"/>
    
    <category term="Android" scheme="https://blog.stfw.info/tags/Android/"/>
    
    <category term="Google" scheme="https://blog.stfw.info/tags/Google/"/>
    
    <category term="Wear OS" scheme="https://blog.stfw.info/tags/Wear-OS/"/>
    
    <category term="智能穿戴" scheme="https://blog.stfw.info/tags/%E6%99%BA%E8%83%BD%E7%A9%BF%E6%88%B4/"/>
    
  </entry>
  
  <entry>
    <title>当我从 Android 迁移到 iOS</title>
    <link href="https://blog.stfw.info/articles/on-migrating-from-android-to-ios/"/>
    <id>https://blog.stfw.info/articles/on-migrating-from-android-to-ios/</id>
    <published>2020-07-31T02:05:17.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个 Android 折腾爱好者与 <del>已经没脾气了的</del> 谷粉，对我而言，iOS 曾经是最「不黑不快」的系统，它由内而外的封闭以及 Apple 的孤傲与开放、先进、自由的 Android 形成鲜明对比。然而，随着时间的推移以及 Apple 的不断努力，iOS 确实在进步，变得越来越用户友好，再加上近年 Google 的作风和隔壁 Apple 越来越像（通过 GMS 和残缺 AOSP 控制手机厂商、逐步缩紧用户可折腾的空间），我也终于在某宝购入了一台 iPhone 8 作为自己的<ruby><rb>备用</rb><rt><del>主力</del></rt></ruby>机。这篇文章将向各位阐述我使用 iOS 这几天内感受到的系统间的鸿沟，以及自身的一些看法与感悟，希望对各位有所帮助。</p><blockquote><p>本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。<br>本文中 Android 以 Google Pixel 搭载的 Android 10 及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态/跨平台联动。</p></blockquote><h2 id="为什么是-iOS-？"><a href="#为什么是-iOS-？" class="headerlink" title="为什么是 iOS ？"></a>为什么是 iOS ？</h2><span id="more"></span><p>Android 对国产应用的压制出了名的糟糕，国产应用的自造生态带来加大功耗、频繁唤醒等等问题的同时，其对权限的滥用却至今找不到比较好的解决办法。近年来 Google 和国家部门一直在努力，但收效甚微。同时，国产软件在 Android 端的优化堪忧，有时好不容易推了终于流畅的新版本，下个版本的垃圾代码又让整个应用「一朝回到解放前」。</p><p>此外，我是个比较严重的系统洁癖，主力机用着 <code>出国魔法</code> 享受着 Google 生态带来的便利的同时，一直希望能将国产应用彻底隔离。Island 虽然能够创造一个独立的工作用户，但终究无法避免国产应用到处拉屎，而 iOS 却能彻底让国产应用的屎不被看见，也能使其更服从系统所给出的规范。</p><h2 id="对-iOS-评价如何？"><a href="#对-iOS-评价如何？" class="headerlink" title="对 iOS 评价如何？"></a>对 iOS 评价如何？</h2><p>国产应用用着太爽了。另外还是看下文吧。</p><p>非要太长不看版的话，iOS 很难满足老 Android 用户对手机的一些基础性需求。从 <strong>返回键</strong> 到 <strong>强大而全面的通知管理</strong> 再到 <strong>勿扰模式</strong> 等等等等（详见下文），如果你重度依赖依赖这些中的任何一个，不要来 iOS。但如果你愿意接受一些功能的缺失来换取 <strong>原彩显示</strong> 、 <strong>全局夜间模式</strong> 或是包含国产软件优化在内的等等 iOS 有但 Android 完全没有或很难满足的功能，那也没有更好的选择。</p><h2 id="具体呢？"><a href="#具体呢？" class="headerlink" title="具体呢？"></a>具体呢？</h2><p>下文将分为两部分细细讲解我所遇到的 iOS 与 Android 的差异。「软件」部分为第三方应用能够以较低成本完美解决的问题，其内容也更大程度上与我的偏好应用有关，「系统」部分则相反。开始之前，我们再回顾一遍文前语。</p><blockquote><p>本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。<br>本文中 Android 以 Google Pixel 预载系统及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态/跨平台联动。</p></blockquote><h3 id="系统优势"><a href="#系统优势" class="headerlink" title="系统优势"></a>系统优势</h3><table><thead><tr><th align="center">粗列</th><th>细数</th></tr></thead><tbody><tr><td align="center">国产软件优化</td><td>这是让我选择 iOS 的最大原因，无须多言。</td></tr><tr><td align="center">原彩显示</td><td>最让人大呼「真香」的还是原彩显示。影响色准，但在暖色光环境中（比如餐馆），与其拿出一台惨白甚至泛蓝的 Android 机，还是自动变成暖色的 iPhone 看着舒服。</td></tr><tr><td align="center">权限管理</td><td>和 Android 上那坨不断优化却总还是屎的屎比起来，iOS 的权限管理值得夸奖的是 Android 缺乏的可使用网络控制。其它的方面倒也感知不强。</td></tr><tr><td align="center">Taptic Engine</td><td>爽啊，可惜系统输入法用不到。系统输入法很烂反倒成了一个值得庆幸的点，它让我毫不犹豫地投入了讯飞输入法的怀抱，享受着打字震动的舒适。</td></tr><tr><td align="center">夜间模式</td><td>0202 年居然还有系统不能无缝自动过渡到夜间模式，还有大批应用不能随系统切换？？？我讲完了。</td></tr><tr><td align="center">生物识别</td><td>Android 乱七八糟的授权、五花八门的生物识别支持和千奇百怪的硬件在 iOS 上干干净净，大家都用一个规范，没人嚷嚷不安全。不需要 Riru / Xposed 就能指纹支付，真好。</td></tr><tr><td align="center">付款</td><td>我希望我能设定一次付款方式然后全世界通用，而不是每次在一个新应用付款就得登陆一次 PayPal 或者录入一次银行卡，或者更脏地跳转到隔壁蓝绿钱包。</td></tr><tr><td align="center">可选应用语言</td><td>当我发现 iOS 居然可以针对应用改变语言时，Android 铁粉流下了热泪。对我而言，日常用英语，要给人看手机时临时给几个应用换中文，在 iOS 无比方便。</td></tr><tr><td align="center">快速设置面板</td><td>对，就是以前 Android 通知栏的设置面板点击 Wi-Fi 名字会展开的那个东西，Google 将其扔掉而 Apple 把它放进了 iOS。整体效果还不错。</td></tr><tr><td align="center">延迟</td><td>「音游杀手」先不说，即使是硬件和优化顶尖的 Pixel 、Galaxy S，延迟和 iPhone 比起来仍然有差异*。这是 Android 的问题，不是堆料加钱能轻易解决的，长久以来也从未被重视，不然也没那么多人买 iPad 玩音游。除此之外，K 歌时的实时耳返，也是 Android 用户永远的痛。</td></tr><tr><td align="center">续航</td><td>1800 mAh 的 iPhone 8 比 4000 mAh 的 1+7T Pro 用的时间长（7T Pro 使用时长不到 iP8 三分之一）、用的电少，尽管硬件方面差别很大，但我不相信 iOS 在续航上比起 Android 没优势。</td></tr><tr><td align="center">系统细节</td><td>整体上来看 iOS 打磨得还是很用心，抬手亮屏放下熄屏（Google 进来挨打），动画顺畅，大部分情况下操作符合直觉，值得夸奖。</td></tr></tbody></table><h3 id="系统劣势"><a href="#系统劣势" class="headerlink" title="系统劣势"></a>系统劣势</h3><table><thead><tr><th>粗列</th><th>细数</th></tr></thead><tbody><tr><td>通知管理</td><td>稀烂。Android 的通知类别设计真的令人舒适。iOS 上我要关通知只能全关，不能只关闭「杂项」或者「群组通知」。就算这个按下不表，连重要通知打断勿扰这种关键功能都不存在…告辞。</td></tr><tr><td>未读通知提醒</td><td>iP 8 解锁很快，没注意通知中心就能回到锁屏前应用，状态栏没有任何异样，过十几分钟关了上个应用才发现桌面上有红点，好评，孩子很满意。</td></tr><tr><td>勿扰模式</td><td>稀烂。这个和通知管理同源，又和下文的设置项呼应。Android 上极其细致的设置让我能够放心地将勿扰模式一直开着而不担心漏掉任何我需要的东西，但 iOS 信息和通知都不能区分开…告辞。</td></tr><tr><td>设置项</td><td>简洁做过头了叫简陋。我不觉得只有我一个人不喜欢千禧年风格的拨号盘按键音，也不觉得只有我一个人认为自动旋转控制应该能轻松被找到，等等。这个太杂太乱但烂得不明显所以和整体散发着「不行」的勿扰模式分开了。</td></tr><tr><td>设置层级</td><td>Android 上设置分类和应用设置独立真的是很好的 practice。至少我不用翻来翻去找本来应该在「连接」（姑且这么叫吧）部分的 AirDrop，不用惊讶地发现「个人热点」居然又是子菜单又是主菜单，更不用在系统设置里找某个应用的设置。</td></tr><tr><td>返回层级</td><td>我不太理解 iOS 上对「返回」的实现，有时我要右滑，有时我要下滑，有时我要点击一个看起来是让我下滑的地方，有时我右滑然后整个页面在下滑或缩小，有时我只能点那个小箭头或「取消」……？？？</td></tr><tr><td>动画</td><td>「成也萧何，败也萧何。」这是返回层级混乱的扩充与延伸。视觉效果的优异尽管会让人觉得很「流畅」，但也引入了逻辑混乱、动画拖沓这些无法避免的问题，最典型的例子是打字时「不跟手」「输入慢」。有时我更需要一台指哪打哪的设备，而不是不管我干啥，总得耐心等动画结束的憨批。</td></tr><tr><td>分屏</td><td>屏幕小，但「我可以不用，你不能没有」，这都什么年头了，一边水群一边看测评，或是一边看网页一边记灵感，真的这么难吗？</td></tr><tr><td>推送</td><td>大一统的推送服务香吗？香。香的同时也带来了一些问题，比如消息虽然被推送了但并不会预载，点击跳转后还要过一段较长的时间才能让我看到通知对应的消息，有很强的割裂感，FCM 也会有但在我使用的应用中并没有这么夸张，就…见仁见智吧。</td></tr><tr><td>输入框</td><td>对，这是最大的槽点，iOS 「自作聪明」地将单行输入框设定为只能定位到单词，别说 Android 的光标放大了，连自由定位都没有提供，尽管输入法处 3D Touch 用习惯了也不能说不能用，但不能「所按即所得」同样让人「膈应」。</td></tr><tr><td>双击亮屏</td><td>我说完了。</td></tr><tr><td>系统封闭</td><td>想用旧版本？不行。想挂 SSH？不行。想连 Linux ？准备折腾吧。想本地装 Linux 就像 Termux？想 peach。</td></tr><tr><td>应用商店付款</td><td>比起 Play Store，App Store 不能在购买时选择付款方式无疑为自己减了分。一旦设置默认付款方式就无法在应用内购买时临时更换，如果有需要还得换到另一个应用改，至少我觉得挺麻烦的。</td></tr><tr><td>应用商店退款</td><td>两小时内即刻生效的后悔药是 Play Store 最让人舒适的地方。</td></tr><tr><td>旋转屏幕</td><td>难道还有旋转屏幕的方案比 Android 上设备一旋转就自动蹦出的小按钮更加方便吗？</td></tr><tr><td>快速选择内容</td><td>Pixel 上多任务页面中，可以直接长按选中一些在应用内不支持选择的文本（使用 OCR）的那个功能，虽然看起来很鸡肋，但是从一些地方复制几次链接就能感受到这功能的方便了。</td></tr></tbody></table><h3 id="软件优势"><a href="#软件优势" class="headerlink" title="软件优势"></a>软件优势</h3><table><thead><tr><th>粗列</th><th>细数</th></tr></thead><tbody><tr><td>Apple Pay</td><td>得益于系统深度整合及 Apple 自身的号召力，Apple Pay 出门刷卡、乘坐公共交通都超级方便。但为什么又是「软件」呢？因为 Android 和更多小店都支持蓝绿钱包。</td></tr><tr><td>九折？</td><td>就这。</td></tr></tbody></table><h3 id="软件劣势"><a href="#软件劣势" class="headerlink" title="软件劣势"></a>软件劣势</h3><table><thead><tr><th>粗列</th><th>细数</th></tr></thead><tbody><tr><td>输入法</td><td>我在 Android 上选择能下滑输入符号、提供「选择文本」面板、纠错和词库极其智能…的 Google 拼音。目前还没在 iOS 端发现 alternative，那个 Gboard 屑得让人嗦不出话，讯飞堪用，但也只是堪用而已，习惯国产输入法的话应该会好适应一点。</td></tr><tr><td>自带应用</td><td>「拨号键盘」应该是个本质功能吧，但为什么又和其他功能同级而且还放在右边？「页面内查找」应该用得挺频繁的吧，但为什么非要我在地址栏键入内容才能在页面内搜索，而且还如此难以察觉？</td></tr><tr><td>愿望单</td><td>穷孩子：我能不能把想等打折的应用加进愿望单然后等打折？App Store: No.</td></tr></tbody></table><hr><p>写到这里回望全文，其实更像是个人记录，从头到尾都是自说自话，甚至看起来是在为 iOS 挑刺。Android 当然也有自己糟糕的地方，但可能是出于长期的使用，我个人已经很难注意到一些细节部分的提升，但对细节部分的不足甚至缺失却十分敏感。两个系统没有孰优孰劣，我只是站在一个 Android 用户和多年老粉的角度，尽最大努力描述一种「culture shock」。</p><p>上面列举了很多让我个人不习惯的地方，可 iOS 真有这么不堪吗？当然不是，否则其受欢迎程度实在是让人难以理解。我也会持续使用并适应 iOS ，也许在一些问题随着习惯改变而解决的同时，另一些问题又会浮出水面。无论如何，欢迎在下方讨论，更欢迎提出不同观点。感谢你能认真地读到现在。</p><hr><p>*：数据来自 <a href="https://superpowered.com/latency">Superpowered</a> 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个 Android 折腾爱好者与 &lt;del&gt;已经没脾气了的&lt;/del&gt; 谷粉，对我而言，iOS 曾经是最「不黑不快」的系统，它由内而外的封闭以及 Apple 的孤傲与开放、先进、自由的 Android 形成鲜明对比。然而，随着时间的推移以及 Apple 的不断努力，iOS 确实在进步，变得越来越用户友好，再加上近年 Google 的作风和隔壁 Apple 越来越像（通过 GMS 和残缺 AOSP 控制手机厂商、逐步缩紧用户可折腾的空间），我也终于在某宝购入了一台 iPhone 8 作为自己的&lt;ruby&gt;&lt;rb&gt;备用&lt;/rb&gt;&lt;rt&gt;&lt;del&gt;主力&lt;/del&gt;&lt;/rt&gt;&lt;/ruby&gt;机。这篇文章将向各位阐述我使用 iOS 这几天内感受到的系统间的鸿沟，以及自身的一些看法与感悟，希望对各位有所帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。&lt;br&gt;本文中 Android 以 Google Pixel 搭载的 Android 10 及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态/跨平台联动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么是-iOS-？&quot;&gt;&lt;a href=&quot;#为什么是-iOS-？&quot; class=&quot;headerlink&quot; title=&quot;为什么是 iOS ？&quot;&gt;&lt;/a&gt;为什么是 iOS ？&lt;/h2&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://blog.stfw.info/tags/iOS/"/>
    
    <category term="Android" scheme="https://blog.stfw.info/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>写给初烧的 HiFi 耳机系统入烧指北</title>
    <link href="https://blog.stfw.info/articles/new-to-hufi-cookbook/"/>
    <id>https://blog.stfw.info/articles/new-to-hufi-cookbook/</id>
    <published>2020-02-03T12:10:42.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY?"></a>WHY?</h2><h3 id="为什么要入烧"><a href="#为什么要入烧" class="headerlink" title="为什么要入烧"></a>为什么要入烧</h3><p>很简单——为了满足自己的耳朵对音乐的要求。不同品牌不同价位不同风格的设备，给人的感觉完全不一样。初烧，意即初次涉猎发烧，是对 HiFi （高保真）的初次追求，或者说，是对满足自己耳朵的声音的初次追求 <del>（毕竟 HuFi）</del> 。不需要一直<ruby><rb>深入</rb><rt><del>烧钱</del></rt></ruby>，即便浅尝辄止，入手一套适合自己日用、能够给自己带来享受的音频设备，应该也是相当重要的一件事。鉴于初烧预算、便携度等限制，本文仅探讨耳机系统，不会涉及到更好更 HiFi 也更贵更玄学的音箱系统。</p><h3 id="为什么要写这篇文章"><a href="#为什么要写这篇文章" class="headerlink" title="为什么要写这篇文章"></a>为什么要写这篇文章</h3><p>音频设备一般符合「一分钱一分货」定律（当然超出其使用价值的话也会有「一块钱两分货十块钱三分货」的操作），对于初烧而言尤其如此。这篇文章旨在通过容易理解的语言，帮助各位避开可能存在的坑，以使把钱花在刀刃上。</p><p><del>事实上是看到身边太多人买智商税实在忍不下去决定干脆写篇文章代替一个一个解释半天</del></p><span id="more"></span><h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW?"></a>HOW?</h2><h3 id="了解基础知识"><a href="#了解基础知识" class="headerlink" title="了解基础知识"></a>了解基础知识</h3><p>众所周知，HiFi 行业鱼龙混杂，价格也好、描述也好，争议往往是一波又平，一波又起。这其中，私以为可以分为两派：一派以老烧为首，强调以感知参数作为主要指标来评判耳机；另一派以声学工程师为首，强调以客观数据作为主要指标来评判耳机。尽管在一些地方，这两派撕得水深火热，不停地否定对方提出的一些观点、结论，但事实上谁也离不开谁。类似于声场、解析度、耳机素质、空气感这样的感知参数，属于容易听出来、也最容易被注意到的部分，是普通人评价任意一款耳机不可避免的用语，而事实上这些感知参数的形成，又与客观数据，例如音色、频响曲线、动态范围等，密不可分。而且，感知参数派在评价耳机时也会涉及部分声学术语，客观数据派也必须依赖于主观听感才能够给出最终的耳机评价。</p><p>综上，对于新入坑的小白，推荐从耳机大家坛新手入门区的这两篇帖子开始：</p><blockquote><p><a href="http://www.erji.net/forum.php?mod=viewthread&tid=1742106">耳机入门–写给耳机初级发烧友（新手常见的七大误区）</a><br><a href="http://www.erji.net/forum.php?mod=viewthread&tid=82690">基础知识汇总</a></p></blockquote><p>虽然这两篇帖子年久失修，但毕竟都是一些难以随时间而改变的知识（可能即使全世界音频巨头同时发话要重新定义一些概念，短时间内习惯都不会彻底改变，何况这种情况并不会发生），也要感谢这两篇帖子，让本文成为可能。</p><p>而同时， <del>家境平韩的</del> 声学工程师大佬「鬼斧神工119」（知乎、B 站、微信公众号都能找到），从心理声学角度论述了一些描述音质的参数在客观数据上的反映，可以参见：</p><blockquote><p><a href="https://www.zhihu.com/people/dai-yu-xiao-72">鬼斧神工119 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/31392770">用科学的方式解释和破除HiFi中的一些所谓的玄学。 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/48449952">什么是音质？哪些因素影响音质？怎样提升耳机和音箱系统的音质？ - 知乎</a><br>太多了根本选不过来</p></blockquote><p>不需要把相关资料全部都读完（这方面的文章、书籍等太多了根本读不完），这个也不会出现在任何一年的高考所以不必太深入，只需要了解概念及其定义，确保不会指鹿为马也不会被轻易误导即可。两派都有值得借鉴的东西，相信哪些，不相信哪些，都是个人的选择。</p><h3 id="分清主次"><a href="#分清主次" class="headerlink" title="分清主次"></a>分清主次</h3><p>音频设备基本满足水桶效应，即任何一个环节出现短板都会影响最终的结果。对非短板的提升仍然能够提升整体素质，但对短板的加强是整体提升最快的方式。从声音的产生到其被传递到耳朵，大概会经过如下途径：</p><p><strong>歌手、录音设备→媒介（流媒体、 CD 等）→数模转换、信号放大→线材→耳机发声单元→共振→耳朵</strong></p><p>通常，第一环节（歌手、录音设备）不会有太大问题（要这里出丢人问题还开什么公司），最后环节（耳朵）也不会有太大问题（除非你的耳朵严重老化），因而我们需要尽力优化的就是从媒介到耳机的环节。</p><p>媒介，或称音源，主要以 320 kbps 编码的 MP3 格式出现，无损格式近年也变得触手可及。音源对声音的影响，远远不及后面二者。主观听感上，聆听流行乐时 320 kbps 与无损区别不大（可通过 ABX 测试验证）。不过，在有损压缩为 MP3 的过程中，确实有可能损失一部分人耳可感知的细节。因此，如果对音质有所追求，无损格式必不可少。</p><p>数模转换、信号放大属于播放器与耳放的问题。初烧阶段接触到的播放器与耳放，除非实在钱多得没地方花，仍然是一个很重要的影响声音的因素。失真不低、底噪极高等等缺陷，仍然不可忽视。不过当预算向上走，到达 2 字头四位数或更高，比起继续优化播放器，在耳机上做文章更值得考虑。</p><p>因为耳机负责了声音的产生与传导，决定了最终声音的频响与失真，是对整个系统影响最大的部件，往往也是需要花钱的环节。看看那些层出不穷的单元、分频、封装 <del>、溢价</del> ……就算你不曾发烧肯定也没少听说。而线材对信号传导的影响极其微小，以至于可以忽略不计，所以请千万不要在线材上投入过多，只要不存在过量的损坏导致失真就行。</p><p>共振同样不可忽视，包括耳套和佩戴方式。举个例子，当你把耳机用力向耳朵里摁（尤其是平头塞），可以相当明显地察觉到某个频段或整体的声音有所改变。因此，尽管耳机自带的原厂耳套一定是最能贴合这个耳机的设计的，但为了耳朵能听到更好的声音，也可以考虑更换记忆海绵套、三节套，或是像山灵这种原厂提供的不同调音风格的硅胶套。并且，也请务必确保耳机佩戴到位。这不是玄学，这是物理学。</p><p><strong>TL;DR: 对于可以花钱的环节，花钱优先级为：耳机&gt;播放器&gt;耳套&gt;耳放&gt;&gt;&gt;线材</strong> ，其中耳放可根据耳机和播放器调整优先级，不过初烧阶段有个像样的播放器用来推动耳机就够了。</p><h3 id="量力而行"><a href="#量力而行" class="headerlink" title="量力而行"></a>量力而行</h3><p>这才是最重要的点。不管你是学生还是刚步入职场的年轻人，是富豪还是生活在普通的白领家庭，在谈到发烧时，都不得不注意量力而行。</p><p>对 HiFi 感兴趣却未曾接触过除了手机附赠和低端价位的耳机的人，认为自己的耳朵不行、听不出音质区别可能很正常（至少本人是听周围想花钱入烧又把钱败到了别的地方的好些人这么说），不过当你实际试听一款拿得出手的音频系统时，就会发现其实多花这几百上千元挺值得的，可以感受到和百元塞相比质的提升（耳朵确实不好的人当我没说）。</p><p>那么为什么又要「量力而行」呢？很简单，因为你的耳朵终究有上限。￥99 到 ￥999 如果称为一个飞跃，那么 ￥999 到 ￥9999 的提升，大概有一半以上是溢价。拜物教让许多「老烧」盲目追求或许并不起眼的「提升」，这本身不可批判，毕竟人家赚的钱人家爱怎么用怎么用，但如果你读到了这里，我个人而言<strong>相当不建议</strong>你走向这个极端。￥9999 与其在音频设备上打水漂，不如分一半去三亚旅游（够七日了），或者去给喜欢的人买施华洛世奇。<strong>毕竟，追求音乐带给人的快乐，而非对比不同耳机有什么连声学仪器都难以检测的差异，才是发烧的根本意义。</strong></p><p><strong>单反穷三代， HiFi 毁一生。</strong></p><hr><blockquote><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/75482749">人耳的听觉极限 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/77437991">HiFi 系统的木桶效应与选购策略 - 知乎</a><br><a href="https://www.bilibili.com/video/av84349781">零差别测试简介 - Bilibili</a><br><a href="https://zhuanlan.zhihu.com/p/61491668">入耳式耳机耳套终极对比测评</a></p></blockquote><blockquote><p>延伸阅读：<br>（这里原来想去耳机大家坛找点推荐，不过转了一圈都不太满意…还是读鬼斧神工大佬的客观数据来得靠谱）<br><a href="https://www.zhihu.com/question/26914296/answer/883384313">有哪些便宜但音质特别好的耳机推荐？ - 鬼斧神工119的回答 - 知乎</a><br><a href="https://www.zhihu.com/lives/1046574455110823936">入坑耳机别走弯路：耳机入门详解 - 知乎 Live</a><br><a href="https://www.zhihu.com/lives/1108382018655789056">耳机发烧少走弯路！耳机选购指南 - 知乎 Live</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;WHY&quot;&gt;&lt;a href=&quot;#WHY&quot; class=&quot;headerlink&quot; title=&quot;WHY?&quot;&gt;&lt;/a&gt;WHY?&lt;/h2&gt;&lt;h3 id=&quot;为什么要入烧&quot;&gt;&lt;a href=&quot;#为什么要入烧&quot; class=&quot;headerlink&quot; title=&quot;为什么要入烧&quot;&gt;&lt;/a&gt;为什么要入烧&lt;/h3&gt;&lt;p&gt;很简单——为了满足自己的耳朵对音乐的要求。不同品牌不同价位不同风格的设备，给人的感觉完全不一样。初烧，意即初次涉猎发烧，是对 HiFi （高保真）的初次追求，或者说，是对满足自己耳朵的声音的初次追求 &lt;del&gt;（毕竟 HuFi）&lt;/del&gt; 。不需要一直&lt;ruby&gt;&lt;rb&gt;深入&lt;/rb&gt;&lt;rt&gt;&lt;del&gt;烧钱&lt;/del&gt;&lt;/rt&gt;&lt;/ruby&gt;，即便浅尝辄止，入手一套适合自己日用、能够给自己带来享受的音频设备，应该也是相当重要的一件事。鉴于初烧预算、便携度等限制，本文仅探讨耳机系统，不会涉及到更好更 HiFi 也更贵更玄学的音箱系统。&lt;/p&gt;
&lt;h3 id=&quot;为什么要写这篇文章&quot;&gt;&lt;a href=&quot;#为什么要写这篇文章&quot; class=&quot;headerlink&quot; title=&quot;为什么要写这篇文章&quot;&gt;&lt;/a&gt;为什么要写这篇文章&lt;/h3&gt;&lt;p&gt;音频设备一般符合「一分钱一分货」定律（当然超出其使用价值的话也会有「一块钱两分货十块钱三分货」的操作），对于初烧而言尤其如此。这篇文章旨在通过容易理解的语言，帮助各位避开可能存在的坑，以使把钱花在刀刃上。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;事实上是看到身边太多人买智商税实在忍不下去决定干脆写篇文章代替一个一个解释半天&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="HiFi" scheme="https://blog.stfw.info/tags/HiFi/"/>
    
  </entry>
  
  <entry>
    <title>Dating While Dying [译]</title>
    <link href="https://blog.stfw.info/articles/dying-while-dating/"/>
    <id>https://blog.stfw.info/articles/dying-while-dating/</id>
    <published>2020-01-01T14:39:44.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。</p></blockquote><blockquote><p>本文来自纽约时报，原文作者 Josie Rubio ，文章源地址： <a href="https://www.nytimes.com/2019/08/24/opinion/sunday/dating-while-dying.html">Opinion | Dating While Dying - The New York Times</a> 。译文对原文部分句子语序略有修正，以符合中文需要。鉴于原标题在表意上的无可替代性，将其保留不译。</p></blockquote><p>某个晚上，当我和一个朋友去酒吧与我在约会软件上认识的人见面时，她问：“你对这些人都说了什么？”我打开资料页，把手机递给了她。</p><p>“我身患癌症，所以如果你想约我出去逛，马上行动！”第一行这么写道。</p><p>“很不错嘛。”她笑了笑说。</p><span id="more"></span><p>一年前，当治疗收效不佳而我日渐病重时，陪伴我 12 年的男友去伦敦出了趟差，在那儿他与一个老朋友，最近分手的普拉提教练，“重建联系”。那之后他为自己定了去欧洲的单人旅程，我偶然听到他说他坐在她摩托车的后座上骑车转悠，抓着她臀部的时候有多么有趣。他也说他很享受一个人走走而不用思考癌症的感觉。显然，还有我。</p><p>就这样了。我们的关系到此为止。我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。</p><p>我的癌症没有离开。它被当慢性病对待。我肯定会死于它了，如果我没被公交车撞上的话。（为什么人们总是把那当作死于癌症的替代品？“你可不知道！”他们欢快地说，“你也可能明天被公交车撞上！”）医生们用治疗、注射和输血为我买来时间与健康。我还能健康几个月，如果幸运的话。但总体上，很可能没多少时间了。</p><p>事实上，我已准备好死去而非再去约会。从一些人对我所说看来，作为一个 40 多岁的单身妇女，我可能也<em>已经</em>死了。</p><p>分手后，我拒绝去约会。我知道病情恶化前我只会有有限的时间与我关心的人在一起了。为什么我还会想去见陌生人？然而，朋友们推着我去。有时就是字面意思。在哥本哈根的 Octoberfest 上，我拜访的朋友将我带入一群身着皮裤醉醺醺地唱着跳着 Time Of My Life 的丹麦人时声明：“你不能让你最后的经历如此糟糕。”</p><p>回家后，我的决心弱化了。某天晚上，我在音乐会上看到了前任和他离开我去追求的那个女人。我不觉得伤心或嫉妒，只是很轻松，是她而非我在吧台上放下信用卡为他的酒水买单。是时候迈出脚步了。</p><p>一个朋友帮我注册了约会软件。另一个朋友——乐意做我约会软件向导[1]的那个人——帮我搞定了资料页与照片。“这个人有张与 Bill Murray 一起的照片。”我第一次轻滑时注意到。“Tinder 上全是 Bill Murray 的照片。”我朋友睿智地说。</p><p>自我六年前确诊癌症起，我已有泵入静脉的毒物，插入脖子的管道，被移除的器官，施在身上的放射纹身。我剃了好几次头。我咳出过小块食道。医生们给我做了腰椎穿刺，还以一根针固定了我的骨髓。但以约会为名见一个陌生人还是让我心中充满恐惧。“我宁愿去做骨髓活组织检查。”我在赴约十多年来的第一次约会前这么和我朋友聊道。</p><p>但我去了。还不错。有趣，事实上。所以我摆脱不了，又约了几次。</p><p>在某次美妙的约会后，我认识到一个惨重的事实：我只能提供现在，无法提供有希望的未来。“你不知道。”一个朋友和我说。</p><p>“因为我明天可能就被公交车撞上？”我以虚弱的微笑回应道。一个月内，我鼻青脸肿，弄缺颗牙，擦破膝盖。那天早上，我差点走下路缘，闯入一辆驶来的面包车的路。淋浴时滑倒而死的可能性看起来正在排挤癌症。</p><p>“不，”她回答，“因为你可能 90 岁时还在和我抱怨约会的事。”</p><p>随着一切推进，我会定下一些约会规则，然后打破它们。我为自己付账，因为换别人来付感觉交易性太重。此外，为我<em>与</em>前任付了数年账后，这看起来仍像个好主意。首次约会时我通常不吃东西，因为那场面会很丑陋。</p><p>然后，在一次见面饮后，某人要求我与他共进晚餐，坚持付钱。在我像个中世纪国王般狼吞虎咽掉一块鸭胸时，我告诉他，我不吃小羊，因为它们很可爱，不吃章鱼，因为它们很聪明，但吃鸭子就没事，因为我读到它们可能是恋尸癖者。“如果你想想，”我对裹着大豆蜂蜜汁的熏鸭动叉子时说，“被吃掉是它们死后会发生的<em>第二</em>糟糕的事。”</p><p>我很擅长约会对话。癌症？恋尸癖？话题随便挑。</p><p>一个癌症晚期的人能在约会应用上做什么？我想，我与所有人想要的一样。我想要一个一起度过时光的人。他会告诉我我很好看。只是这都只为短多了的一段时间。病情再度严重时，我也不期待任何人陪着我。我的上一段关系让我感觉像个负担。事实上，他与我在一起相当幸运。我现在知道了。</p><p>我也曾（现在仍）害怕取得进展并伤害别人。那感觉很自私。但若我喜欢某人，我全情投入。人们可能会认为这是因为癌症，但我向来如此，从 1992 年 7 月 4 日我 14 岁时的第一次约会，从树木覆盖的林间空地上我坐在第一任男友的四轮车上，看着附近 SeaWorld 的焰火起。</p><p>我必须回家，但不想带回初吻。我们在流星下许过愿后，我就有了所需的引子。“你知道我这一年一直想做什么吗？”我说，提及自从他穿着 Guns ’n’ Roses 的 T 恤走进我九年级新生第一天的英语课时我就萌芽的迷恋。</p><p>“什么？”他问。</p><p>“吻你。”我说。然后我们在焰火下亲吻。</p><p>当某人最近发消息了解我们下次约会时我想做什么时，我回答：“我希望这不算太快，但我想做一件事，就是在除了下着雨的街角外的某地吻你。”显然，我还是那个 14 岁的我。</p><p>癌症给我留下伤疤，放射纹身和 Mediport ，但那次糟糕的关系给我留下了我有时无法看到的疤。我道歉太多，比如这次我把约会的纸巾打下了桌。“没问题，”他疑惑地看着我说，“我不会冲你大喊大叫。”我意识到我在等他责备我，就像前任会做的那样。</p><p>那个让我打破一些规矩的男人让我粉碎更多。我在他的坚持下勉强而糟糕地起舞，却全程笑着度过。我越过餐厅的桌子，与他十指相扣。我在公共场合从他那偷走亲吻。有时我都不认识我自己了。</p><p> 我很开心，也很难过。</p><p>死亡不是个抽象概念。我一周一周，一刻一刻地活着。我活得充实，但我向来如此。在新的治疗后，有时我甚至可以不考虑癌症地走走。我同意我前任的观点：这感觉不错。1992 年的第一场约会以来，我就想找个人，感受我生命的一部分安定下来。但从 28 岁到 40 岁，我也仅是停留。说到这儿。</p><p>当我前任在分开那天吻别我时，我想：“这会是最后一次有男人吻我了。”</p><p>一些事弄错终究还不错。</p><hr><p>[1] 原文为 Sherpa ，夏尔巴人，经常作为登山向导。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文来自纽约时报，原文作者 Josie Rubio ，文章源地址： &lt;a href=&quot;https://www.nytimes.com/2019/08/24/opinion/sunday/dating-while-dying.html&quot;&gt;Opinion | Dating While Dying - The New York Times&lt;/a&gt; 。译文对原文部分句子语序略有修正，以符合中文需要。鉴于原标题在表意上的无可替代性，将其保留不译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;某个晚上，当我和一个朋友去酒吧与我在约会软件上认识的人见面时，她问：“你对这些人都说了什么？”我打开资料页，把手机递给了她。&lt;/p&gt;
&lt;p&gt;“我身患癌症，所以如果你想约我出去逛，马上行动！”第一行这么写道。&lt;/p&gt;
&lt;p&gt;“很不错嘛。”她笑了笑说。&lt;/p&gt;</summary>
    
    
    
    
    <category term="译文" scheme="https://blog.stfw.info/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>9102 的年度总结，献给陪伴至今的各位</title>
    <link href="https://blog.stfw.info/articles/2019-2020/"/>
    <id>https://blog.stfw.info/articles/2019-2020/</id>
    <published>2019-12-31T12:45:09.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>春去秋来，一年将逝，一年伊始。</p><p>Rachel 高中生涯最后的 150 天，即将揭开序幕。</p><p>过去的一年，由于种种因素影响，最终没能好好地陪伴各位。社交也好，社团也好，忙于日常的自己占据了大部分时间，另一个作为极客、开发者的 Rachel ，露面则越来越少。</p><p>将来的一年，期待着随着 NCEE 的结束以及自用一大堆设备的更新换代，能与各位分享更多。</p><p>不管如何，今年的年度总结 ，想与各位分享生活中的 Rachel 。</p><span id="more"></span><h3 id="年度单曲：《夏代孝明-プラネタリウムの真実》（天象仪的真相）"><a href="#年度单曲：《夏代孝明-プラネタリウムの真実》（天象仪的真相）" class="headerlink" title="年度单曲：《夏代孝明 - プラネタリウムの真実》（天象仪的真相）"></a>年度单曲：《夏代孝明 - プラネタリウムの真実》（天象仪的真相）</h3><p><a href="http://music.163.com/m/song?id=1347638431"><img src="https://s.mxmcdn.net/images-storage/albums4/7/2/2/9/4/7/41749227_800_800.jpg" alt="Gänger (Album art)" style="zoom: 25%;" /></a></p><blockquote><p>专辑封面来自 Musixmatch ，点击可跳转至网易云</p></blockquote><p>思考了很久，最终还是选定了这首《天象仪的真相》。夏代孝明的声音很暖，很能打动人心。这首歌本身素质也特别高，尤其是词，连续几个月霸占了咱日历上为数不多的空白位置。</p><p>可那些都很难成为这首歌占据这个位置的理由。从《久远寺有珠》，到《心拍数#0822》，这些歌都很出彩，会喜欢它们的人也远多于《天象仪的真相》，一度让 Rachel 难以抉择。</p><p>事实上，《天象仪的真相》给 Rachel 带来了一种难以言喻的熟悉与陪伴感。不知道是谁曾给过 Rachel 这样的感觉，但一听到夏代孝明的声音，就仿佛那个人一直在身边。有时耳机里播着这首歌，躺在床上回忆自己的一天，也会想到，这样活下去，或许也挺好。</p><p>希望你也能想起某个能给你力量的人。</p><blockquote><p>天象仪描绘出的未来</p><p>微不足道的天体与感情</p><p>与今晚 2 时的天体一同歌唱吧</p><p>不需要什么理由</p><p>我在你的身边</p><p>想要描绘出那样的日子呢</p><p>每一分每一秒</p></blockquote><h3 id="年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你-｡i-i｡-】》"><a href="#年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你-｡i-i｡-】》" class="headerlink" title="年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你(｡ì _ í｡)】》"></a>年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你(｡ì _ í｡)】》</h3><p><a href="https://www.bilibili.com/video/av19740421"><img src="https://img.vim-cn.com/6c/d2cb87e3b1964d2d338ce41db4d0387ef3a2b6.png" alt="Cover" style="zoom: 25%;" /></a></p><blockquote><p>视频封面来自哔哩哔哩，点击可跳转至原视频</p></blockquote><p>与《天象仪的真相》不同，选出这个几乎是不假思索。在最孤独最无助最无法支撑自己见到明天的那些夜晚，当夕阳的余晖隔着迎风起舞的露露和一层屏幕照耀着 Rachel，脸上不知何时就已泛起微笑。</p><p>这个视频已经被 Rachel 安利过给无数人无数次了。从 8102 的某个下午开始，它一直是 Rachel 的小宝藏。希望大家也能在露露的舞中找到力量。</p><p>明天也要努力活下去啊。</p><blockquote><p>尽管胆怯 不过现在的话能说出口呢</p><p>将地球最后的 告白</p></blockquote><h3 id="年度游戏：《魔法使いの夜》（魔法使之夜）"><a href="#年度游戏：《魔法使いの夜》（魔法使之夜）" class="headerlink" title="年度游戏：《魔法使いの夜》（魔法使之夜）"></a>年度游戏：《魔法使いの夜》（魔法使之夜）</h3><img src="https://img.vim-cn.com/eb/0deaf301c3d924438b851a6d099acef2a5a2c1.png" alt="Screenshot" style="zoom: 50%;" /><blockquote><p>CG 截图，来自 Rachel 的 Twitter</p></blockquote><p>又一个不假思索选出来的项。Rachel 一直以为自己对 Gal 不会感兴趣，先前玩过的也从没有耐心推完，直到今年摸到了 2012 发售的《魔法使之夜》。作为补全型月世界观的必做功课，型月四花旦中仅靠一款作品就能得到一席之地的《魔法使之夜》具备着其特有的魅力。无论是穿插着非正常因素的同居物语和「不愧是蘑菇」的人物与世界观，还是众主创跳票数年换来的、甚至连动画都不一定能做到的视觉小说体验，《魔法使之夜》在未来，可能只能被其续作超越了。</p><p>所以蘑菇到底什么时候出《月姬 R》和《魔夜 2》啊！</p><p>你们给 FGO 氪的每一单就是《月姬 R》和《魔夜 2》坟头上的一把土啊！</p><p><del>型月发售《魔 2》日，家祭无忘告乃翁</del></p><blockquote><p>那是一句咒语。<br>包含着她那些复杂想法的诀别。</p><p>那是能够倒回某人的幸福时光的，青色的魔法之声。</p></blockquote><h3 id="年度电影：《Fate-stay-night-Heaven’s-Feel-Ⅱ-lost-butterfly》（命运之夜——天之杯II-：迷失之蝶）"><a href="#年度电影：《Fate-stay-night-Heaven’s-Feel-Ⅱ-lost-butterfly》（命运之夜——天之杯II-：迷失之蝶）" class="headerlink" title="年度电影：《Fate/stay night [Heaven’s Feel] Ⅱ.lost butterfly》（命运之夜——天之杯II ：迷失之蝶）"></a>年度电影：《Fate/stay night [Heaven’s Feel] Ⅱ.lost butterfly》（命运之夜——天之杯II ：迷失之蝶）</h3><img src="https://img.vim-cn.com/2b/3cc1e443eeed8e2a6e45773c5f36dd8202003f.png" alt="Poster" style="zoom: 25%;" /><blockquote><p>正式海报来自豆瓣</p></blockquote><p>《天气之子》和《复仇者联盟 4》都差点抢走这个位置，也都给 Rachel 留下了深刻的印象。然鹅，与《魔法使之夜》同源的《迷失之蝶》，是 Rachel 今年看得最爽的一部电影，也代表了 Ufotable 最高的制作水准。 </p><p>还需要过多解释吗？明年 NCEE 之后《春之歌》也差不多该在国内上映了，我 ** 看爆！</p><h3 id="年度感谢：陪伴至今的各位"><a href="#年度感谢：陪伴至今的各位" class="headerlink" title="年度感谢：陪伴至今的各位"></a>年度感谢：陪伴至今的各位</h3><p>从开始码字开始，不知不觉已经过了好几个小时了。打磨来打磨去，总也打磨不出一个能让自己满意的结果。还想分享的东西太多太多，比如 HiFi ，比如英语，比如模联，但限于本文的布局，要插入些什么实在太难。</p><p>2019 走了，崭新的 2020 即将来临。未来很长，感谢各位一路陪 Rachel 走来，也希望各位能一直陪 Rachel 走下去。那时各位面前的 Rachel ，一定也会和从前，也和这篇文章一样，自顾自地说个不停吧。新的一年，还请各位多多包涵。</p><blockquote><p>本文所用全部影像资料之著作权均归属于原作者，以非盈利方式使用。若对著作权有异议，请及时通知 Rachel 以予删除。你可以在 <a href="https://me.stfw.info/">这里</a> 找到联系方式，或直接 <a href="mailto:291054446@qq.com">发函</a> 。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;春去秋来，一年将逝，一年伊始。&lt;/p&gt;
&lt;p&gt;Rachel 高中生涯最后的 150 天，即将揭开序幕。&lt;/p&gt;
&lt;p&gt;过去的一年，由于种种因素影响，最终没能好好地陪伴各位。社交也好，社团也好，忙于日常的自己占据了大部分时间，另一个作为极客、开发者的 Rachel ，露面则越来越少。&lt;/p&gt;
&lt;p&gt;将来的一年，期待着随着 NCEE 的结束以及自用一大堆设备的更新换代，能与各位分享更多。&lt;/p&gt;
&lt;p&gt;不管如何，今年的年度总结 ，想与各位分享生活中的 Rachel 。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我与模联这两年</title>
    <link href="https://blog.stfw.info/articles/two-years-with-mun/"/>
    <id>https://blog.stfw.info/articles/two-years-with-mun/</id>
    <published>2019-05-19T07:56:10.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文长约 5300 字，全程无图，阅读约需 10 分钟，请放心食用。</p></blockquote><h3 id="急促呼吸，怦然相遇"><a href="#急促呼吸，怦然相遇" class="headerlink" title="急促呼吸，怦然相遇"></a>急促呼吸，怦然相遇</h3><p>一天晚上，地球，浮现在了少年的眼前。他试图逃离，可终究敌不过那引力——「模拟联合国」五个大字，从此刻在了少年的心里。下方人才需求中标注的「技术爱好者」，让少年下定决心进入邵东一中模拟联合国，当时学校内唯一一个设置独立技术部门的社团。</p><span id="more"></span><p>这个少年是我。就是这样一个萍水相逢般的意外，让我与模联相遇。耗费了班上最后一张空白的招新表，我一路过关斩将，在公关总监学姐面前面对英文组的学术题瑟瑟发抖，最终如愿以偿地看到自己的名字出现在新社员名单中的技术部下。</p><p>直到此时，我尚未了解，何谓模联。</p><h3 id="如鱼跃入水中"><a href="#如鱼跃入水中" class="headerlink" title="如鱼跃入水中"></a>如鱼跃入水中</h3><p>培新会上，以出色的文件写作功底及身为俄新社记者反怼俄罗斯代表的勇气，拿下「最具潜力 MPC 」后，我与模联慢慢地被绑在了一起。</p><p>身兼技术人员与选手的双重身份，在第二届「校园说」辩论赛初赛中博得全场喝彩名列第三的我，与正方三位队友一起，用近一个月的时间共同为决赛而努力。尽管惜败反方，也没有拿到正方的「最佳辩手」，但最难能可贵的是收获了来自正方和反方的友谊。合影的那一瞬间，无论是正方、反方还是全体工作人员，脸上都带着发自内心的笑容。</p><p>不久，一个奶油色的日子来了。</p><p>17 岁生日这种东西，每个人生命中应该都会有一次，但是有一群朋友以及后辈陪着的，就很难找到第二个了。我们的秘书长就是这么一个幸运的人。那一天，每一个参与聚会的人在离开中伟楼前坪时，都至少带走了一块奶油。我们忍受着胃里翻江倒海看完了一部《烟花》，目睹了神仙抓娃娃一发入魂，还坐在德克士互相接受真心话的连番拷问，才恋恋不舍地结束这一个下午和半个晚上。</p><p>我们这些在连番拷问中不怀好意的人，最后都进了第一学期的 <del>秘书长小本本</del> 优秀社员名单。自己的期末总结在大会上被拿出来摘录要点的过程相当奇妙，尤其是自己瞎鼓捣的 <a href="https://sdyzmun.club/">官网</a> 正式宣布的那一刻。</p><p>一个学期的终结，是另一场出征的开始。而这场出征，目标寒假市会。</p><p>这次市会，我们的成绩并不理想。法国——我是内政与权力下放部副部长——代表团的三人来自同班，关系本就相当要好，与外交流很少，导致后期法国几乎完全被孤立。再加上我的写作速度过慢，直到休会前一刻才上交决议草案（DR），排在第三，自然也就几乎不可能被投票。不管怎样，会议中我的每一次发言都能恰到好处地推动会议进程（除非是因为同时排在一个发言名单的末尾以及主发言名单的下一顺位），DR 也是三份中条件最合理、格式最规范（自认）的，这就足够让我满足。</p><p>会议结束了，法国团的三个人从此被连在了一起，也在未来撑起了我校模联的半壁江山，不过那是后话了。</p><p>在寒假结束前至开学后不久，首版明信片制作完毕。我们为了拍出足够好的一中照片，差点打开定时让手机从家属楼顶楼做斜抛运动。几天过去了，我们拿出了一套独一无二的明信片，并于发售之时几近售罄。</p><p>最后我们拍的照片没有一张做进了明信片就是了。</p><h3 id="血管里流淌着彩虹色的傲气"><a href="#血管里流淌着彩虹色的傲气" class="headerlink" title="血管里流淌着彩虹色的傲气"></a>血管里流淌着彩虹色的傲气</h3><p>寒假市会后，还有一件事不得不提：我们开始为五一会议选拔学团成员了。寒假市会两天的疲累，使我相当一段长时间，甚至到高二都存在一种不负责，而因为这种不负责，我一开始并不乐意参与学团选拔，希望未来能够只操心自己的技术部。但我鬼使神差地，效仿在场的大部分人将自己的名字加入到了竞争者名单中，从此便注定再也无法从学术中脱身。</p><p>寒假的最后几天，一群不知「会场设计」为何物的萌新，于几个小时内赶制完成了一堆半成品会设。最终，其中的三份被选入本届大会学团，其中就有我。当时的我还并非主席团指导（DH），只是一个普普通通的主席团成员（DM），会议的议题也并非出自我手。不久，我的「LGBT+ 群体人权问题」就被重投票为议题，我也担起了被推给我的 DH 的责任，这才确定了我的位置。</p><p>另一件事，关于我心心念念的技术，此时发生。学校成立了所谓「兴趣小组」，来为学校的荣誉聚集人才、参与竞赛。这本来并非坏事，但它也就不偏不倚地撞上我的底线。我反感学校对兴趣的利用、对学生的欺诈，以筹备五一会议为理由，不顾学校对我「国家级奖项」的评估，要求退出。为了留住我而抛出的「解散模联」的威胁使我更加愤怒，甚至对学校反向威胁，明确表达自己不参与的态度，才成功脱身。</p><p>我，也终于能够静下心来，好好地为这一复杂的人权议题做学术储备。</p><p>五一来得很快，走得也很快。我第一次认识到自己的潜力，第一次以 DH 的身份领导学团，也第一次将自己的学术能力大幅提升。彼时我从未参与过省会，与外校学团成员的第一次相遇，也就发生在这一略显平淡的日子。由于身体原因，我一整个下午都感觉很困很恶心，这磨掉了我的精力，使我不得不到一旁休息。好在有秘书长以及代表对会议进程的推动，我们顺利地完成了一天的议程，并且通过了一份写得不错的 DR 。</p><p>这次五一会议结束后，我对学术的排斥加剧，不愿再参与会议，直到这种感觉连同我的不负责，在高二过半时一起消失。</p><p>高二前的组委换届中，学姐将一份双刃剑般的邀请递给了我——作为公关总监，继续活跃于模联。我为这责任所怖惧，为新的可能而兴奋，为经验缺乏感到担忧，却毫不犹豫地选择接受，勇往直前。</p><h3 id="兵马未动，粮草先行"><a href="#兵马未动，粮草先行" class="headerlink" title="兵马未动，粮草先行"></a>兵马未动，粮草先行</h3><p>啪嗒。</p><p>是把备用机摔到地上的声音。</p><p>一位刚上任不久的公关总监，刚从主力机字库烧毁的绝望以及一夜不休的技术文献及 B 站动态的沐浴中清醒，差点瘫倒在暑假市会的会场后排。</p><p>此时，我也第一次意识到带队的痛苦。</p><p>好在第二天，新任副秘与老秘书长赶赴邵阳，陪着我度过了一个值得纪念的下午。晚些时候，我认识了邵阳一些与我一样的模联同道，也见到了很多熟人，他们将在未来扭转我的生活轨迹。老秘书长最后一次的管理与事务安排（和点评），则埋下了一颗定时炸弹。</p><p>在高三暑假的这几天中，新任组委还与再上任公关总监学长一起，共同挑战北京大学的学术能力测试。北大不愧是北大，即使舆论评价变差，面对英文委的题目我还是照样束手无策，无从下笔。</p><p>开学前，我们组委成员聚在一起，准备提前开始宣传，为招新造势。这个时候的我，仍旧没有担负起可担可不担的责任，参与了 <del>沙雕</del> 招新视频的拍摄，却未插手剪辑。再加上拍摄时素材的混乱，我们的努力付诸东流。同样也是因为这种对责任的逃避，宣传海报制作过程十分艰辛。辗转数人之手、历经数次改动后，我们才拿出成品。</p><p>最后，这种对责任的逃避，引爆了那颗炸弹。</p><h3 id="希望于撕毁的绝望中涅槃"><a href="#希望于撕毁的绝望中涅槃" class="headerlink" title="希望于撕毁的绝望中涅槃"></a>希望于撕毁的绝望中涅槃</h3><p>高二第一个学期，各社团招新准备紧锣密鼓地进行。学弟学妹们进入了我们的接待群，提前了解何谓模联。据说此间，老秘书长的行为已存在越界。因为语言的传递导致的语气变化，不但这种「越界」恼人，我对老秘书长的印象也渐渐变成自负，不满开始累积。尽管现实或许并非如此，面对面交流的缺失也让我无法发现。一件小事使接待群中的学长学姐未经告知便被清理出群，这则是上一届组委对我们的不满。</p><p>这个学期，由于学校开学工作拖得过长，留给社团的招新时间很短，到班宣传都被取消，报名完全依赖对社团的第一印象。这一操作下来，很多潜在人才就此流失。尽管我们确实吸纳了许多有能力有决心也足够好的人，对于人才流失也只能惋惜。</p><p>期中前，我们举行了培新会。从头到尾唯一未与老秘书长直接交流的我，怨气在「听说」又一次「指点」后爆发。我不负责地罢会而去，选择在远处观望，直至上午过了一半才在学姐的劝说下回到会场。这是一场彻头彻尾的闹剧，但我们得到机会解决问题，将一切不满与不解全部展开。虽然中文委没有通过一份 DR ，会议失败，筹划这次会议的人却得以将部分无法再拖的问题解决。</p><p>我的一切，才走上正轨。</p><h3 id="它是我赖以生存的呼吸"><a href="#它是我赖以生存的呼吸" class="headerlink" title="它是我赖以生存的呼吸"></a>它是我赖以生存的呼吸</h3><p>没有参与社团活动的一个学期，过得出奇地快。高中生活的一半，就这样匆匆逝去。而我，也能够好好准备省会的维也纳会议。</p><p>学期末，省会背景文件 deadline 前，因为此前未在大型会议中担任过学团成员，我近乎忘我地投入到了学术中。最严重的时候，甚至午休时做梦，梦见的都是对我写作内容的反复修改。</p><p>两天的市会之旅，时间不长，过得很充实。与未曾谋面或是仅有一面之交的同道再次见面，一开始有点生疏，很快交流就变得密切。技术上协助解决问题的同时，我还在学术上为我校代表尝试搜寻生僻的资料。这两天，对我影响最大的，还是 DR 之夜。晚上 9 点，送别了另一位模联同道连同欢乐的几个小时，领队团在最里面的房间就问题和计划长谈。我回到房间，继续与同房代表投入到学术之中后不久，一通电话打了过来。</p><p>就在刚刚的房间中，我走后，响起了诡异的敲门声，以及与我甚是相像的笑声。然后，是死一般的寂静。对女生而言，这种状况引起的恐慌，足以让我尽力安抚，直至与会务总监聊到很晚。</p><p>事件结束直到入睡之前的学术时间中，我反复重放了去年的记忆。我似乎终于明白，领队，并非需要瞻前顾后管东管西，而是需要提供一种安全感，一种犹如父爱一般坚定的安全感。我还记得一年前， DH 深夜旅馆探班指导，外加楼下住着学长，我便有这种安全感。我开始明白，我或许并不需要多么全知全能，高一的各位也不需要我全知全能。作为领队，最重要的是能够临危不惧。即使所有人都无比慌乱，总还需要一个人能够冷静地观察事态。对于这群孩子，那个人必须也只能是我。</p><p>这次市会以后，模联对我的重要性逐渐提升。我开始觉得，这种基于学术与社团的友谊，值得我尽力维护。高二一年白驹过隙，看着高一逐渐成熟，我能感觉到自己剩余的时间不多。这种即将失去的迫切感，使我越发重视模联。</p><p>过了个年，省会就来了。在雅礼度过的四天，我与我们的代表们共同成长。我们经历了难忘的学术、难忘的议程、难忘的 DR 之夜，以及难忘的 <del>甩节操</del> 特殊活动（SE）和闭幕式（和坏耶最佳 CP 奖）。这次省会，我感受到了模联的魅力，也意识到了我所剩时间之短暂。这是我高中正式参与的最后一次模联会议，与部分代表一样，我亦有别愁，亦有希冀。纵使会前会中都比较累，我不后悔参与这次省会。我与来自全省各地的优秀人才建立了联系，与邵阳模联的各位增进友谊，更深入地了解了新一届模联人的能力，并与他们愈加亲近。</p><p>也正是在每天与组委、学团成员，尤其是同样来自邵阳地区的各位的相处中，我将模联融入进了我的日常生活，将模联放在首位。我原有的不负责，此时被一种用剩余时间发光发热的使命感取代，这种使命感让我扛起了所剩时间中社团管理的任务。</p><p>我还有一个地方放不下：邵阳市区，我所在市的中心。说来惭愧，我从未了解过市区。除了邵东，对九县三区的其余地域一无所知。开学前某天，补完课后，以拿省会落下的耳机为契机，我得以跑去邵阳，一个人在邵阳的街头流浪，在友阿的商铺间徘徊，将自己与这宝庆古城融为一体。与邵阳模联同道的相遇，更为这天增添了色彩。从半年前暑假市会萌芽的独游邵阳的愿望得到满足，连带着有人为伴的愉悦与逝者如斯的忧愁。</p><p>开学后，生活还是照常进行。会务中心、技术中心甚至公关中心三部门联动，完成了一套新的明信片。官网的 <a href="https://blog.sdyzmun.club/">博客</a> 也正式上线，用以发布学术文章及公告。</p><p>如一年以前，我们举行了一次选拔，敲定了五一会议的学团，却不像一年以前一波三折。会议准备顺利，虽然并非完美。我投入了许多精力，挖空自己两年的学术素养来指导学团以及代表，以使会议更加完善。尽管存在 BG 初稿毫无格式、代表不知有作业等等问题， SE 结束后，学团和组委成员坐在餐桌上时，留下的就只有对这一天的眷恋，以及对这届高一未来的希望。</p><p>因为工作狂的态度，我经常在说完、做完后对自己的言语、做法后悔，对自己是否已经当好了一个公关总监产生疑问。我询问了前辈，也曾向好友倾诉，却仍在自认为做错什么后深深自责。这种情况，直到临近换届，才得到缓解。</p><p>时间过得真的很快，我的模联生涯，就这样即将告一段落。</p><h3 id="明日，又隔天涯"><a href="#明日，又隔天涯" class="headerlink" title="明日，又隔天涯"></a>明日，又隔天涯</h3><p>我最近一直相当乐意与高一的孩子待在一起。要说原因，我想，大概是因为他们身上充满着的朝气与活力，让我看到了一年前的我自己，让我有一种错觉，似乎我还能生活在模联。</p><p>但事实上，每个部门都在确定换届人选，进行工作交接。</p><p>我，估计是那个最不舍的。</p><p>我亲眼看着他们走过这一年，看着他们从不谙世事，逐渐懂得何谓能力，何谓责任。</p><p>我以自己的能力撑起了本不该由我撑起的责任，换来的是在离别时加倍的难过。</p><p>我还想以代表的身份参一次会，去感受模联的蓬勃生机。</p><p>也许是我过于感伤了。我只是进入高三，暂时告别社团生活而已。我随时都可以回来探望，我也相信在我培养出来的人才的领导下，我们邵东一中模拟联合国协会，定将继续蓬勃发展。</p><p>最后，请允许我以蔡琴的一首 <a href="http://music.163.com/m/song?id=211277">《渡口》</a> ，于此道别。</p><blockquote><p>让我与你握别</p><p>再轻轻抽出我的手</p><p>是那样万般无奈的凝视</p><p>渡口旁找不到</p><p>一朵相送的花</p><p>就把祝福别在襟上吧</p><p>而明日 明日 又隔天涯</p></blockquote><h3 id="当繁华落尽"><a href="#当繁华落尽" class="headerlink" title="当繁华落尽"></a>当繁华落尽</h3><p>我在高二的最后一个月，如实地以当事人的角度记录下我经历的一切，力图还原我看到的事件全貌，聊以慰藉。未来还有很长，我将记忆封存，相信这样便可安心踏上新的旅程。</p><p>我们法国团三人，最后成为了秘书长、公关总监和会务总监，并且关系依旧很好，本文写成前一天还一起在图书馆自习。</p><p>与我关系不错的同道与我也保持着联系，和开始一样，能够抛出各种玩笑，不为伤及关系而担忧。</p><p>如果你是新任组委成员，请接过我的坚守，稍作休整后再次上路。我只能以一句「加油」寄予，而你终有一天会明白我字里行间的意义。</p><p>如果你曾与我并肩，无论是否是模联人，无论现在在邵阳、长沙还是全国各地，我相信我们的友谊断续后会愈发坚固，我们总有一天会相聚。</p><p>如果你来自 Telegram 或 Twitter ， Rachel 与你们永远同行。</p><p>如果你与我素昧平生，感谢你能够用这么长的时间阅读一个陌生人。</p><p>谨以此文纪念我不朽的两年守望。</p><hr><p>我所参与过的会议：</p><table><thead><tr><th align="center">会议</th><th align="center">委员会</th><th align="center">议题</th><th align="center">席位</th><th align="center">正式奖项</th></tr></thead><tbody><tr><td align="center">2017 邵东一中模联培新会</td><td align="center">主新闻中心</td><td align="center">阿以冲突的缓和与解决</td><td align="center">俄罗斯新闻社</td><td align="center">最具潜力 MPC</td></tr><tr><td align="center">2018 寒假邵阳市会</td><td align="center">欧盟部长级会议</td><td align="center">欧洲难民问题</td><td align="center">法国内政与权力下放部副部长</td><td align="center">无</td></tr><tr><td align="center">第三届五一会议</td><td align="center">联合国大会第三委员会</td><td align="center">LGBT+ 群体人权问题</td><td align="center">主席团指导</td><td align="center">无</td></tr><tr><td align="center">2018 邵东一中模联培新会</td><td align="center">联合国安全理事会</td><td align="center">阿以冲突的缓和与解决</td><td align="center">主席团成员</td><td align="center">无</td></tr><tr><td align="center">2019 湖南省会</td><td align="center">特殊委员会</td><td align="center">1814-1815 维也纳会议</td><td align="center">主席团成员</td><td align="center">无</td></tr><tr><td align="center">第四届五一会议</td><td align="center">联合国环境规划署</td><td align="center">全球气候变暖问题</td><td align="center">学术总监</td><td align="center">无</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文长约 5300 字，全程无图，阅读约需 10 分钟，请放心食用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;急促呼吸，怦然相遇&quot;&gt;&lt;a href=&quot;#急促呼吸，怦然相遇&quot; class=&quot;headerlink&quot; title=&quot;急促呼吸，怦然相遇&quot;&gt;&lt;/a&gt;急促呼吸，怦然相遇&lt;/h3&gt;&lt;p&gt;一天晚上，地球，浮现在了少年的眼前。他试图逃离，可终究敌不过那引力——「模拟联合国」五个大字，从此刻在了少年的心里。下方人才需求中标注的「技术爱好者」，让少年下定决心进入邵东一中模拟联合国，当时学校内唯一一个设置独立技术部门的社团。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="回忆" scheme="https://blog.stfw.info/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>用 Travis CI 配合 Hexo ，快速入门持续集成</title>
    <link href="https://blog.stfw.info/articles/from-hexo-to-ci/"/>
    <id>https://blog.stfw.info/articles/from-hexo-to-ci/</id>
    <published>2019-04-04T16:43:09.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>此前，我们曾在 <a href="https://blog.stfw.info/hexo-completely-tutorial/">这篇文章</a> 中探讨过使用 Hexo 和 Git 实现 VPS 上博客更新的方法，而对于搭建在 GitHub Pages 上的博客，尤其是各位正在阅读的文章所属的、将源代码丢在 GitHub 上的，每次都手动先 <code>deploy</code> 到 <code>gh-pages</code> 再把程序 <code>push</code> 上去……各位感觉如何咱不知道，但是咱肯定坚持不下去，这肯定不是什么省心省力的好办法。</p><p>好在，「持续集成 (Continuous Integration) 」给了我们一个可行性相当高的方法。点一下，玩一年，开源项目不收一分钱的 <a href="https://travis-ci.org/">Travis CI</a> （下称 “Travis” ），因其方便性与高可扩展性，自然就成为了我们的首选。当然，本文所提只是 CI 相当浅显的一种用法， Travis 与 GitHub 结合还能够实现自动发布新的 snapshot 、集成多个项目一起进行编译测试等等操作，只要能本地完成的工作几乎都可以交给 Travis 。</p><span id="more"></span><blockquote><p>对于已经在使用 Travis 的开源项目转为私有或是想在私有项目中使用 Travis 的用户，其也提供了 <a href="https://travis-ci.com/">付费版</a> 。</p></blockquote><h3 id="0x00-注册-Travis"><a href="#0x00-注册-Travis" class="headerlink" title="0x00 注册 Travis"></a>0x00 注册 Travis</h3><p>Travis 的注册十分简单，只需要使用 GitHub 帐号登入即可，在此不多赘述。</p><h3 id="0x01-部署"><a href="#0x01-部署" class="headerlink" title="0x01 部署"></a>0x01 部署</h3><p>为了开始在 repo 中使用 Travis ，我们首先需要在 Travis 的后台启用目标 repo 。随后，  Travis 将开始监听这个 repo 的所有新 commit 。但这还不够，如果我们不使用一个默认放在其根目录下，名为 <code>.travis.yml</code> 的配置文件对编译过程进行控制，那么即使收到了 commit 也不会 trigger 这个 commit 的 build job 。幸运的是， <code>.travis.yml</code> 非常简单易懂好配置，以下给出了来自本博客的一个示范：</p><pre><code class="yaml">language: node_jsnode_js: &quot;node&quot;cache: npmbranches:  except:  - devbefore_script:  - npm install -g hexo  - npm installscript:  - hexo g  - mkdir ./public-git  - cd ./public-git  - git init  - git config --global push.default matching  - git config --global user.email &quot;$&#123;GitHubEMail&#125;&quot;  - git config --global user.name &quot;$&#123;GitHubUser&#125;&quot;  - git remote add origin https://$&#123;GitHubKEY&#125;@github.com/$&#123;GitHubUser&#125;/Rachel-s-Blog.git  - git pull origin gh-pages  - rm -rf ./*  - cp -rf ../public/* ./  - git stage --all .  - git commit -m &quot;Travis CI Auto Builder&quot;  - git push --quiet --force origin HEAD:gh-pages</code></pre><p>不难看出，除开前面一部分对环境的定义，后面几乎都是各位熟得不能再熟的 shell 脚本，而与真正的 shell 脚本不同的一点，就只有执行的地方位于 Travis 的服务器，而不是本机。</p><blockquote><p>这个说法不算对。 Travis 还对脚本的运行时间等等做了一大堆限制，但是这篇文章内所谈到的内容几乎不可能触及这些限制。只要不是想在 Travis 的服务器上搭一个梯子，想必要被 Travis 强行关 build job 的情况应该还是很少见的。</p></blockquote><p><del>考虑到各位已具备的相当基础，本文写到这里大可搁笔，大家再见（才不是 Rachel 懒了 哼唧）。</del></p><p>刚刚是什么东西在咕咕？总之，既然要定制自己的编译流程，就请各位继续向下阅读。</p><h3 id="0x02-配置"><a href="#0x02-配置" class="headerlink" title="0x02 配置"></a>0x02 配置</h3><p>我们回到刚刚给出的，本博客的 <code>.travis.yml</code> 。</p><pre><code class="yaml">language: node_jsnode_js: &quot;node&quot;cache: npm...</code></pre><p>这几句定义了 build job 需要的环境。既然我们使用的是 Hexo ，那么自然就是 Node.js 。第二行是 Node.js 使用的版本，如果是 <code>node</code> ，编译过程将在最新的稳定版 Node.js 环境上执行。如果有特殊需求，可以将 <code>node</code> 修改为可被 <code>nvm</code> 安装的目标版本号。如果目标版本无法被安装，那么 build job 将被终止并且报错。 <a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">文档原文</a> ：</p><blockquote><p>If you need more specific control of Node.js versions in your build, use any version installable by <code>nvm</code>. If your <code>.travis.yml</code> contains a version of Node.js that <code>nvm</code> cannot install, such as <code>0.4</code>, the job errors immediately.</p></blockquote><p>如果有其它语言的需求，也可以查阅 <a href="https://docs.travis-ci.com/user/languages/">官方文档</a> 。没有的话， Travis 也提供了 <a href="https://docs.travis-ci.com/user/languages/community-supported-languages/">添加语言</a> 的入口，可以选择自己为这门语言提供支持。</p><pre><code class="yaml">...branches:  except:  - dev...</code></pre><p>我们不需要 trigger Travis 的 branch ，就在这里被列了出来。通常如果没有频繁对主题等大修大改，这一段大可以删除。为了方便折腾，可以像这样添加一个 <code>dev</code> branch ，防止乱七八糟的临时改动参与 <code>master</code> 的编译。默认情况下 <code>gh-pages</code> 会自动算进去，如果需要加入编译，或者将黑名单改为只编译一部分 branch 的白名单，将 <code>except</code> 改成 <code>only</code> 即可。</p><pre><code class="yaml">...before_script:  - npm install -g hexoscript:  - hexo g  - mkdir ./public-git  - cd ./public-git  - git init  - git config --global push.default matching  - git config --global user.email &quot;$&#123;GitHubEmail&#125;&quot;  - git config --global user.name &quot;$&#123;GitHubUser&#125;&quot;  - git remote add origin https://$&#123;GitHubKEY&#125;@github.com/$&#123;GitHubUser&#125;/Rachel-s-Blog.git  - git pull origin gh-pages  - rm -rf ./*  - cp -rf ../public/* ./  - git stage --all .  - git commit -m &quot;Travis CI Auto Builder&quot;  - git push --quiet --force origin HEAD:gh-pages</code></pre><p>就像一些卡牌游戏一个回合分很多个阶段一样， build job 也有很多个编译阶段，称为它的「生命周期 (job lifecycle) 」。一个生命周期分为 <code>install</code> 和 <code>script</code> 两个阶段，前者用来搭建环境，后者用来执行任务。同样地，这两个阶段前后（除了 <code>install</code> 后，那等价于 <code>script</code> 前）均可以手动执行一些任务。这些任务都是一个一个 shell 脚本。具体的编译流程，参见生命周期的 <a href="https://docs.travis-ci.com/user/job-lifecycle/">官方文档</a> 。 <code>before_script</code> 中不需要添加 <code>npm install</code> ，因为那已经在 <code>install</code> 中被执行。本博客的部署与 <code>script</code> 中的命令有关。</p><p>首先， Hexo 被调用以生成所有的静态文件。然后，我们新建了一个文件夹，在这个文件夹中把 remote origin 源设置为了本博客的对应网址，将文件全部扒下来再删掉以确保 <code>git</code> 正常运行。最后， Hexo generate 的文件被复制进来，并被 push 到 <code>gh-pages</code> 。这样，一次完整的更新就完成了。</p><p>正如各位所见， Travis 支持环境变量的设置，并且可以选择在输出日志中隐藏（因为 Travis 的编译日志是可以随便看的）以确保安全。若要设置环境变量，直接到 Travis 里的 repo 首页，在设置页面里输入即可。</p><p>而为了方便 Travis 这类自动任务、防止密码被泄露， GitHub 提供了 personal access tokens 用来授权，每个 token 都能独立控制所能访问的内容，在 GitHub 账户设置里的 developer settings 可以找到。</p><h3 id="0x03-然后…"><a href="#0x03-然后…" class="headerlink" title="0x03 然后…"></a>0x03 然后…</h3><p>马上运行：</p><pre><code class="shell">git stage .git commitgit push</code></pre><p>并打开 Travis repo 页，看着 Travis 完成这一切吧！</p><blockquote><p>其实对于部署到 GitHub Pages ， Travis 也提供了一种简便的方法：通过 Travis 内置的 deploy 实现。 <a href="https://docs.travis-ci.com/user/deployment/pages/">官方文档</a> 中对其进行了描述，同样需要使用 personal access token 。虽然那样很方便，但是毕竟还是不能做到手写 <code>git</code> 命令这样高的可控性。如果各位对 Travis 足够放心，或者对各位记忆 push 步骤没信心，那么 Travis 提供的方案无疑是理想选择。</p></blockquote><hr><p><strong>EoF.</strong></p><h4 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h4><ol><li><a href="https://blog.nfz.moe/archives/hexo-auto-deploy-with-travis-ci.html">https://blog.nfz.moe/archives/hexo-auto-deploy-with-travis-ci.html</a></li><li><a href="https://docs.travis-ci.com/">https://docs.travis-ci.com</a></li><li><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;此前，我们曾在 &lt;a href=&quot;https://blog.stfw.info/hexo-completely-tutorial/&quot;&gt;这篇文章&lt;/a&gt; 中探讨过使用 Hexo 和 Git 实现 VPS 上博客更新的方法，而对于搭建在 GitHub Pages 上的博客，尤其是各位正在阅读的文章所属的、将源代码丢在 GitHub 上的，每次都手动先 &lt;code&gt;deploy&lt;/code&gt; 到 &lt;code&gt;gh-pages&lt;/code&gt; 再把程序 &lt;code&gt;push&lt;/code&gt; 上去……各位感觉如何咱不知道，但是咱肯定坚持不下去，这肯定不是什么省心省力的好办法。&lt;/p&gt;
&lt;p&gt;好在，「持续集成 (Continuous Integration) 」给了我们一个可行性相当高的方法。点一下，玩一年，开源项目不收一分钱的 &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; （下称 “Travis” ），因其方便性与高可扩展性，自然就成为了我们的首选。当然，本文所提只是 CI 相当浅显的一种用法， Travis 与 GitHub 结合还能够实现自动发布新的 snapshot 、集成多个项目一起进行编译测试等等操作，只要能本地完成的工作几乎都可以交给 Travis 。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://blog.stfw.info/tags/Hexo/"/>
    
    <category term="Travis" scheme="https://blog.stfw.info/tags/Travis/"/>
    
    <category term="持续集成" scheme="https://blog.stfw.info/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>2018 ，这是 Rachel 的年度总结</title>
    <link href="https://blog.stfw.info/articles/2018-2019/"/>
    <id>https://blog.stfw.info/articles/2018-2019/</id>
    <published>2018-12-31T16:00:01.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，又是一年过去了。这一年中，Rachel 失去了很多，但收获了更多。</p><p>Rachel 以为自己能够得到一种寄托，伸出手，却依然遥不可及；</p><p>Rachel 将过往放下，沉住气，也许有更多美好。</p><span id="more"></span><p>Rachel 几乎没有碰 Android 开发也没有写博客，Ubuntu 也没有正常用过，但是仍然在一直进步，一直完善自己；</p><p>Rachel 在日常文理两爆炸的学业压迫之下，每晚都有写一点东西，文笔也越来越文艺，或许将来有机会分享给各位；</p><p>Rachel 还弄坏了两台手机，一台是服役很久的 Galaxy Note 3 (hltechn) ，一台是到手不久的 Essential Phone PH-1 (mata)  <del>，今年也算是满足了</del> ；</p><p>Rachel 终于能在夜深人静的晚上和各位聊骚了；</p><p>Rachel 还看上了 1 月 11 日国内上映的《FSN [HF] I. presage flowers》，可惜现在没有人可以一起去看了；</p><p>Rachel 倒是一直在追《卫宫家今天的饭》，别的番全都没追完，可能 Rachel 是个假肥宅，白瞎了 BMI 24 的身体；</p><p>对了对了，某理财软件花掉的那么多钱， Rachel 可都好好地记下来了；</p><p>Rachel ……享受着与各位在一起的每分每秒。</p><h1 id="2019，你好。"><a href="#2019，你好。" class="headerlink" title="2019，你好。"></a>2019，你好。</h1><p>新的一年，愿能与各位继续前行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不知不觉，又是一年过去了。这一年中，Rachel 失去了很多，但收获了更多。&lt;/p&gt;
&lt;p&gt;Rachel 以为自己能够得到一种寄托，伸出手，却依然遥不可及；&lt;/p&gt;
&lt;p&gt;Rachel 将过往放下，沉住气，也许有更多美好。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>将 Ubuntu 引导从 Legacy 转换为 UEFI</title>
    <link href="https://blog.stfw.info/articles/convert-ubuntu-from-legacy-to-uefi/"/>
    <id>https://blog.stfw.info/articles/convert-ubuntu-from-legacy-to-uefi/</id>
    <published>2018-02-03T07:20:03.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然心血来潮，想用 <code>UEFI</code> 装 Windows 10 玩玩，搞定了安装 U 盘后发现之前的 Ubuntu 一直使用 <code>Legacy</code> 作为引导方式。秉着人不折腾就会死的精神，弄了差不多一整天，终于将 Ubuntu 的引导方式从 <code>Legacy</code> 转为了 <code>UEFI</code> ，并成功地实现了 Ubuntu 与 Win10 双系统引导。为了方便各位作死，特在此分享出来。</p><blockquote><p>注意：本文需要计算机引导的基本知识以及一定的动手能力，若不熟悉 Linux 命令行，虽可完成所有步骤，但不建议尝试。本文所述 Ubuntu 包含所有 Ubuntu 分支，例如 Lubuntu 和 Xubuntu 。</p></blockquote><span id="more"></span><h2 id="Ubuntu-Legacy-转-UEFI"><a href="#Ubuntu-Legacy-转-UEFI" class="headerlink" title="Ubuntu Legacy 转 UEFI"></a>Ubuntu <code>Legacy</code> 转 <code>UEFI</code></h2><h3 id="Step-1-建立-ESP-分区"><a href="#Step-1-建立-ESP-分区" class="headerlink" title="Step 1. 建立 ESP 分区"></a>Step 1. 建立 ESP 分区</h3><p>首先进入任何一个 <strong>EFI 启动</strong> 的、基于 Ubuntu 的 Live System ，使用 <code>GParted</code> 在硬盘首 2.2 TB 内分出 100MB 以上（推荐 200MB ）的空间，格式化成 FAT32 后 <code>Manage flags</code> 勾选 <code>boot</code> ，像这样：</p><blockquote><p>图片消失在了卡塞尔</p></blockquote><h3 id="Step-2-迁移-Ubuntu-引导文件"><a href="#Step-2-迁移-Ubuntu-引导文件" class="headerlink" title="Step 2. 迁移 Ubuntu 引导文件"></a>Step 2. 迁移 Ubuntu 引导文件</h3><p><strong>反复确认网络没问题</strong> ，然后打开终端，用以下命令安装 <a href="https://launchpad.net/~yannubuntu/+archive/ubuntu/boot-repair"><code>Boot Repair</code></a> ：</p><pre><code class="shell">sudo add-apt-repository ppa:yannubuntu/boot-repairsudo apt updatesudo apt install boot-repair</code></pre><p>或者，你也可以使用 <a href="https://sourceforge.net/p/boot-repair-cd/"><code>Boot Repair CD</code></a> ，基于 Lubuntu 。总之，在一切完成后，启动 <code>Boot Repair</code> 。</p><blockquote><p>图片消失在了圣芙蕾雅学院</p></blockquote><p>等待数据收集完毕，在 <code>Advanced options</code> 选择 <code>GRUB location</code> ，如果原来是使用 <code>Legacy</code> 引导，那么勾选 <code>Seperate /boot/efi partition</code> ，选择刚刚在 <code>GParted</code> 中分好的区（这里是 <code>/dev/sda1</code> ）。</p><blockquote><p>图片消失在了八重村</p></blockquote><p>点击 <code>Apply</code> ，然后跟着 <code>Boot Repair</code> 的指示做，并静等完成。</p><h3 id="Step-3-试试看！"><a href="#Step-3-试试看！" class="headerlink" title="Step 3. 试试看！"></a>Step 3. 试试看！</h3><pre><code class="shell">reboot</code></pre><h3 id="Step-4-跌进大坑？"><a href="#Step-4-跌进大坑？" class="headerlink" title="Step 4. 跌进大坑？"></a>Step 4. 跌进大坑？</h3><p>如果这里直接启动已经没问题，那么这一部分就到此为止了。如果有问题……</p><h4 id="关掉-Legacy-支持"><a href="#关掉-Legacy-支持" class="headerlink" title="关掉 Legacy 支持"></a>关掉 <code>Legacy</code> 支持</h4><p>在 BIOS 的设置页面中，一般能找到类似于「启用 <code>Legacy</code> 支持」的选项。把它关掉 <del>我们还能做朋友</del> 即可仅使用 <code>UEFI</code> 来引导启动。当然如果已经爆炸这也没什么用处，可能也就只是确定确实是 <code>UEFI</code> 的问题而不是系统仍然在尝试走 <code>Legacy</code> 。</p><h4 id="尝试用命令行重新安装-GRUB"><a href="#尝试用命令行重新安装-GRUB" class="headerlink" title="尝试用命令行重新安装 GRUB"></a>尝试用命令行重新安装 GRUB</h4><p>进入 Live System ， <strong>确保网络通畅</strong> ，用 <code>GParted</code> 记下原系统所在的分区（比如说我的是 <code>/dev/sda2</code> ），然后打开终端，键入：</p><pre><code class="shell">sudo mount /dev/sda1 /mntsudo mkdir -p /mnt/boot/efisudo mount /dev/sda3 /mnt/boot/efisudo mount --bind /dev /mnt/devsudo mount --bind /proc /mnt/procsudo mount --bind /sys /mnt/syssudo mount --bind /run /mnt/runmodprobe efivarssudo chroot /mnt</code></pre><p>这时，这个终端已经切换 root 到了原系统并可以用最高权限进行一些操作，随后我们便需要在原系统上重新安装支持 <code>UEFI</code> 引导的 GRUB ，即 <code>grub-efi-amd64</code> 。</p><pre><code class="shell">apt install grub-efi-amd64grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu --recheck --no-floppy --debug</code></pre><p>现在再重启试试看？</p><h4 id="将分区表从-MBR-转换成-GPT"><a href="#将分区表从-MBR-转换成-GPT" class="headerlink" title="将分区表从 MBR 转换成 GPT"></a>将分区表从 <code>MBR</code> 转换成 <code>GPT</code></h4><p>虽然 <code>MBR(Master Boot Record)</code> 并不影响 <code>UEFI</code> 的正常引导，但 Windows 却拒绝使用，转而要求用户切换到 <code>GPT(GUID Partition Table)</code> 。 <code>Legacy</code> 只能通过 <code>MBR</code> 引导，因此通常执行完上述操作之后分区表仍然采用 <code>MBR</code> ，强烈推荐更换到 <code>GPT</code> 。</p><p>要从 <code>MBR</code> 切换到 <code>GPT</code> ，操作也不是很困难，需要使用 <code>gdisk</code> 。首先在 Live System 中安装并以系统所在硬盘为对象运行：</p><pre><code class="shell">sudo apt install gdisksudo gdisk /dev/sda</code></pre><p>在 <code>gdisk</code> 启动后，目前的分区表情况会显示在屏幕中。为了将 <code>MBR</code> 转换为 <code>GPT</code> ，首先需要按 <code>r</code> ，进入 <code>Recovery/Transformation</code> 模式，接着 <code>f</code> 启动转换，若需要确认操作则输入 <code>Y</code> ，一切后用 <code>w</code> 保存并退出。此时，分区表就从 <code>MBR</code> 被转换为了 <code>GPT</code> 。重新进入 <code>gdisk</code> 可看到，原有的 <code>MBR</code> 分区表变成了 <code>Protective</code> ，而 <code>GPT</code> 变成了 <code>Present</code> 。</p><p>此时建议重新使用命令行安装 GRUB 或者重新运行一遍 <code>Boot Repair</code> ，虽然不确定不重新安装是否会影响正常启动。此外，按道理来讲是否转换并不会干涉 <code>UEFI</code> 下 Ubuntu 的启动， 但奇幻的是本人的问题在转换完后消失掉了……</p><h2 id="UEFI-引导-Windows-安装"><a href="#UEFI-引导-Windows-安装" class="headerlink" title="UEFI 引导 Windows 安装"></a>UEFI 引导 Windows 安装</h2><h3 id="Step-1-安装-Windows-10"><a href="#Step-1-安装-Windows-10" class="headerlink" title="Step 1. 安装 Windows 10"></a>Step 1. 安装 Windows 10</h3><p>傻瓜式的操作步骤应该没有问题（吧）……</p><h3 id="Step-2-使用-GRUB-引导-Windows-10"><a href="#Step-2-使用-GRUB-引导-Windows-10" class="headerlink" title="Step 2. 使用 GRUB 引导 Windows 10"></a>Step 2. 使用 GRUB 引导 Windows 10</h3><p>这个也不难……请翻出 <code>Boot Repair</code> 进行一次 <code>Recommended Repair</code> ，然后应该就啥问题没有能够正常引导 Windows 10 了。</p><h3 id="Step-3-Enjoy-it"><a href="#Step-3-Enjoy-it" class="headerlink" title="Step 3. Enjoy it!"></a>Step 3. Enjoy it!</h3><pre><code class="shell">reboot</code></pre><hr><h4 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h4><ol><li><a href="https://help.ubuntu.com/community/UEFI">UEFI</a> - Ubuntu Documentation</li><li><a href="https://askubuntu.com/questions/509423/which-commands-to-convert-a-ubuntu-bios-install-to-efi-UEFI-without-boot-repair">Which commands to convert a Ubuntu BIOS install to EFI/UEFI without boot-repair on single boot hardware?</a> - Ask Ubuntu</li><li><a href="https://askubuntu.com/questions/913397/how-to-change-ubuntu-install-from-Legacy-to-UEFI">How to change ubuntu install from Legacy to UEFI</a> - Ask Ubuntu</li><li><a href="https://superuser.com/questions/376470/how-to-reinstall-grub2-efi">How to reinstall GRUB2 EFI?</a> - Super User</li><li><a href="https://askubuntu.com/questions/618244/does-the-UEFI-partition-either-must-or-should-be-first-for-some-reason-if-s">Does the UEFI partition either “MUST” or “SHOULD” be first for some reason? If so why?</a> - Ask Ubuntu</li><li><a href="http://www.linuxtopic.com/2017/08/convert-mbr-to-gpt.html">Steps to Convert MBR to GPT Ubuntu / Debian with images</a> - LinuxTopic</li><li><a href="https://help.ubuntu.com/community/WindowsDualBoot">WindowsDualBoot</a> - Ubuntu Documentation</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近突然心血来潮，想用 &lt;code&gt;UEFI&lt;/code&gt; 装 Windows 10 玩玩，搞定了安装 U 盘后发现之前的 Ubuntu 一直使用 &lt;code&gt;Legacy&lt;/code&gt; 作为引导方式。秉着人不折腾就会死的精神，弄了差不多一整天，终于将 Ubuntu 的引导方式从 &lt;code&gt;Legacy&lt;/code&gt; 转为了 &lt;code&gt;UEFI&lt;/code&gt; ，并成功地实现了 Ubuntu 与 Win10 双系统引导。为了方便各位作死，特在此分享出来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文需要计算机引导的基本知识以及一定的动手能力，若不熟悉 Linux 命令行，虽可完成所有步骤，但不建议尝试。本文所述 Ubuntu 包含所有 Ubuntu 分支，例如 Lubuntu 和 Xubuntu 。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://blog.stfw.info/tags/Linux/"/>
    
    <category term="系统" scheme="https://blog.stfw.info/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="BIOS" scheme="https://blog.stfw.info/tags/BIOS/"/>
    
  </entry>
  
  <entry>
    <title>时光抹去了一切</title>
    <link href="https://blog.stfw.info/articles/time-erases-all/"/>
    <id>https://blog.stfw.info/articles/time-erases-all/</id>
    <published>2017-07-26T12:22:44.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>你第一次看到她是在入学典礼上。</p><p>她向你走过来，背对着阳光。</p><p>好像天使下凡照亮了人间。</p><span id="more"></span><p>你开始买双人份的早餐。</p><p>你渐渐地习惯了两个人走在路上。</p><p>你享受着风吹起长发，带来一缕香味。</p><p>蹭在脸上痒痒的，忍不住去抚摸。</p><p>你和几个人去看了一场电影。</p><p>她趴在你的肩膀上低声哭泣。</p><p>你相信你会把她永远刻在心里。</p><p>数年之后，你不经意听到了这部电影的配乐。</p><p>你漫无目的地向前跑去。</p><p>像是在追逐浅梦中的天使。</p><p>你有一种熟悉的感觉。</p><p>好像心口的伤疤曾经写过谁的名字。</p><p>仔细想却什么都想不起来了。</p><p>你还是会习惯性地买双人份的早餐。</p><p>但你不知道你要给谁。</p><p>你看着昏黄的灯光下是拉得长长的一个人影。</p><p>你突然蹲下哭了起来。</p><p>双手茫然地抱住了头不知所措。</p><p>眼泪嵌进了石板路。</p><p>却想不起来关于她的一切。</p><p>你搬到了完全不同的一个城市。</p><p>你开始了新的生活。</p><p>你有了一份稳定的工作。</p><p>你忘记了说过的那些年少轻狂的话。</p><p>你忘记了她在入学典礼上展露的微笑。</p><p>你忘记了天使的模样。</p><p>你做了一个梦。</p><p>梦到了你完全不认识的一个人。</p><p>看起来好熟悉的一张脸。</p><p>醒来空余两行泪痕。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;你第一次看到她是在入学典礼上。&lt;/p&gt;
&lt;p&gt;她向你走过来，背对着阳光。&lt;/p&gt;
&lt;p&gt;好像天使下凡照亮了人间。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>技术共享的现状 - 生存还是毁灭，这是一个问题</title>
    <link href="https://blog.stfw.info/articles/to-be-or-not-to-be-that-is-the-question/"/>
    <id>https://blog.stfw.info/articles/to-be-or-not-to-be-that-is-the-question/</id>
    <published>2017-07-08T09:33:12.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>「技术共享」是什么？<br>它是一种信念。</p></blockquote><span id="more"></span><h2 id="毁灭"><a href="#毁灭" class="headerlink" title="毁灭"></a>毁灭</h2><p>Linux kernel ，作为在操作系统内核方面开源的先驱，距离诞生已有 24 年之长，并即将在 8 月 25 日迎来第 25 次生日。这个曾经在国际社会上引起巨大轰动的内核（底层），只在一波热潮之后便迅速被寻常百姓所忘记。即使是在第 25 个年头，基于 Linux 的系统（发行版）在市场上的占比仍然低于基于 Unix 的 macOS ，更别说和 Windows 比较了。</p><p>为什么？</p><p>Linux 提倡的是「技术共享」，也就是人人可查阅、人人可使用、人人可修改，任何人都能修改任何人修改/创造的任何开源软件并根据协议使用。这本是一个非常超前的理念。然而，正是因为任何人都能以开源协议重新发布，使得 Linux 的发行版有…… <em>我数不清了丢个链接给你们你们自己数吧： <a href="https://en.wikipedia.org/wiki/List_of_Linux_distributions">List of Linux distributions</a></em> 这么多种，碎片化非常严重，包管理器混乱，几乎每更换一个发行版，甚至每更换一个软件包，就得重新适应一遍并养成新的习惯。虽然 Linux 最开始的目的「技术共享」已经达到，每个人都能够获取到最新的技术，然而 Linux 对普通用户的吸引力并不高，「技术共享」对普通用户来讲仍然是一个可望而不可及的梦想。</p><p>而在用户占比上将 Linux 及其发行版远远甩在后面的 Windows ，在一些人的眼里从头到脚全是「罪恶」。闭源的内核，闭源的软件，闭源的一整个生态链，使得许多极客对 Windows 嗤之以鼻。然而，对于普通用户来讲， Windows 无疑是最好的选择。</p><p>为什么？</p><p>「不用折腾」。 Windows 的用户都是渴望稳定的，他们不愿意折腾，他们也不需要折腾就能用上稳定的系统和软件，这在很多时候比「技术共享」和「自由」更有吸引力。</p><p>除此之外，不知道你是否听说过 Steam 。作为一个游戏平台， Steam 无疑是成功的，每年大量的打折活动给开发者和其背后的 Valve 带来了同样大量的利润。然而 Steam 上的游戏，大部分却只有 Windows 版本。与此相同，由 Adobe 所开发的 Photoshop 、 Premiere Pro 、 After Effects 等优秀应用，也只有 Windows 和 macOS 版本。这些游戏 / 应用未必开源也未必自由，它们大部分都需要付费，导致了「某个游戏因为砸钱自己做了一套黑科技引擎爆红之后坐着收钱」，从而「同样的内容我的游戏砸钱买好引擎卖得更好」，又或者「某个软件因为秘密的优化技巧得到大量用户」。</p><p>它们之间有「技术共享」吗？恐怕各位都知道，当然没有。在追名逐利的 21 世纪，完全开放而自由的软件尤其稀少，而且大部分都被限制在了 Linux 及其各类发行版上，所以推广开来几乎是一个遥不可及的梦想。</p><p>Android ，作为 Mobile 端最大的操作系统，碎片化与 Linux 同样严重。暂且不说各种爱好者开发的第三方开源 ROM ，即使是厂商自己出厂预装，也有各种各样的不同，像 Sony 机型的 ROM 与 Samsung 的 TouchWiz 就完全不能扯到一处，更别说各类中国特色（比如 MIUI EMUI EUI Funtouch ……）了。</p><p>而 Android 的拥有者， Google ，正出于各种我们无法获知的原因逐渐降低 AOSP （ Android Open Source Project ）的自由度，收紧对 Android 的控制。曾经的 AOSP 源码内附带了一整套 Android 基础应用，从相机到日历再到浏览器，而现在， AOSP 内只含有极少一部分。厂商只有两个选择，一是抛弃大多数 Google 用户自己做一套，另一个就是支付高昂的授权费以内置 Google 的 GMS 。 Cyanogen 曾经有过一个宏伟的计划，想要建立一个完全 Google-free 的 Android 生态，最后却遗憾退场。也许你会这样说：「 Android 就是 Google 家的， Google 对 Android 的控制有何不可？」然而，如果当初就想把 Android 牢牢掌握在手中，又为何要将其开源？</p><p>「技术共享」之所以不为人所看好，其中一个巨大的原因就是利益。现在大部分人的创造都只是为了利益，仅此而已。我的产品创意新，就能卖到更高的价格；我的开发周期比友商短，就能更早上市捞钱；我的宣传比友商好，就能坐拥用户资源，如此这般，等等等等。</p><h2 id="生存"><a href="#生存" class="headerlink" title="生存"></a>生存</h2><p>Google 对 Android 的控制欲，在 Android 3.0 Honeycomb 发布的时候就已经体现出来。当时的 Honeycomb 几乎完全不开源，但 Google 很快就发现这样完全行不通，根本没有厂商会选择继续花钱升级到 Honeycomb ，大部分都仍然在使用 Gingerbread 甚至 Froyo 。这种大部分厂商落后时代的局面直到 Android 4.0 Ice Cream Sandwich 发布才得到缓解。</p><p>同样，在如今的应用市场上不乏能与闭源软件分庭抗礼的开源应用。比如，与 Photoshop 一样强大的 GIMP ，与 UltraISO 齐头并进的 UNetbootin ，以及完全找不到替代品的 VLC ……</p><p>知识不应当用来出售，知识应该共享。如果 Nikola Tesla 没有共享自己的发现，那么日落后的世界也许仍然漆黑一片；如果 Marie Curie 没有共享自己的成果，那么可能没有人知道辐射为何物；如果 Niels Bohr 没有共享自己的技术，那么历史书上的二战大概会到 1948 年。知识带来的应该是荣誉，而不是万贯家财。研究的原因应该是研究，而不是成果发布后的利益。</p><p>不管「技术共享」的现状怎样，当我们坚信未来会发生的时候，未来就正在发生。</p><p>愿每一个人都能获取自己需要的技术并得到帮助，不管白人抑或黑人，不管贫穷抑或富贵。</p><hr><h4 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h4><ol><li><a href="https://en.wikipedia.org/wiki/Open-source_software">https://en.wikipedia.org/wiki/Open-source_software</a> - Wikipedia</li><li><a href="https://en.wikipedia.org/wiki/History_of_Linux">https://en.wikipedia.org/wiki/History_of_Linux</a> - Wikipedia</li><li><a href="https://www.netmarketshare.com/">https://www.netmarketshare.com</a> - NetMarketShare</li><li><a href="https://en.wikipedia.org/wiki/List_of_Linux_distributions">https://en.wikipedia.org/wiki/List_of_Linux_distributions</a> - Wikipedia</li><li><a href="https://en.wikipedia.org/wiki/Android">https://en.wikipedia.org/wiki/Android_(operating_system)</a> - Wikipedia</li><li><a href="https://www.oschina.net/news/63203/how-google-control-android">https://www.oschina.net/news/63203/how-google-control-android</a> - OSChina</li><li><a href="https://en.wikipedia.org/wiki/CyanogenMod">https://en.wikipedia.org/wiki/CyanogenMod</a> - Wikipedia</li><li><a href="https://en.wikipedia.org/wiki/Nikola_Tesla">https://en.wikipedia.org/wiki/Nikola_Tesla</a> - Wikipedia</li><li><a href="https://en.wikipedia.org/wiki/Niels_Bohr">https://en.wikipedia.org/wiki/Niels_Bohr</a> - Wikipedia</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;「技术共享」是什么？&lt;br&gt;它是一种信念。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://blog.stfw.info/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="Google" scheme="https://blog.stfw.info/tags/Google/"/>
    
    <category term="开源" scheme="https://blog.stfw.info/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>用 PayPal 拯救你的 GlobalCash ，在 Google Play 完成付款</title>
    <link href="https://blog.stfw.info/articles/globalcash-paypal-google-play/"/>
    <id>https://blog.stfw.info/articles/globalcash-paypal-google-play/</id>
    <published>2017-06-23T03:04:23.000Z</published>
    <updated>2021-09-20T21:59:14.524Z</updated>
    
    <content type="html"><![CDATA[<p>最近 Google 对于 VCC (Virtual Credit Card) 的打击越来越沉重也越来越频繁，同时 EntroPay 对香港签发的 MasterCard 停止了支持，导致 GlobalCash 在 Play 中的付款处于长期用不了的状态。我曾经试着用 PayPal 绑定 GlobalCash 并试着在 Play 中进行付款而结果仍然是被拒绝。经过一番摸索，最后，我终于找到了一种能够绕过 Google Play 复杂检验机制的方法。</p><span id="more"></span><blockquote><p>虽然 Google Play 应用无法使用 GlobalCash 支付，但令人意外的是， Google Payments 仍然能用，而且 Google Play 的电影也能购买。如果没有特别需要， <strong>不推荐</strong> 使用本文介绍的方法。</p></blockquote><h1 id="用-PayPal-拯救你的-GlobalCash-，在-Google-Play-完成付款"><a href="#用-PayPal-拯救你的-GlobalCash-，在-Google-Play-完成付款" class="headerlink" title="用 PayPal 拯救你的 GlobalCash ，在 Google Play 完成付款"></a>用 PayPal 拯救你的 GlobalCash ，在 Google Play 完成付款</h1><h2 id="Step-0-注册一个-PayPal-绑定-GlobalCash"><a href="#Step-0-注册一个-PayPal-绑定-GlobalCash" class="headerlink" title="Step 0. 注册一个 PayPal 绑定 GlobalCash"></a>Step 0. 注册一个 PayPal 绑定 GlobalCash</h2><p>因为我们需要使用 PayPal 中的余额完成付款，所以我们当然需要一个 <a href="https://paypal.com/">PayPal</a> 。</p><p><img src="https://img.vim-cn.com/37/88d7b1ab50b28db57a6784208cbc6917431cbe.png" alt="Screenshot01"></p><p>然后，点击右上角的 <a href="https://www.paypal.com/us/webapps/mpp/account-selection"><strong>Sign up</strong></a> ，开始注册一个 PayPal 账户。</p><p><img src="https://img.vim-cn.com/45/7fb1513e567324421c0e084668565f4ecf8e36.png" alt="Screenshot02"></p><p>请选择对于账户的控制不算太严的个人账户。</p><p><img src="https://img.vim-cn.com/77/5fe0de7e849c1b913e0911f42ea28ef921ce53.png" alt="Screenshot03"></p><p>输入个人信息后，因为 PayPal 的验证机制，无法在注册时绑定 GlobalCash ，那么就只能先跳过。<br>此外，请务必注册美国区的 PayPal ，中国区会出现各种各样奇怪的问题甚至注册到 贝宝 ，这样的话哭都来不及。</p><blockquote><p>在注册的时候会请求手机号码，这里如果有手机号可以填入，没有的话可以到 <a href="https://textnow.com/">TextNow</a> 注册，记得两个号码之间要经常发个短信什么的来保证号码不被收回。</p></blockquote><p><img src="https://img.vim-cn.com/bd/f6e3975be9c0466f6f1890f46cec3b0ac3ae75.png" alt="Screenshot04"></p><p>在注册完之后，点击左下角的 <a href="https://www.paypal.com/myaccount/wallet">Link a bank or card</a> ，输入 GlobalCash 的信息，完成绑定。图上我已经绑定好了。</p><h2 id="Step-1-注册另一个-PayPal-空账户"><a href="#Step-1-注册另一个-PayPal-空账户" class="headerlink" title="Step 1. 注册另一个 PayPal 空账户"></a>Step 1. 注册另一个 PayPal 空账户</h2><p>然后，和上面一样的流程，注册一个 PayPal 空账户。账户中不需要绑定卡。</p><p><img src="https://img.vim-cn.com/09/bc3de82469747a123d0dd561e206a8d67c9143.png" alt="Screenshot05"></p><p>像这样。</p><h2 id="Step-2-在两个-PayPal-账户之间倒腾钱"><a href="#Step-2-在两个-PayPal-账户之间倒腾钱" class="headerlink" title="Step 2. 在两个 PayPal 账户之间倒腾钱"></a>Step 2. 在两个 PayPal 账户之间倒腾钱</h2><p>Google 的机制不允许没有绑定卡的 PayPal 账户进行付款， PayPal 也不能从银行卡直接充值进去，因此我们需要把钱从绑了卡的账户转到另一个没绑卡的账户，然后再转回来。<br>进入 <a href="https://www.paypal.com/myaccount/transfer">Send &amp; Request</a> ，然后选择 <a href="https://www.paypal.com/myaccount/transfer/send">Send to friends and family in the US</a> 。</p><p><img src="https://img.vim-cn.com/5c/b8dadffb123dfba45282ac19fdf332818c7340.png" alt="Screenshot06"></p><p>输入另一个帐号的邮箱，点击 Next ，并输入金额。完成之后，点击 Continue ，钱就会自动飞到另一个账户。<br>这里如果 Web 端没有办法发送一直报错，请试试使用 PayPal Android 客户端。</p><p><img src="https://img.vim-cn.com/a3/54140e5b976920dd0d812b22a9df481dfae8db.jpg" alt="Screenshot07"></p><p>支付完毕后，另一个 PayPal 的零钱就多了所选择的数额。然而，  PayPal 从银行卡转账的手续费同样奇高无比，因此请避免多次小额转账。<br>登入另一个 PayPal ，当收到零钱之后，使用同样的方法再转回去。<br>这样，像 Step 0 的最后一张截图，绑定了 GlobalCash 的 PayPal 账户就能得到一些零钱。<br>然后，就试试在 Google Play 中购买应用吧！</p><p><img src="https://img.vim-cn.com/2a/a484695b905d9ec5141b6a07352e9cdacbab4d.jpg" alt="Screenshot08"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近 Google 对于 VCC (Virtual Credit Card) 的打击越来越沉重也越来越频繁，同时 EntroPay 对香港签发的 MasterCard 停止了支持，导致 GlobalCash 在 Play 中的付款处于长期用不了的状态。我曾经试着用 PayPal 绑定 GlobalCash 并试着在 Play 中进行付款而结果仍然是被拒绝。经过一番摸索，最后，我终于找到了一种能够绕过 Google Play 复杂检验机制的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Google" scheme="https://blog.stfw.info/tags/Google/"/>
    
    <category term="GlobalCash" scheme="https://blog.stfw.info/tags/GlobalCash/"/>
    
    <category term="支付" scheme="https://blog.stfw.info/tags/%E6%94%AF%E4%BB%98/"/>
    
    <category term="PayPal" scheme="https://blog.stfw.info/tags/PayPal/"/>
    
  </entry>
  
</feed>
