[{"title":"在 OpenWrt 上打造 Rickroll 访客 Wi-Fi","date":"2022-04-07T17:06:25.000Z","path":"articles/custom-guest-wifi-with-auth/","text":"昨天在 TG 上看到隔壁频道的点子：必须观看一定时间 Rickroll 后才允许连接，并且每次暂停会 +10s 的访客 Wi-Fi，顿时震惊：「原来还可以这么搞？？」仔细分析可行性后发现，这个访客 Wi-Fi 原理并不复杂，有折腾 OpenWrt 经验并且写过一丢丢 HTML 的话极其容易上手，于是将步骤记录如下。 0. 准备条件 一台运行 OpenWrt 的路由器 一台能联网并且能 ssh 的设备 一点点计算机网络及开发知识 一点点折腾精神 我自己使用的是红米 AX6 基于 LEDE 的自编译固件，因此能深入地自主精简、定制，如果没有自编译固件的条件或想法，可能会遇到一些奇妙的依赖问题。推荐选择闪存容量大或可扩展存储的路由器，防止折腾半天发现没有留给视频的空间。除此之外，如果想对这个访客网络进行限速（比如使用 SQM QoS），那么也许还需要较强的性能。 1. 创建访客网络既然是新造访客 Wi-Fi，那第一步自然是把这个 Wi-Fi 做出来。OpenWrt 后台的 网络 -&gt; 无线 设置中，在想要创建新网络的网卡上点击「添加」，在下方的接口配置——基本设置——网络中勾选「创建」输入 lan_guest （或者任何其他名字，只要能分辨出这是访客网络），进行一些自定义，然后「保存&amp;应用」。 接下来，打开 网络 -&gt; 接口 ，应该已经能看到刚刚添加的新接口了。我们点进它的「修改」，将协议切换到「静态地址」，调整访客网络的网关：「IPv4 地址」。我主用网络的网关 &#x2F; lan 中设置的地址为 192.168.13.1 ，这里就可以写成 192.168.3.1 或者任何一个不以 192.168.13 开头且符合 IPv4 标准的值，再把子网掩码调整到 255.255.255.0 。如图所示，我选择的是 192.168.0.1 ，声明了我这个接口占用了 192.168.0.0/24 这个网段，也就是 192.168.0.0 ~ 192.168.0.254 。对这些不熟悉的话，按照图上来就好。 此时「防火墙设置」中默认选中的应该是「不指定或新建」，我们在后面的文本框中同样输入 lan_guest （不必相同，只是方便辨识），保存，在 网络 -&gt; 防火墙 中就能看到新建的这个区域了。点击「修改」，这时「覆盖网络」应当勾选且只勾选了 lan_guest ，将「入站数据」、「出站数据」和「转发」全部调至「接受」，下方「端口触发」中「允许转发到目标区域」勾选 wan ，保存即可。这样，我们将访客网络和主用网络隔离开，不允许互相访问。 如果你不需要对访客网络进行再进一步的限制，在「防火墙设置」处可以直接将访客网络划入 lan 。这一步主要是为了后面阻止访客网络访问路由器配置。 这时，我们已初步完成访客网络的搭建。然而，此时的访客网络除了无法与主用网络通信外还没有任何限制，不过它的好日子也不长了，我们接下来就「限制访客访问后台」并「对访客网络限速」。 2. 限制访客访问后台默认情况下，OpenWrt 的 HTTP 服务器 uhttpd 监听的是 0.0.0.0:80 ，也就是所有连接请求只要发送就照单全收，这肯定不是我们想要的，所以我们要将它改成主用网络的网关地址。如果你安装了 luci-app-uhttpd 软件包，那么可以在管理后台修改；下文说的是没有安装这个软件包的情况，我们需要用 ssh 连入后台，用 uci 修改配置。 用任意趁手的 ssh client 连入路由器后台后，我们执行 uci show uhttpd 看看当前的配置。默认情况下，它应该长这样： … uhttpd.main=uhttpd uhttpd.main.listen_http=&#39;0.0.0.0:80&#39; &#39;[::]:80&#39; uhttpd.main.listen_https=&#39;0.0.0.0:443&#39; &#39;[::]:443&#39; uhttpd.main.redirect_https=&#39;0&#39; … 在不使用 HTTPS 的情况下，第二行就是我们要更改的配置。我主用网络的网关在 192.168.13.1 ，所以我输入的内容如下： uci set uhttpd.main.listen_http=&#39;192.168.13.1:80&#39; uci commit /etc/init.d/uhttpd restart 分别代表着「将监听地址设置到 192.168.13.1 」，「保存设置」，「重启 HTTP 服务器 &#x2F; 重启后台」。此时再 uci show uhttpd 可以看到，我们调整的内容出现在了以 uhttpd.main 开头的列表的最末端，并且通过访客网络已经无法再打开路由器后台。 3. 对访客网络限速 若不需限制访客网络速度，可忽略本节内容；本节需要安装 luci-app-sqm 和 sqm-scripts 软件包。 创建、隔离都完成了，接下来就要对访客做限速了——毕竟在限速 24Mbps 的校园网环境，放任访客随便跑带宽势必会影响主用网络。我们用于限速的工具是 luci-app-sqm ，它是 sqm-scripts 的 GUI 控制台，附带了一系列用于控制网络质量的工具。在网络正常的情况下，你可以直接这样安装它们： opkg update opkg install luci-app-sqm 完成后，在 OpenWrt 后台的 网络 -&gt; SQM QoS 里就能调整限速设置。在「接口名称」处选中刚刚新增的 lan_guest ，再自主指定上下行速率就行。 4. Rickroll！ 本节需要安装 nodogsplash 软件包，并且可能需要一些前端开发知识。 最后一步就是配置验证服务了。它的学名叫 captive portal 「强制门户」，常见于机场、星巴克等地的公共 Wi-Fi，同时也被用来做校园网 Wi-Fi 的登录页。原理很简单，现代设备都有一个检查网络是否可用的机制，我们只要将它们检测网络可用的数据包指向我们的认证页面，系统就知道这个网络需要认证才能使用，并自动打开认证页面。 要造轮子理论上并不难，但已经有了用于完成这一整套步骤的完善工具： Nodogsplash 。像这样操作就能安装并启动它： opkg update opkg install nodogsplash /etc/init.d/nodogsplash start 默认情况下，Nodogsplash 会在重启时自动启动，并且对 lan 下的所有设备启用认证。使用 uci show nodogsplash 可以看到像这样的一段： … nodogsplash.@nodogsplash[0]=nodogsplash nodogsplash.@nodogsplash[0].enabled=&#39;1&#39; nodogsplash.@nodogsplash[0].fwhook_enabled=&#39;1&#39; nodogsplash.@nodogsplash[0].gatewayname=&#39;OpenWrt Nodogsplash&#39; nodogsplash.@nodogsplash[0].gatewayinterface=&#39;br-lan&#39; … 但我们只希望它监听访客网络，所以我们修改 nodogsplash.@nodogsplash[0].gatewayname 的值： uci set nodogsplash.@nodogsplash[0].gatewayinterface=&#39;wlan1&#39; uci commit 这里的 wlan1 应修改为访客网络的接口名。在我的案例中，我将没有用上的 2.4GHz Wi-Fi 设置为了访客网络，所以它是 wlan1 ，如果一张网卡下有多个 Wi-Fi 网络，它也可能是 wlan1-1 等，不确定的话可以参考 SQM QoS 的「接口名称」设置，括号内是 lan_guest ，括号外就是访客网络对应的接口名。 初始认证页面，作为示例，是一个有图有文字，只要点击「Continue」就会认证成功的简单页，位于 /etc/nodogsplash/htdocs/splash.html ，我们修改这个文件的内容就能控制认证页面。我将我写完的 splash.html 放在了 nodogsplash-rickroll 这个 GitHub 项目中，可以直接用我完成的 splash.html 替换掉已有文件，再将视频命名为 nevergonnagiveyouup.mp4 放在同一文件夹（ /etc/nodogsplash/htdocs/ ）下，输入 /etc/init.d/nodogsplash restart ，就能看到效果。 如果你还想深入了解这个页面的组成，这里摘录 &lt;body&gt; 部分如下： &lt;h1&gt;Never Gonna Give $clientip Up&lt;/h1&gt; 这是一个朴素的一级标题，调用了 Nodogsplash 的变量功能，将 $clientip 替换为当前认证设备的 IP 地址。这个特性在提交认证数据部分也有用到： &lt;form id=&quot;authform&quot; method=&quot;get&quot; action=&quot;$authaction&quot; hidden&gt; &lt;input type=&quot;hidden&quot; name=&quot;tok&quot; value=&quot;$tok&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;redir&quot; value=&quot;$redir&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;开始上网&quot;&gt; &lt;/form&gt; 除了用来控制显示的 id=&quot;authform&quot; ，这个 &lt;form&gt; tag 用于向 $authaction （会被替换为实际的认证地址）提交一个 GET 请求，附带了一个 token $tok 和重定向目标 $redir 。这是官方推荐的用来认证设备的方式。除此之外，Nodogsplash 还提供了许多其他变量，在自带的 splash.html 中可以找到，包括网关 &#x2F; 用户 MAC，网关名等。 &lt;video id=&quot;video&quot; autoplay loop controls&gt; &lt;source src=&quot;nevergonnagiveyouup.mp4&quot; type=&quot;video/mp4&quot;&gt; 你的浏览器不支持 video 标签。 &lt;/video&gt; 这就是一个简单的视频播放组件，包含了「自动播放」、「循环播放」两个特性，还提供了播放控制（也带来了暂停惩罚）。 src 告诉浏览器应该播放的是同一个文件夹下的 nevergonnagiveyouup.mp4 ， type 则声明了视频的类别。 文件末尾是一段 JavaScript，作用已在注释中说明，完成了最基本的倒计时 + 暂停检测功能。 ⚠注意⚠：你可能已经看到了，官方注释中说： It should be noted when designing a custom splash page that for security reasons many CPD implementations: Immediately close the browser when the client has authenticated. Prohibit the use of href links. Prohibit downloading of external files (including .css and .js). Prohibit the execution of javascript. 翻译过来，为了安全考虑，完成认证后应该立即关闭浏览器，禁止使用 href 链接，禁止引用外部文件， 禁止执行 JavaScript 。本文完成的认证页面只是「图一乐」，如果需要大面积部署到生产环境，请务必尽最大可能遵循这几条原则。 同文件夹下还有一个 status.html ，用来告诉设备「你已经连上了，不用尝试连接了」，文章完成时我还没有动它，如果有兴趣的话可以折腾折腾。 5. 搞定！如此，我们就完成了一个 电信诈骗 访客 Wi-Fi。 快去诈骗你的朋友们吧！ 参考与感谢： 灵感来源：https://t.me/CyanCh/855 Nodogsplash Documentation: https://nodogsplash.readthedocs.io/","tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.rachelt.one/tags/Linux/"},{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://blog.rachelt.one/tags/OpenWrt/"},{"name":"Rickroll","slug":"Rickroll","permalink":"https://blog.rachelt.one/tags/Rickroll/"},{"name":"访客网络","slug":"访客网络","permalink":"https://blog.rachelt.one/tags/%E8%AE%BF%E5%AE%A2%E7%BD%91%E7%BB%9C/"}]},{"title":"航道，四季与歌：2021 的年度总结","date":"2021-12-21T00:49:54.000Z","path":"articles/2021-2022/","text":"初代 Cytus 的设定很有意思，作为人类永生的载体，为了防止人类的记忆被新的记忆覆盖后的情感消失，机器人们会将情感化为音乐存储在名为 Cytus 的空间，每过一段时间就使用这些音乐感受情绪与灵魂。 作为人类，浑浑噩噩中度过的每一天，我同样依赖音乐触摸我的灵魂，而在我选出来的五首歌里，是我过去一年的故事。 本文长约 4800 字，阅读约需 12 分钟，全程无图，请放心食用。 暮冬：你啊 为何不愿停下 寂寞的人呐 显得不慌忙啊雨下得再大 你啊 为何不愿停下越冠冕堂皇 越贪嗔痴狂啊折不折又怎样 你是我永不凋谢的花 Ring - 堪折 冬天属于重逢与告别。短短的、微不足道的一个月寒假，对旧友相聚比「岁月如梭」更短，对无所事事比「度日如年」更长，其余时间，则像是我活过的每一天，不紧不慢地流淌。 跨越漫长的第一个学期，我与老友们聚首，在高考后聚餐的同一家火锅店 feel united。承受住欣喜、不舍与扭头就走的冲动，我与某个当时还有另一半的人，带着两位女生、抱着一个孩子，相会于承载我们太多回忆的公园。拥抱独有的惊喜、温暖与勇敢，我和从未离开我身边的人，再度经历一个月的成长。 与此同时，我开始对自己负全责，摆脱了对未成年人设下的种种限制，第一次握住教练车的方向盘。成年当天启动的、长达一周的短暂学车生活中，尽管我面对的科目一算不上紧张，后期真正开始学习时遇到的问题已初见端倪，或许从第一天起，我就在盼望一个「不用学车」的许可。元宵节前一天，顶着训练场 29℃ 的气温，我一边等同行人结束机械重复的倒车入库一边无聊地刷 NGA，被炙热的太阳晒得发昏时，不免对未来正式学车的日子忐忑不安。事实证明，我的忐忑一点都没错。 但那是夏天的故事，我有一整个学期用来做心理准备，所以没把它放在心上。我放在心上的是又一个假期结束，又一群人离开。大半年已经过去，《再会》里 Ayase 所写「即使是与你分隔两地 &#x2F; 也祈愿着能眺望同一片天空」，仍然能把我带回寒假的倒数第二个晚上。 那个晚上，长沙南站寒风凛冽，将一杯悠哉悠哉端住，仿佛下一秒就要把我吹走的风中，我站了十几分钟，才终于等来了我要等的友人。这次，没有扭头就走的企图，只有见面前一贯的冷淡，与见面后掩饰不住的不舍。可惜这次送别实在短暂，不过几句对话，他已不得不登上前往机场的磁浮。可能是潜意识里扭头就走的冲动，或者时间或者经济，我没能和他一起去机场，仅仅给他一个深拥然后转身离开，却在十分钟内落入难以自解的自责。 我知道这只是一连串离别的开始。我现在熟悉的人最终都会各奔东西，唯独难以适应现实的、始终如此软弱的我，无法想象未来成熟后，身旁没有友人陪伴的生活。可时间从未停下。 春：你能在我垂死之脸上寻见它吗 Can you see it in my dying faceYou are acting like I care Low Roar - Bones 转眼大半年，偶尔被我遗忘的意难平，已经深刻地改变了我的人生轨迹。 在那之前，我与一个人相逢恨晚。开学第一周最后一节课，周五下午的大学生心理健康，自发的小团体被拆散糅合成数个组，各据一方教室的领土。躲在教室最角落的我，有幸认识了企图比我躲得更远的人。任谁都不会想到，以缓解初见尴尬的自言自语为开始，以我给他让路时窗外洒落的阳光为楔子，我们的关系，在性格迥异还找不到几节共同课的情况下越来越近，从礼貌而疏远的社交距离、像是猫触水前试探般的寒暄，到夜跑、自习、散打课，洋湖、宜家、KFC，以及无数次自鸣得意，或者自取其辱。 在那之前，我把陪伴我半年的电脑送至北京维修，问题没找着，寄走后的 12 天里，我却不仅没有创作的能力，还丧失了与老朋友们同乐的权利。彼时，我不敢打扰忙于维系感情、极少听我倾诉的朋友，加上仿佛深入骨髓的要强，放任自己被找不到出口的情绪淹没的某天晚上，长沙城上一层雾气，我站在湖上桥的正中「看到万家灯火把盖着一层薄雾的夜空照亮，却看不到这偌大一个城里我的位置」。此心不安，吾乡难觅啊。 在那之后，我站在同一片湖上的同一座桥，终于放下了我一文不值的要强，一边打着电话一边望着桥下的水，思考了很久很久，不知道自己会被带去何方。半年后的今天，我还是不知道。或许本来就没有那么多路，或许车到山前必有路、船到桥头自然直；或许直到迟暮之年，我安详地躺在床上整理一生时才能下结论，或许我永远都不能。谁知道呢。 夏：凡追悔莫及之物皆美不胜收 戻らない後悔の全部が美しいってそういうのさぁ、僕だってわかるのに ヨルシカ - 思想犯 我逃不开的，只有这我一直都知道。 7 月 11 日晚上，大一最后一个学期终于结束。7 月 14 日，挂在我心口的大石头终于把我砸了个粉碎。我终于开始准备驾考，暑假，也终于宣告终结。 从那一天开始几乎一个月，我活进了高考以来最深的焦虑，焦虑着何时出发、何时结束，焦虑着我握住方向盘的半个小时中，纵然微小却能使副驾驶不耐烦的每个动作。我活进了一个月的讨好与厌恶，前者给教练，后者给总将教练脾气归咎于自己的自己。支离破碎的生活里，我的精神状态迅速恶化，不敢置身幽闭的环境，不敢和人坦率地交流，甚至不敢阅读沉重的文字。八月初，奔赴驾考考点前夜，我在床上辗转反侧，为一件小事歇斯底里。回想起来才知道，那些日子里我的思考能力一直被屏蔽，我却什么都做不到。 事出必有因。活成了客套与讨好、被自己厌恶得不敢直视自己的自己，「一遍过拿证」的鲜活例子，四位数起跳、凭良心收取的高得离谱的考试费，资源垄断的驾考考点，不熟悉的环境与不适应的伙食……我裹挟于它们之中，早已分不清谁才是让我连续失利两个科目，放弃暑假内完成驾考的最后一根稻草。我成功脱身那一刻，席卷我的甚至不是失落。我只感到释然。 或许还有以为暑假已经结束的，虚伪的平淡。平淡的《控制》，平淡的竞赛。平淡地被埋葬的自己。 但这种真实的麻木只持续到八月底，持续到我踏上漫漫长路，踏上一方异乡的土地。踏上青岛。 青岛，青岛。 半年前的我对自己说，如果像这样的送别有下一次，我决不会离开，我要站进航站楼，望着一架架飞机逐渐抬升，冲进它们的云海。 我最后没有做到，因为这次，我冲进了我的云海。 青岛，青岛。 第一天抵达，五四广场海风徐徐，脚下不远处的海面波光粼粼。从那时起，我清晰地知道，我从来没有被埋葬，只不过这两个月中，从来没有被唤醒。我清晰地知道，这就是我终究要来的地方。 我用一天的时间在崂山、太清、麦岛、台东，在云雾缭绕间、山水环流中，彻底干掉此前因过量运动而疲惫不堪的膝盖，用每天百十张照片的速度塞满相册，乐此不疲。然后是栈桥、八大关，是小青岛、万象城、信号山和鲁迅公园的乱石浅滩；是开海鲜嫩弹牙的虾水饺，是粥全粥到入口即化的黄花鱼，是信号山上某家店里装满一杯凉茶的格调。 是一路绵延进我心里的海岸线，是一座古老城市的气息与血脉，是无处安放所以无处不在的大海，是我摸不清看不透却挥之不去的青岛。 青岛，青岛。 我启程前想，也许这次旅途可以改变很多东西，对我来说的确是这样。难以忘怀的四天里，我与另一个人朝夕相处，直到相距千里，形影不离。难以忘怀的四天里，我后悔直到暑假最后几天才意识到，原来这个夏天本可以完全不一样，原来那一个月的碌碌无为，不会如我所想的那样平复我对暑假的期许。这难得的两个月假期，我本该如此开心地活着。难以忘怀的每一个夜晚，连同难以忘怀的那次半醉，我将自己活成没有明天的模样，害怕时间就此离去。难以忘怀的每一刻，尤其是归途前的最后一个深夜，当我把文字当作记录与埋葬昨天的载体，当我以自己的方式发现、正视今天，以及归途前的最后一个小时，当他把我送到机场，我报之以另一个深拥，我确实已经不需要明天。 青岛，青岛。 直到我回到一方似曾相识的土地，感受迟到太久的离别；直到我循环着《思想犯》中的俳句，不知秋风何时能拂去离别吹来冬日，不知何时才能见到另一个夏天；直到四个月后，那四天的幻象仍旧挥之不去，作为逝去夏日里的难得珍宝，熠熠生辉；直到我 2021 的后半段，多了一个魂牵梦萦的地方；直到此刻，当我挥笔写下来路与迷惘，我还在轻声呼唤那座城市。 青岛，青岛。 秋：错把飞絮当春雪，竟只是为了将你看不见 ただ、ただ雲を見上げても視界は今日も流れるまま遠く仰いだ夜に花泳ぐ春と見紛うほどに、君をただ見失うように ヨルシカ - 藍二乗 开学头一个月，我恍惚中还活在青岛，闭上眼睛还能闻到海风拂过沙滩，却只能睁开眼，用忙碌回应猝不及防的现实。我和一群孩子过了个中秋，重新拾回了一点活力，但它又被生活、综测与麻木压了下去。回家住了五天又回到学校，从我收拾好书包去图书馆自习的路上写下一段话，片刻思索后按下 Send 键开始，一切都变得不一样。 那时，我决定告别被糖分绑架的自己。 大概是从初三开始，糖成了我生活中不可或缺的一部分，我以可乐或奶茶庆祝成功，也用它们盖过失意与怅惘。借助糖分提供的多巴胺，我经历了高中思绪万千的无数个黄昏，被情绪淹没的晚上，以至心神不定的每个昼夜。体重的长期稳定让我忽视这种依赖，直至国庆五天，我以一己之力喝掉了五杯糖分（现在看来）严重超标的奶茶。 是不是什么错了？为什么我对糖的喜爱已经到了这个地步，以至于靠近奶茶店我就已经在想今天喝什么了？糖对我真的好吗？我没法摆脱对多巴胺的依赖，没有它就活不下去吗？我家的糖尿病史同意不同意呢？ 所以我决定至少做出一些改变。至少告别被糖分绑架的自己。 这很难。即使我对自己的要求是在不摄入游离糖，不喝含糖饮料不吃高糖零食的基础上尽量减少碳水，这一开始也很难，特别是与一群人一起出门时，大家都想喝茶颜可乐，唯独我必须选择无糖款，或者不喝，再大费口舌解释原因。戒断反应最强烈的时候，我走在路上，眼巴巴望着经过的奶茶店，幻想四季奶青、声声乌龙的口感，再往嘴里猛灌一大口水，加快步伐离开。 好在养成一个习惯只需要 21 天。我在忙碌中，在订阅者们的监督下，成功度过了最难熬的日子，内心的想法从「啊就这一杯无糖可乐我这周绝对不再喝」，逐步变成了「我上次喝代糖饮料好像还是上个月的事情（除开体育课的运动饮料）」。某天，当我和同学走进超市，惊讶地发现我居然很久没再看过饮料柜，甚至都快忘记可乐的口感时，目标基本达成的成就感无疑比人工添加糖更让人感到愉悦。改变还不止于此。我没有明显感觉，没有实际称过，寒假回家才能证实，但每次视频电话我妈都觉得我在减肥（事实上恩格尔系数快 90% 了）。我感觉得到的是皮肤状况明显改善，不再需要维 A 酸就能和伴随我三年的痘痘「断舍离」，脸部只剩下一些顽固的痘印。 最重要的是，离开糖之后，我一直在探索更健康的生活方式。放下手游，放下 10min 以内的短视频，放下一切短期刺激，我一次又一次思考自己到底想活成什么样。毕竟，连对糖的依赖都能改，还有什么不能呢？因为对身体素质的追求和体育课致死量的运动，我的活动能力逐渐增强，最大摄氧量一路走高，体测时 1km 跑进了从没想过的 4min。从新闻、资讯开始，晚上我给自己留出时间，屏蔽一切外部干扰，重新习惯与长篇文字为伴的生活。对夏天也好，对糖分也好，对过去的自己也好，我向它们挥手道别，在 suis 的歌声中，寻找我存在的意义。 初冬：人生真是绝佳的消遣啊 Life is such a wonderful waste of timeI wanna spend it with loveIf you don’t mind SILENT POETS - Almost Nothing 可能因为生活逐渐平淡，没有作为判断依据的大事发生，可能因为比起前一年、前一天，每一年、每一天在我人生中的占比越来越小，我所感知的时间越走越快，即使一件事离我太久，突然忆及也像是昨天。当我稍不注意，一年时光已经消逝。准备给这一年划上句号，回望自己时，我竟想不起什么聊以记叙，仿佛我这一年从未活过，或者每件事都被拆散成了无数个碎片，散落进每一天。 这个十二月的某一天中午，耳机里塞着熊光的《君に夢中》入眠时，我的意识朦胧间回到了一年半以前，还住在起初难以称之为家、阳台门一开就嘎吱响、有无数小昆虫陪我度过三年的小出租房，还走在一侧开了四家奶茶店、每天来回好几趟、拥挤得必须和车同行的水泥路，还坐在午休刚醒时连人一起昏昏沉沉、一成不变得有点漫长、永远有那些人的教室。我大概从未离开吧。 这个十二月的某一天下午，我与友人从宜家出来，抱着一大块碍事的小推车即将抵达学校时，被五一广场迷路的另一个人叫住了。不带任何犹豫地，我带上小推车，跳上反向的地铁，一路狂奔跑过地铁站和熙熙攘攘的国金街，连带翘掉了一次班会。那个下午我知道，不需要任何特殊目的与准备，单单是老友见面就能让人很开心。总希望能给人带来帮助的我，那个下午如愿以偿，时至今日，我仍庆幸那时自己做出了这样的决定。我确实从未离开啊。 这个十二月的某一天晚上，教室里冬风肆虐，吹得我双脚冰凉，本应将精力放进化学，可思绪早被吹散到九霄云外，想起更久远以前相同的寒风，不同在我并非强迫自己吃透难以理解的知识，而是等待着一份热气腾腾的卤肉卷，好塞进外套，隔着棉絮和纸袋温暖我到家前最后一段路程；期待着最后一口下去四溅的汁水，不忘与同行人相谈甚欢。可我早就离开太远了。 也许正如我怀念高中生活一样，若干年后，已经进入工作岗位的我，会机缘巧合之下怀念起大学，怀念一些陪我度过四年的人，怀念我许多晚上用《死亡搁浅》与人相连，怀念每天早上从寝室到教学楼之间的漫漫长路，怀念某一天，我坐在寝室床上，怀念着那个怀念过去的自己。这么长的马拉松里，只有时间是永恒的冠军，我和回忆里的一切都没能跑过它，包括被时间冲淡变得疏离的回忆本身。不知不觉间我就会长大，会变老，会看着我之后一代代年轻人长大，变老。即便如此，我依旧盼望见到那个还能忆起往事，还会义无反顾地出现在一些人身旁的自己。时间流逝本应让人万般不愿，可人生正是这样绝佳的消遣啊，在路途上有那些人为伴，听起来就不再那么寂寞。启程前，将一些时间没能冲刷掉的事情铭记于心的我，或许早已不再害怕前行。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"年度总结","slug":"年度总结","permalink":"https://blog.rachelt.one/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}]},{"title":"一把钥匙一把锁，我的双 PC 工作流","date":"2021-11-09T17:12:36.000Z","path":"articles/my-dual-pc-workflow/","text":"学期初，我终于攒出了人生第一台台机。R7 2700X (Zen+) 和 1060 的配置，时至今日最多中端水平，对于一个 使用忍受 了一年轻薄本的人来说，却足以被称为一次飞跃。约两个月后的今天，我设想的两种极端情况（完全抛弃 Gram &#x2F; 完全依赖 Gram）都没发生，而我则已经摸出了一个适合自己的方案：一把钥匙（LG Gram）对应一把锁（台机）。正式开始之前，先从硬件配置说起吧。 硬件配置 台机 Gram CPU Ryzen 7 2700X i7-1065G7 GPU GTX 1060 Iris G7 RAM 8GB 3200 x2 16GB 2933 x2 屏幕 4K (ppi 183.58) 1080p (ppi 157.35) 如上所示，我并没有给自己攒出一台秒天秒地的 台机空气 ，在 2021 年的今天，我不得不在 配置预算 上做出不少妥协。好在以前从未将这么强悍的配置（即使中端）作为主力，这些妥协并没有影响我的体验，倒很适合我反复考量这两台机器的使用场景与职能。以下是我考量过后的结果： 协同工作文件共享除非使用的是 Apple 全家桶，否则文件传输始终是不可避免的一大障碍。我解决这个障碍的主要工具是 LANDrop ，它提供了无与伦比的局域网内互传体验，使 Android &#x2F; Windows &#x2F; iOS 三个平台传文件变得极为顺手。然而，LANDrop 在 Windows 上偶尔会绑定不了端口，并且传输纯文本很麻烦，因此我还将 Snapdrop 作为另一个方案。它只需要浏览器、即开即用，适合承担较轻的文件 &#x2F; 文本传输工作。除此之外，用 Python 随手跑一个 HTTP server 之类的此前是我的常用解，用于传输文件也足够，只是不方便。 我在 《从本地到云端，我的数据备份方案》 中所述的方案，在双 PC 的情况下对 Gram 依旧适用，Documents 等文件夹仍然会被实时备份到 OneDrive。这对于 Gram 的定位来说无比方便，我更多时候是在图书馆、教室等地方使用 Gram，只要关机前网络连接顺畅，那么大部分文件都无需担心同步问题。同时，我会有意识地将正在撰写的文档保存至 OneDrive，这样便能在全平台随时随地阅读、编辑。 至于台机，由于我在寝室还兼职提供打印服务，台机上存储了各种各样的零散文档，把它们全部传到 OneDrive 浪费空间又占用资源，在我注重备份工作文件的情况下，台机的 Documents 等文件夹没有那么重要，所以我并未采取特殊方案保护它们，只开启了 Windows 自带的内网文件共享， 以便需要的时候台机上的文件可以随时从 Gram 使用。 当然，还有些文件不适合上传至 OneDrive 也不适合手动共享，例如包含了致死量编译中间体和 node_modules 的 Projects。OneDrive 羸弱的自定义特性使备份无比让人脑梗，好在我大部分项目都开源在了 GitHub，提交频繁的情况下并不需要过于担心代码写到一半宕机，但维护两份代码库太耗精力，每次在 Gram 上编辑后还得先 git commit &amp;&amp; git push 再在台机上 git pull 不算优雅，所以我选择了 SyncTrayzor ，一个易上手的 Windows 端 Syncthing 工具，用以在两台 Windows 电脑间共享 Projects 文件夹。利用 Syncthing 的排除文件特性，我能够仅共享所有工程的源代码部分，从而实现迅速、即时的文件同步。 使用 Syncthing 还有一个好处：把 Gram 当「钥匙」成为可能。 代码管理与安全性言归正传，什么是钥匙？什么是锁？ 就我而言，借助更强的性能，主要用于调试、编译的台机是我给自己设下的锁，我 SSH Key 的存放点，诸多账户恢复代码的保存处，被 BitLocker with PIN 锁上的 Gram 则是那把用于解锁自己的钥匙。 所以大部分时候，我会在台机上写作或者写代码。机械键盘过硬的手感和台机不俗（至少和 Gram 比起来）的性能，加上 4K 屏提供的绝佳锐利度，让这一过程比起盯着 Gram 的 1080p 小屏敲打着不知说好还是坏的笔记本键盘来说，满足感高了不止一个档次。当我准备好 git commit &amp;&amp; git push ，Syncthing 已经把源代码同步好了，只须在 Gram 上的 WSL 中定位到对应的目录，将代码上传至云端。 这全程经过了数个只有我本人才能解开的认证步骤，最大化保证了「我是我」。首先，BitLocker with PIN 加密的硬盘，防止了暴力将 SSD 拆出读取数据，也解决了 TPM 明文传输密钥的安全隐患 ；然后，Windows Hello 要求使用指纹或 PIN 才能进入系统，对于电源指纹一体化的 Gram 来说非常方便；最后 WSL 里要求 passphrase 才能使用的 SSH Key、被不同密码保护的 Keybase 和各账户…如果真的有人能够连续突破这几道防线，那个人只能是我吧。 由于对安全性的高要求，加上目前的 Gram 几乎没有性能压力，我完全开启了 基于虚拟化的安全性保护virtualization-based security, VBS ，手动启用了 内存完整性Memory integrity 等 ，就是此前在 Windows 11 上被发现会「影响系统性能」并因此被口诛笔伐的那系列功能。虽说无法 100% 保证设备安全，很多时候也像是无用功（ 「一普通用户这么在意安全干嘛？怕不是藏了不可告人的东西」 ），能够降低风险的事情总归不坏。 我想过在台机上启用更激进的安全策略，可惜 2000 系及以前的 Ryzen 处理器不在 Windows 官方的支持列表里，不确定是 Zen 2 加入的新魔法还是单纯 Zen+ 及更早产品的性能过于拉胯，总之 VBS 在这种情况下较明显地影响到了用户体验，和 Windows 11 的拉胯相辅相成，以至于我为了彻底禁用 Device Guard、Credential Guard 和可能随着 Hyper-V 一同启用的 HVCIHypervisor-Protected Code Integrity 等功能，连着 secure boot 都一起干掉了。挺无奈的。 娱乐 也是工作的一部分！如果让我在这两台设备中选出最佳内容消费工具，那我大概会毫不犹豫地选择 iPad Pro。它具有一些我这两台设备都不具备的特征：长续航、无实体键盘、触摸、屏幕比例方正等，还能夹在床边（依赖京造的长臂夹， 不推荐 ），目前不管是接上 USB DAC 听歌、玩音游还是逛 B 站、用 Kindle app 读书和 RSS feed 都是我的第一选择。 平时写作、开发，或者哪怕单纯开着电脑坐在桌边写作业，BGM 都很有必要，这时台机上的 Windows 11 红利： WSAWindows Subsystem for Android 成了不可或缺的一部分，因为 Apple Music 网页端 和 iTunes 都一个德性：难用，Android 端的 Apple Music 客户端完美地解决了这一问题。Gram 则更多使用 Foobar2000 播放我从弃置的前端上转移过来的本地音乐，它们包含了一些游戏的解包 BGM、电台曲目等难以在流媒体平台找到或加入播放列表的部分，以及一些个人收藏、自购的专辑。 无所谓的有两个：除了音游，甚至连音游在内的所有游戏都由台机负责解决，视频消费…我没有重温电影或剧集，甚至没有看它们的习惯，更不可能收藏了。我对视频消费的最高追求是在 YouTube 或者主要是 B 站看码率只有 3Mbps 的 1080p。无所谓了。 不过总的来说，在这一方面，毕竟我的娱乐需求偏向「随便」，不刻意，所以也不在意。听歌时，大部分情况下，我会随便抓起离我最近的耳机，使用离我最近的随便什么设备，随便听点收藏过而且没有厌倦的曲目。游戏时，作为自闭单机玩家，就…挺随便的，大部分时候没人管我。视频嘛那更随便了，B 站动态过一遍，把感兴趣的加进「稍后再看」然后随便抽空看完，我随便的娱乐需求就解决了。最不随便的居然是 RSS feed，因为 KindleEar 抓取和 Kindle 推送的限制，我被迫精挑细选，结果倒也不错。 聊以作结目前，我在日常使用中需要两台设备协同的部分，可能连带着使用习惯等等，到这里已介绍完毕。篇幅较短，还请见谅。我还考虑过很多其它的方案来扩展这一体系，例如搭建一台 NAS 作为下载机、存档机，使用闲置的 SSD 安装 Linux 等，但它们有的考验我的预算，还有的配置完成后也只会有吃灰的结局，最终我都没有实行。总之，对于现在的我而言，如此就是最优解了。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"数据","slug":"数据","permalink":"https://blog.rachelt.one/tags/%E6%95%B0%E6%8D%AE/"},{"name":"记录","slug":"记录","permalink":"https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"使用 Indirect Display 虚拟显示器，全屏 Moonlight 串流","date":"2021-10-18T11:17:32.000Z","path":"articles/fake-display-for-moonlight/","text":"前几天终于用上了极为先进的 Moonlight，体验到了在移动端低延迟畅玩 3A 大作（主要是躺在床上推《魔夜》），却也遇到了一些不爽的地方，比如目前移动端设备千奇百怪，常规电脑渲染的 16:9 的画面，几乎不能在 2021 年的移动设备上铺满屏幕。怎么办呢？极客湾选择把用不上的输出接口与用不上的显示器接口连接起来，调整这个不存在的显示器的大小；市面上也有很多 HDMI 诱骗器，几十甚至十几块就能解决问题；我在看过蚊子大佬的博客后，选择动手折腾一个 Indirect Display，试试在不依赖外部设备的情况下，虚拟出第二个显示器用来串流。 因为不同设备的屏幕分辨率、刷新率不尽相同，使用 Indirect Display 还得信任签名时使用的证书，因此本文不会提供编译好的版本。不过编译并不复杂，具备计算机基础知识即可。 环境准备前提条件当然是一台运行 Windows 10 的电脑。都这年头了，能用 Moonlight 串流这个条件不可能不满足吧……？ 接下来安装的是 Visual Studio 2019 社区版 。打开安装程序，勾选「使用 C++ 的桌面开发」这个工作负荷。除此之外，还应当在「单个组件」里勾选你电脑指令集架构对应的，用来缓解 Spectre 影响的编译库，使用英文时它通常就在某个已经勾选的 MSVC 的下方，使用中文时搜索「MSVC 最新」可以很快找到。例如，在我的电脑上，默认勾选了 MSVC…x64/x86 build tools (Latest) ，那么只要再勾选上 MSVC…x64/x86 Spectre-mitigated libs (Latest) ，如图所示。 如果你安装 Visual Studio 的时候没有安装 Spectre 缓解库，可以打开安装程序补上，或在编译时无视 Spectre 警告和安全风险，尽管我个人不推荐这么做。 等待安装程序下载 Visual Studio 的这段时间，可以用来获取 GitHub 上 微软官方提供的 Indirect Display 示范程序 。对 Git 和 Subversion 熟悉的话随意，不熟悉可以点击 GitHub - IddSample.zip 或者 备用镜像 - IddSample.zip 下载打包好的 zip 文件。它只有 20KB 大，下载下来后解压到任意一个能找到的地方就行。 Visual Studio 安装完毕后，我们还缺了编译驱动程序所需的 Windows 驱动程序工具包 (WDK)。官方提供的版本已经更新到了 Windows 11，跟着官方步骤走不会出问题，但 Windows 11 的软件开发工具包（SDK）尚未在 Visual Studio 中提供，得单独下载，而且还没有本地镜像…… 其他 WDK 下载 里的 适用于 Windows 10 版本 2004 的 WDK 就能够满足需求了。WDK 安装完毕之后会提示安装 Visual Studio 扩展，保持默认设置。 代码改动打开 Visual Studio，点击「打开项目或解决方案」，找到存放代码的地方，打开 IddSampleDriver.sln ，Visual Studio 会自动加载整个项目。接着，在右边「解决方案资源管理器」里，展开 IddSampleDriver - Source Files ，打开 Driver.cpp ，先不管 Driver.tmh 的报错（生成的时候会自动解决），改动下面几个地方： Line 27static constexpr DWORD IDD_SAMPLE_MONITOR_COUNT = 3; 这一行意思是创建的虚拟显示器数量。默认是 3 个，按需修改吧。 Line 52~54&#123; 2560, 1440, 144 &#125;, &#123; 1920, 1080, 60 &#125;, &#123; 1024, 768, 60 &#125;, 这里就是虚拟显示器的显示模式了，三个数字分别代表了宽度、高度和刷新率。可以直接修改已有的数字，如果需要更多显示模式，得将 Header Files 里 Driver.h line 42 的 szModeList 改为相对应的数值（默认是 3）。 Line 58~75这十几行定义了另一个虚拟显示器，用不上可以直接删除。 Line 772~781你应该能够看到数十行像这样的代码： TargetModes.push_back(CreateIddCxTargetMode(3840, 2160, 60)); 这些是驱动向 Windows 汇报的显示模式，三个数字也是宽度、高度和刷新率，它们会出现在显示适配器的「列出所有模式」中。在类似代码后新建一行，把 line 52~54 中自定义的内容以类似格式添加在此。 编译，安装！修改完毕，在上方把 Debug 改成 Release，选择你电脑的指令集架构（一般是 x64 ），再打开「生成」菜单，点击生成解决方案。等待进度条走完，出现类似 生成: 成功 2 个，失败 0 个，最新 0 个，跳过 0 个 的输出后，编译好的驱动就已经在 IddSampleDriver.sln 所在的文件夹中，指令集架构对应的文件夹里了（例如 x64 在 x64 文件夹下）。 为了顺利安装上自制驱动，首先要信任自动生成的证书。打开 IddSampleDriver.cer ，点击「安装证书」，「本地计算机」，「将所有的证书都放入下列存储」然后「受信任的根证书颁发机构」，安装。安装完毕后，关闭证书再打开，会显示这个证书已经受信任。 接下来就可以安装设备了。打开「设备管理器」，随便选一项，打开上方「操作」里的「添加过时硬件」，手动安装，一路下一步到「从磁盘安装」，定位到 IddSampleDriver 里面的 IddSampleDriver.inf （外面 Release 文件夹里那个是没签名的装不上），安装。如果一切顺利，打开显示设置就能看到添加的显示器了！卸载也很简单，从设备管理器中移除设备完事。 当然，在我的试验中，Windows 这个特性的稳定性还…不够让人满意，可能会碰到设备管理器中出现了 IddSampleDriver Device 却找不到第二个显示器的情况，此时你也可以试着以管理员身份运行 Release 文件夹中的 IddSampleApp.exe 或者其它可能行得通的办法，只要能够识别一次，以后就都不会出现问题。Enjoy！ 如果不巧发生问题… 这个问题最常见的原因是签名工具签名时使用当前时间（中国标准时间是 UTC+8），验证时使用 UTC 时间，导致 0:00~8:00 期间无法以默认设置签名（无法签发未来的证书），通过修改签名设置可以解决这一问题，不过最优解是先睡一觉再继续， 早睡早起身体好！ 那么大个 Access is denied 告诉我们，签名工具没有驱动的访问权限（例如丢进了某个磁盘的根目录），将项目文件夹整个移动到用户文件夹（例如桌面）后重新编译就能解决。磁盘已满也会出现这个问题，试试清理一下？ 结果如何？在我尝试使用这个显示器串流时，遇到了一点问题…Moonlight 无法选择串流的显示器，会抓取默认显示器的视频流，我们看不到创建的这个显示器的画面，要把这个显示器换成默认几乎不可能。那么如果像极客湾一样把原有的线拔掉呢？ 就…这样了。低得离谱的帧率、码率（实际感受比这还要卡）和高得离谱的输入延迟兼具，《地平线 4》就算了，连《魔夜》主菜单都卡，显卡的性能被直接腰斩（未测试…甚至全靠 CPU 也有可能？），这就是 HDMI 诱骗器好用的原因吧。不管如何，如果你有类似的需求并且使用的软件支持选择显示器，Indirect Display 的方案或许还挺值得一试的。 参考资料 虚拟显示器终极解决方案 IndirectDisplay | https://qwq.moe/ultimate-virtual-monitor-solution-indirect-display How to run Parsec without monitor? Here’s a virtual monitor solution for you (Indirect Display) | https://archeb.medium.com/how-to-run-parsec-without-monitor-heres-a-virtual-monitor-solution-for-you-indirect-display-ecba5173b86a Indirect display driver model overview - Windows drivers | Microsoft Docs | https://docs.microsoft.com/en-us/windows-hardware/drivers/display/indirect-display-driver-model-overview Download the Windows Driver Kit (WDK) - Windows drivers | Microsoft Docs | https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk visual studio 2012 - Int2Cat - DriverVer set to incorrect date - Stack Overflow | https://stackoverflow.com/questions/14148500/int2cat-driverver-set-to-incorrect-date","tags":[{"name":"串流","slug":"串流","permalink":"https://blog.rachelt.one/tags/%E4%B8%B2%E6%B5%81/"},{"name":"应用","slug":"应用","permalink":"https://blog.rachelt.one/tags/%E5%BA%94%E7%94%A8/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.rachelt.one/tags/Windows/"},{"name":"Moonlight","slug":"Moonlight","permalink":"https://blog.rachelt.one/tags/Moonlight/"}]},{"title":"STFW.info 现已正式迁移至 RachelT.one！","date":"2021-10-10T14:12:21.000Z","path":"articles/migrating-from-stfw-info-to-rachelt-one/","text":"Rachel 建站以来的第一次域名迁移已完成！从原来一时兴起注册的 Search The F**king Web 到 Rachel T &#x2F; Tone，希望能够使网站更独一无二！ STFW.info 将在 2022&#x2F;04&#x2F;22 过期，在这期间，对原域名已迁移部分的访问将被重定向至 RachelT.one 对应的子域名，无需迁移部分保持不变；过期后，对 STFW.info 的访问将不再由我控制。若您收藏了过往文章或订阅了我博客的 RSS，建议在旧域名到期前尽快更新。我对域名迁移导致的不便深表歉意，欢迎您随时通过 RachelT.one 中的联系方式向我反馈迁移后出现的问题。 说到这里，博客已经蒙尘半年，感谢您在我不辞而别如此久后仍保持对这个微不足道的私人博客的关注。近期可能会有新文章，但没有对技术的深入探讨；此前承诺的 Nuklear 介绍因太过久远积重难返，发布的可能性较低，即使发布也很难达到理想水准，非常抱歉。我个人已经许久没有接触到前沿技术，甚至许久没有写过代码，历史项目的维护也难以为继，还请谅解。大二以来，作为一名高中化学及格次数屈指可数的化工专业学生，专业课程和每周六天的排课让我喘不过气，更重要的是我不知道是否还有继续发展技术水平的必要，然后就在日复一日的生活中逐渐懒散。很遗憾、很让人失望，半年之后，我还被困在一团白茫茫的雾里，摸不出前进的方向。但是如果我不知道，又有谁能知道呢？ 迁移的域名列表： 原域名 新域名 me.stfw.info rachelt.one blog.stfw.info blog.rachelt.one","tags":[{"name":"公告","slug":"公告","permalink":"https://blog.rachelt.one/tags/%E5%85%AC%E5%91%8A/"}]},{"title":"迎接又一次意难平","date":"2021-04-21T17:16:28.000Z","path":"articles/facing-another-i-could-have-had-it/","text":"在我从面试教室出来的时候，我从来没有想过，第二天迎接我的是拒绝。就像我也从来没有想过，原来生活真的是一盒巧克力，昨天吃到的还夹着牛奶的香味，今天就变成了 100% 的黑巧，甚至连可可香味都没有。 和我经历过的那么多重要节点一样，在结果揭晓的那一瞬间，我的内心平静似水。和我经历过的那么多重要节点一样，它留下了又一次深刻的意难平。我释然了吗？我不知道。 It happens.如何描述呢？和一个孩子不讲道理地把所有东西都砸得稀巴烂一样，我原来初具雏形的人生规划，也被一个没有我名字的名单砸得稀巴烂。 这或许并不全是坏事。推翻一切从头再来，意味着我有了全新的机遇和全新的选择，我可以追求更不一样的发展目标，可以朝着更不一样的自己前进。不过说实话，我也不知道那都可以是什么。从我得到消息的那一刻起，我的大脑一直一片空白，好像一直在想些什么，却什么都没想出来。让这样的我马上决定未来，未免太勉强我自己了。 曾几何时，我知道我可以不用担心我羸弱的化学知识，反正不久以后它们都会变成选修课学分里干巴巴的数字，随着时间风化；我知道我马上就能光明正大地坐在属于我的实验室工位上，和同专业的人一起努力；我知道我可以凭借我已经拥有和即将拥有的专业知识完成学业，找到一份比较体面的工作，成为一个我一直想成为的人。 但现在，我什么都不知道了。如果一定要为今天找一个主题，那它一定是「我不知道」。仿佛宕机一般，我再也不能好好思考问题，再也不能顺畅地表达自己。我甚至还没有想透到底发生了什么，只知道我下个学期仍然要做化学实验，仍然要学有机化学、物理化学；只知道浑浑噩噩快要到头的这一年，被无限期地延长；只知道我一直以来对浑浑噩噩大学四年的恐惧，可能注定要成真，而我还浑然不觉。 此时浑然不觉的我，真的可以就这样从容接受自己、接受现实吗？还是说，我会在某一刻突然清醒，然后抱头痛哭？如果说海啸往往晚于地震，那地震已经来了，海啸呢？ 海啸尚未降临，选择已经将我淹没。我不知道我该做什么了。我应该继续尝试转专业？尽早安定在化工类？跨专业考研？或者……我真的如我所想的，那么热爱着 Computer Science，以至于需要消耗那么多东西，来为我的热爱陪葬吗？ 一直以来，我秉持着「躺平等死」的态度逃避问题，想把一切留到最后一刻再解决。一直以来，我都知道，我总会无处可逃。在大半个学期过去，我好像还什么都没做到时，我突然也什么都不知道了。 我终究还是期盼着万事顺意，期盼着让未来的自己活得有模有样，期盼着在纷扰繁杂中以我的步调不断向前。我终究不是能看淡的人。 如果我是那样的人就好了。 在久远往昔的展望中，我也曾顽强地说出「不再后悔」。时至今日，在踽踽独行的我真的懈怠、逃避了那么多之后，我也不知道我后不后悔了。 It happened.这不是我人生中第一次意难平，也不可能是最后一次。我所知道的是，没有人说得清特定的事对特定的人会产生怎样的影响。我们都没办法预知微小扰动带来的未来。 几年前某个夏日的下午，我落榜了高中的自主招生考试，在座位上哭得稀里哗啦。今天再来回忆，也许当时的成绩不佳从高中一直注定到今天，也许当时的成绩不佳帮我回避了更多的遗憾，也许当时的成绩不佳让我认识了更好的人、行过了更好的路。这些都不重要，重要的是，当我今天回过头凝望我的人生，这一次的难受，也不过是微不足道的曲折。它并没有阻止我在我的高中度过三年。 也是在几年前某个夏日，我在百般纠结甚至差一点就放弃机会的情况下，最终还是向模拟联合国提交了申请表。我绝对想不到，当时这小小的举动，引发了一系列的连锁反应，戏剧性地改变了我整个高中甚至整个人生的轨迹。 如果转专业失利是我大学碰到的第一个不如意，它又会带来什么？我不知道，我也不可能知道。人都是走一步看一步的嘛。 去年这个时候的我对怀念高中生活的大学生嗤之以鼻，今年这个时候的我不争气地希望那段混着蝉鸣的回忆从未终结。在未来真正到来之前，一切都是未知数。 而我祈祷着明天更好的太阳，祈祷着无数个明天的回望中，我还以不让自己后悔的姿态活着。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"从本地到云端，我的数据备份方案","date":"2021-04-10T01:00:23.000Z","path":"articles/my-way-of-backing-up/","text":"本文是一篇小短文，以电脑故障为契机，我探索了常见的、无需自备独立服务端的备份方案，并将权衡利弊后我最终采取的方案及部分思考记录在此。 我主力电脑在 2021 年初发生了数次故障，失去唯一的工作、娱乐中枢令人十分难受，更何况中枢内还保存着许多对我而言独一无二的珍贵数据。自那之后我才知道，我们往往过度相信我们依赖的设备，往往在失去数据后才意识到它们的重要性。 事实上，任何设备都有寿命周期。我们身边电子设备搭载的、用于存储数据的闪存，只能完好无缺地活过数百或数千次完全写入，往上就会慢慢入土。这很长，大部分用户很难让它报废，可是总有万一。更何况，大部分时候影响数据读写的，不一定是数据存储本身。举个例子，电池过放。只要让锂离子电池吃灰一年半载，再次翻出来时它就可能因为电压过低拒绝充电，甚至彻底告别人世。 不管哪方面出问题，一旦危及到数据，那都不是小问题。有谁希望自己珍贵的个人文件，比如写到一半的策划书、没来得及剪辑的视频、旧手机上存着的照片等等在某一天突然离自己而去呢？云端备份、存储是个不错的选择，但完善的数据备份绝不能只有云端。本文大致介绍了一些我使用的工具，主要面向 Windows &#x2F; Linux 与 Android，也可能包含面向 Apple 大家族的内容。总之，从云端备份开始吧。 云端需要说明的是，本文提及的所有云端服务，几乎都可以用同类竞品代替，我的选择主要出于个人喜好，尤其是依赖的生态圈。尽管我的选择存在种种缺陷，考虑到首要目的是最小的精力开销备份最多的数据，还请不要介意，也欢迎提出更多建议。 Google Photos我主要照片来源为主力 Android 设备。凭借与 Google 生态的无缝融合，拍摄后十秒内照片基本已备份完毕，可以在所有登陆了 Google 账号的设备上访问。 当然不止这些。考虑到 6 月开始 所有照片都会占用云端存储空间 ，我把吃灰的初代 Pixel XL 翻了出来，让它重新派上了用场。我在两台设备上安装了 Syncthing ，把照片文件夹从主力机共享给 Pixel，然后使用 Magisk 模块 Advanced Charging Controller (ACC) 把 Pixel 最大充电量限制到 80%，插上电扔一边就完事了。这样，只要我一连上 Wi-Fi，所有新照片都会自动同步到 Pixel，接着使用无限云端存储备份原图，最大限度保证了图片的安全。此外，我还利用 Syncthing 的 仅发送 &#x2F; 仅接收send only &#x2F; receive only 模式，仅将主力机的照片发送至 Pixel，这样当 Pixel 的 32 GB 存储不够用时，我随时都可以使用 Google Photos 的清理本地文件功能，留出更多的空间给新的照片。 这样做的缺陷也很明显。首先，照片备份完全依赖 Google，万一某一天 Google 彻底无法访问，或者云端存储耗尽，或者 Google Photos 停止服务，我数年攒下的回忆就会消失；其次，Pixel 已发布四年有余，尽管我相信 Google 为它配备了最好的硬件，一旦它的闪存因为频繁大量碎片读写而报废，那照片备份就会进入倒计时；再就是，每次照片备份都会把同样的文件上传两次（尚未测试主力机关闭上传时能否更新照片库），我颇为担心额外的流量开销；而且 Google Photos 偶尔会把同一张照片当两张存，删哪张都不对劲（删除压缩版本：主力机上原图被带着一起删掉；删除原图版本：云端只保留压缩版）。因此，照片备份绝不能只有 Google Photos，还得带上后面将要提到的 rsync 。 OneDriveOneDrive 无疑是 Windows 上文件备份首选，本文的这一部分就是依赖 OneDrive 的多端同步完成的。它在国内的速度出人意料地不错，它在上传大文件时没能跑满带宽，但碎片文件的同步做得很棒，把文件复制进备份文件夹后就会马上开始备份，几乎感知不到延迟。 这当然只是一小部分。OneDrive 更大的优势在于它深度整合进了 Windows 10，只要登录 Microsoft 账户就会开始同步文件，并且还能够傻瓜式地将「文档」、「桌面」、「图片」这三个文件夹一键移动进备份目录中，再也不用手动上传。方便吗？真的很方便，把「文档」移入 OneDrive 文件夹后我再也不需要在 Office 内手动摁下「保存」，也不需要担心游戏存档没同步上 Steam 云了。 然而，让人头疼的就是，「文档」除了正儿八经的文档之外，还被很多应用当作垃圾站，简直就是 Android 的内置存储。当我点开 OneDrive 应用一看，发现图片列表里塞满了伊比利亚的海报时，内心也挺复杂的。OneDrive 只能同步单一文件夹的所有内容，不支持多文件夹、不支持排除文件夹，也是个问题。例如，QQ、TIM 会把好几百 MB 大的数据库存在「文档」下的私有目录中，每次退出都会重新上传，只能在 QQ &#x2F; TIM 的设置内改变数据存储目录解决，更何况很多应用的数据存放目录根本就没法改，花费大量上传带宽可能还没能备份完所有文件，别提还有个叫 node_modules 的毒瘤了，它直接打消了我开发目录放「文档」下的想法。 方便是方便了，问题却迟迟难以解决，因此我其实一直都想把 OneDrive 换成 Google Drive，考虑到它不能在我所有的设备上顺畅使用，我至今仍未迈出第一步。各位如果觉得有不错的备份服务，也可以在评论区留下推荐。总之，OneDrive 的拉胯是本地备份刚需的一大原因。 其他Android 端极其全面的 Google 备份能够帮我解决大部分需求，从联系人到 Wi-Fi 密码、应用数据，只要我还在 Google 的生态圈中，它们就会在所有接入 Google 的设备上可用。不得不承认的是，这带来了不小的隐私隐患，毕竟天下乌鸦一般黑，作为一个中国大陆人，比起吃相更难看的国产大厂和 iCloud（由云上贵州运营），还是 Google 比较靠谱。 说到 iCloud，想必这是大部分 iOS 用户的首选。在 iOS 上，它也确实提供了比 Android 上 Google 服务更优的体验。Google 有的它一个不差，Google 没有的（点名 iMessage）它做得相当出色。尽管如此，考虑到那个大大的「云上贵州」以及 iOS 对我而言用来养蛊（指国产应用）的本质，我一直不愿意把所有数据全部交给 iCloud。如果你重度依赖 iOS &#x2F; macOS，iCloud 应当足够满足云端备份需求。 本地云端服务大部分都能找到替代，本地应用就不一定了，比如下面的第一个。 钛备份Titanium Backup热爱折腾的 Android 用户应该都听说过「钛备份」的大名，Android 2.X 时代诞生的它一直走到今天。虽然界面「返璞归真」「不忘初心」，功能却鲜有同类能望其项背。除了常规备份还原，它还能把还原的应用安装来源恢复成 Google Play Store，实现照常在 Play Store 上安装更新。这项功能的缺失，是阻碍我切换到其它界面更现代的备份应用的主要原因。 我目前的设定是每周日凌晨自动备份新安装的 &#x2F; 新版本的用户应用，每周二、周五凌晨自动备份修改过的用户数据，以确保我需要的时候能随时调出备份。只保存在本地也不太靠谱，钛备份能够帮我把文件自动上传到 Google Drive &#x2F; Box &#x2F; Dropbox，这应该很好用，所以我选择下文的 rsync-time-backup 。 rsync-time-backuprsync 是一个方便的文件同步命令行工具， rsync-time-backup 大大提高了使用 rsync 备份文件的便利性。只需要输入源文件夹和目标文件夹， rsync-time-backup 就会自动把文件以类似 macOS 上「时光机Time Machine」的方式备份，而且可以在任意平台任意设备上备份、恢复。 依赖 Windows Subsystem for LinuxWSL 1 以及 Termux，我一举解决了 Windows 和 Android 双端的文件同步问题。WSL1 上只需要 sudo mkdir /mnt/drive/ &amp;&amp; sudo mount -t drvfs &lt;盘符:&gt; /mnt/drive/ 即可将存储盘手动挂载到可访问目录 /mnt/drive/ 下，接着就可以从 /mnt/c/ 把文件备份过去。Android 则更加方便，不需要手动挂载，直接使用 Termux 访问 /mnt/ 下的存储盘就行（可能需要一些权限，而且不一定支持 NTFS）。rsync-time-backup 同时还支持连接远程服务器，如果有条件搭建 NAS 或拥有带 USB 口的路由器，都不再需要手动将备份盘在多设备间换来换去。 其他目前我本地备份文件的传输均通过 rsync-time-backup 完成，所以……也许这篇小短文可以到此为止？那就在这一部分说说以上工具同类们的使用感受吧。 钛备份这么多年来一直被各种备份工具「追平」甚至「超越」，可它们最多也只能备份和还原数据，距离替代钛备份还有相当长的距离，以至于当我实在忍不了钛备份的时候，除了零星几个 Migrate 和 Swift Backup ，大部分人都劝我接着忍下去。尽管如此，如果你没有那么复杂的需求，你也完全可以使用这两个工具应急。 我并非 macOS 用户不好评价，Windows 10 上自带的类似功能：「文件历史记录」我还是能吐槽的。它提供了（至少比命令行直观）的图形界面，默认备份用户目录，可以手动指定文件夹，可以备份到网络位置，插上存储盘后每一小时自动备份一次，听起来无比美好，如果可以忽略性能极其糟糕的「设置」应用，并且不在意备份文件不能在其他设备上使用的话。我的电脑在维修点被重置了系统，Windows 便认为这是两台电脑，拒绝为我恢复文件，哪怕是根本和设备 ID 或者当前用户无关的文件夹都不行，最后只能手动把文件复制回来，用 PowerToys Rename 通过正则表达式匹配批量去掉了每个文件后的时间戳，再全部取消只读，才勉强让大部分应用、文件恢复正常（还有几个死活好不了）。尽管它方便，私以为还是 rsync-time-backup 靠谱。 结语数据备份工具当然不止上文提及的这些。如果你拥有小主机甚至 NAS，数据备份会无比方便；如果没有，你也可以像我这样探索适合自己的备份方案。不管怎样，最重要的都是数据本身。追求更简单的数据备份方式当然无可非议，但如果代价是带来更大的安全风险，我还是认为需要再留个后手（例如我备份文件一般存储在 U 盘，最珍贵的数据会在可靠的机械硬盘、两个云端存储都保留一份）。 希望这篇文章能为你带来一些启发。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"数据","slug":"数据","permalink":"https://blog.rachelt.one/tags/%E6%95%B0%E6%8D%AE/"},{"name":"记录","slug":"记录","permalink":"https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"},{"name":"备份","slug":"备份","permalink":"https://blog.rachelt.one/tags/%E5%A4%87%E4%BB%BD/"}]},{"title":"为什么我不推荐 LG Gram","date":"2021-04-06T14:08:28.000Z","path":"articles/why-not-lg-gram/","text":"这篇文章基本成形于我 LG Gram 送至北京售后点维修的十天。这十天里，我碰不到 Steam，写不了大型工程，没有 Typora 甚至连 Markdown 都用得糟心，唯一能让我重温代码的居然是跑在 Termux 上的 code-server 。 但这次硬件故障本身却并不是我不推荐 Gram 的原因。倒不如说，这次硬件故障让我更加坚定了我对轻薄本的执着，以至于刚出故障时我就已经决定，下一台电脑就算不是 Gram 也得是同类竞品（真的有吗）。 在此期间，我也想过要把 Gram 安利给身边的所有人，包括正在阅读本文的你。尽管如此，细细思索后我最终还是觉得，Gram 有它的目标人群，而它不一定是你。因此，不管我有多爱 Gram，我还是要讲讲，为什么我不推荐 LG Gram。 我个人使用的 LG Gram 型号为 14Z90N，i7-1065G7，8 GB DDR4 3200 MHz（后加同型号内存扩至 16 GB 双通道），512 GB PM981a，Intel AX201 网卡，14 英寸 LG 自家屏幕，72 Wh 自家电池，实测重 980 g。 太长不看就像上面说的那样，我真无法向人掏心窝子地推荐 LG Gram。 Gram 的拉胯，绝对不只是哪个方面出了问题，而是方方面面都有问题。它的 性能 锁死到了最高 15W 的功耗，使用单热管单风扇企图为 i7 散热 ，并且 屏幕分辨率和亮度 、 键盘 手感及背光都不尽如人意，还有 扬声器 破音、音量过小……这些 硬件 缺陷， 软件 部分同样兼容性差、不能让人放心， 售后服务 搅屎棍当得还颇有特色。 如果你想听听详细的吐槽（约 5000 字），那么请继续往下翻。否则，您可以直接退出，或者跳到我的 总结 。 硬件性能这大概是 Gram 被诟病得最多，也是对日常使用影响最大的一个问题了。它主要的性能限制并非处理器（正相反它搭载的可是实打实的 10 代顶级移动端 i7），而是为了续航和散热对功耗作出的激进限制。毕竟是来自牙膏厂的 x86-64 架构，远做不到 Apple M1 那种级别的能耗比，15W 的功率限制 (PL1) 让 Gram 在持续高性能需求面前捉襟见肘，尤其是这 15W 还要同时支持 CPU 和 GPU。据一些测试，i7-1065G7 配上至少 40W 的供电才能如鱼得水，15W 嘛…它简直就像是被挂在架子上晒干的咸鱼。 如果很难从数字感受 15W 有多低的话，这里是一些实际使用体验。 从打开 DaVinci Resolve 的那一刻开始，掉帧和卡顿就像不断循环的 BGM，以最大音量反复播放，连剪个音频都颇为费劲。当我把 4K H.265 的素材导入进去后，它直接「乐死了」，预览区域动弹不得。 这对轻薄本要求确实太高了，讲点更实际的，比如外接显示器。4K 分辨率下，虽然日常操作还算流畅只是偶有掉帧，但当我打开 B 站看着视频和弹幕一会儿慢下来一会儿突然加速时…我觉得这方面我还是更喜欢用移动设备。 游戏性能更不用说。如果你晕 3D，那 Gram 能玩到你吐；如果你不晕 3D，用 Gram 就能体验晕 3D 了。往好处想，至少阻断了一大笔开销不是？不过说实话，画质调到勉强能看清，在 Cyberpunk 2077 上能跑到 7 FPS 也很对得住这颗处理器了。 我也不是没有尝试过绕过功耗墙，但迄今为止所有的尝试均以失败告终，更何况性能限制并非只有功耗墙。我能做的就是在 BIOS 里降低 50 mV 左右的电压，尽可能降低热量对性能的影响。 散热单热管单风扇压 i7，你怕了吗？我怕了。开个机 CPU 温度 80 起跳 100 封顶，风扇转速拉满，听起来就像是企图用它玩游戏的人无助的哀嚎。处理只是需要稍微高点性能的任务，Gram 的 CD 面都会很快散发出比较明显的热感，以至于我怀疑，这次送修很有可能是长期高温导致的虚焊。 不仅如此。Gram 底面近乎无孔的设计（只有扬声器，螺丝藏在脚垫下面）严重加剧了散热的难度。它的风扇开口挪到了显示屏下方转轴处，避免放在软表面上导致风口被堵住的同时加大了散热难度，在下面摆个散热底座也收效甚微。 热量排不出去的结果就是，哪怕绕过了功耗墙，也会很快撞上温度墙而降频，性能暴跌。这也正是我手动调低电压的原因。功耗墙绕不过了，减缓一点撞上温度墙的速度总没问题吧？ 问题挺大的，至少感知不强是真的。 屏幕分辨率和亮度屏幕是 LG Gram 的一大优势，但它还是存在一些小小的问题，比如，只有 1080P（16 寸及以上不是），和峰值亮度不够。 前者不用说了，正是为了弥补这块分辨率不够的屏幕我才会考虑买个 4K 显示器用来写代码。对比同学的 Redmibook Pro 15，1080P 的字体显示即使是 14 寸 + 已经用上了所有优化方案的情况下都还有掩盖不住的发虚。 后者嘛，室内无法感觉到明显的差异，我也一直觉得没啥问题，直到我上次在高铁上顶着阳光用它码字，屏幕暗到只能勉强看清楚我写了啥。如果是游戏本还好，没有室外使用场景，可这是专注移动办公的轻薄本，我也只能含泪吐槽了。 质感我身边所有人第一次接触 Gram 的时候，结合它极低的体重，无一例外都觉得它的外壳是塑料。 其实它就是塑料没想到吧嘿嘿嘿。 解释得多了就非常、非常让人懒得再解释下去了。它的外壳真的是金属，而且如果你不小心撞掉一小块漆，USB-C 口插着电把手放到那块掉漆的地方它还能电你。它只是长得很塑料，内里还是挺扎实的。 但内里扎实有什么用？看到 Gram 不一定能摸到 Gram，看着拉胯那还是拉胯。 扬声器宣传图上说的 DTS:X Ultra 听起来很不错，实际使用感受让人决定把它直接关掉。 这可能并不是 DTS 的错，毕竟 DTS 做得再好，硬件上的鸿沟终究是软件无法弥补的。Gram 双扬声器的设计，没能节约多少内部空间（那个扬声器大小再塞一对进去都还绰绰有余），还成为了设计的一大败笔。就算一个人在安静的环境下用电脑，我都不会想打开 Gram 的扬声器。 它拉胯到什么程度呢？哪怕声音只开到 50% 都还是能听到破音，有时我会把声音拉到 100% 将 QQ 电话转接到外放，本就不高的通话质量经过破音这一折腾，简直就是耳朵堕胎的灾难。 延迟不知道什么原因，我手上的这款 Gram 有比较明显的延迟。平常使用感觉不出来，但一旦操作被简化到触控板&#x2F;键盘轻点，它诡异的延迟就暴露无遗。Montaro 不是音游还能忍，Muse Dash 我用 Gram 玩过一把之后转手就申请了退款。 至于是什么原因，我到现在也还没有摸清楚，在我外接显示器和键鼠、关闭所有后处理效果后，这一症状没有任何缓解。值得一提的是，接上显卡坞后似乎没有那么严重了（尚未严格测试），可能是 Iris 核显带来的问题？目前我已经打消了在 PC 上玩音游的念头，也就无从查证了。 键盘Gram 键盘的手感也是长久以来一直被人诟病的点之一，尤其是它软绵绵的回弹。在手感优异的笔记本键盘大行其道的今天，很多时候友商产品线里 Gram 一半价格的产品甚至我写到这里时用的罗技 K380 就足以将 Gram 的手感按在地上摩擦。 有个不知算不算问题的问题，鉴于 Gram 外壳用料偏软，键盘面用力按压就会有比较明显的下陷。当然，会下陷的只有一小块部位，一般敲键盘也远远达不到能让它下陷的力度，这就见仁见智了。 当然，Gram 的键盘还是有点优势的，比如键程。它的键程是我摸过所有笔记本里最长的，哪怕和游戏本相比也不遑多让。这又是一个见仁见智的问题：我觉得它一定程度上让手感好了一点，也正因如此一直对它的手感持中立态度，不过也有人认为，过长的键程配合过软的回弹，手感烂上加烂。 除此之外，Gram 的键位争议不小，不过在 2020 14 寸款上似乎没有体现，至少方向键是很正常的等大的小按键，Fn 功能左右映射到 Home 和 End，上下映射到 Page Up 和 Down 也很贴心。 再来说说背光。它的背光峰值亮度就跟屏幕峰值亮度一样拉胯，尤其是键盘是白色的背光也是白色的，打开背光后外部稍微有点光，整个键盘就会连个字母都看不见，能派上用场的场景就只有伸手不见五指的深夜一个人码字。 深夜一个人码字也就算了，至少有点使用场景，更让人无法忍受的是，它的背光不仅亮度低还漏光，亮得还不均匀。有几个字母不管怎么看就是比别的字母亮，而当从侧面看去的时候，缝里透出的光，证明了按键的亮度确实。 触控板我特别好奇一开始到底是哪篇评测说的鬼话，说「LG Gram 的触控板很大，做工很好，手感很不错」。 事实上，它的触控板不大（16:10 设备另说），摸起来手感确实很好，只要别按下去。上下两端最大下沉深度和按压所需力度摸起来就像是两个触控板，如果以使用 MacBook 触控板的习惯，很可能从下往上拖动的时候，拖到一半就已经被判定为松开了。 做工嘛…就更不敢恭维了。从我拿到它的那一天开始，它的四边接缝就不均匀，宽的可以卡进去小拇指指甲，窄的和外壳紧密相贴。更迷惑的是，触控板似乎不是固定的，因为每次剧烈晃动后我把它从包里拿出来，各边的宽窄都会有变化。 软件预装第一方LG 自家应用虽然不够优雅，但也还算不错。它自带了控制中心、电源管理、阅读模式、屏幕显示、使用指南等应用，我们慢慢讲。 谢天谢地，Gram 没带 McAfee 也没带一票「电脑管家」，只有一个颇为简洁的控制应用，可调整最大充电量、开盖启动、C 口充电模式等。听起来很不错，但它在某次更新后就没能再打开。更糟的是，大部分设置在 BIOS 里根本找不到，也就彻底不能再修改了。 除此之外的系统控制，基本上就是 Windows 功能的套壳。电源管理，有点像部分 Android 系统自带的情景模式，没啥槽点（于我而言更没啥使用场景）；阅读模式好像会和 Windows 自带的同名功能冲突，作用也大致相同，都是套个变黄滤镜。 屏幕显示倒是有点意思，会在部分键盘操作时冒出来给个比亮灯更明显的反馈，比如开启 &#x2F; 关闭大写锁定、调整键盘背光亮度等等。值得一提的是，把它卸载掉之后，别的所有功能都能正常运行，唯独触控板开关指示灯状态再也不变了（快捷键功能一切正常），逼人不得不使出浑身解数再把它找回来——对了，LG 官网上根本找不到它们。 预装第三方抛开那些「还不错」的官方应用，Gram 上带的第三方应用就让人不敢恭维了。它预装了好几个 Microsoft Store 里的，可以进行音频视频和图片编辑的应用，它们价格高昂但用户数量和评价都不算高，使用体验也确实不怎么样，尤其是和那些免费好用的桌面端应用比起来。 不过，如果只是轻度使用，它们也确实能满足一定程度的需求，这点不假，如果你能忍受它们令人难受的界面和操作逻辑，以及它们由不知名的小开发商发布的话。 除开这些，Gram 就没有更多的预装应用了。考虑到 UWP 应用都有独立的沙盒并且可以一键卸载，比起那些预装一大堆应用的大厂，也确实挺干净。 非预装第三方这听起来不应该有问题啊？不都是运行在 x86-64 平台上的 Windows 家庭版（Gram 搭载的不是家庭中文版）吗？能有啥问题？ Intel Extreme Tuning Utility (XTU) 先给了我当头一棒，然后是所有企图监测 GPU 的软件。 前者以及所有我尝试过的同类软件都不支持调整 10 代及更新的、非原设计支持的产品，这也正是我必须要在 BIOS 里修改电压的原因。后者更气人，不管是不是牙膏厂官方都读不出来这颗 Iris 核显的具体数据，甚至有离谱的时不时告诉我，核显的频率在 4 GHz 和 0 之间反复横跳，而 CPU 不过也才 2 GHz。 另一个问题来源于驱动。Intel 的驱动更新来源是个谜，配合上国内时好时坏的 Microsoft Store 则有过之而无不及，甚至我电脑送修前备份数据的时候一打开 Microsoft Store 才意识到，原来显卡管理应用一直都有更新，只是从来没装上过。 糟糕的驱动更新导致部分应用渲染问题难以迅速得到解决，比如 Steam 九大名著之一，《山》。我前几次打开它时，直到我把它关掉都只能看到卡住的白色四边形，直至我插上了外接显卡，它才终于正常工作。 售后与服务保修政策另一个槽点来了：LG Gram 一个非常亮眼的点就是极其强大的可扩展性，它堆料近乎顶级，还预留了顶级的扩展位供用户自行定制，但是…用户一旦定制，保修就没了。 LG 官方的说明原文如下： 「笔记本产品需要添加内存或SSD（固态硬盘）时，须由LG售后指定维修站或指定经销商负责，由顾客付费进行，后续享有LG包修服务，客户要求使用第三方内存或SSD、或自行更换时，LG不提供服务，并且后续不享有LG包修服务。」 翻译过来也就是说，即使拥有这么强的可扩展性，LG 还是只允许用户在屈指可数质量也参差不齐的官方授权维修点对设备进行定制。就算 Gram 的后盖实在配不上它的可维护性，总该至少给个尝试的机会吧？而且，在我重读数次后发现，似乎只要用户不是在 LG 官方购买的内存条 &#x2F; 硬盘并交由 LG 官方安装，LG 都有权拒绝保修。这对于一款以可扩展性著称的笔记本，实在是不应该。 维修站点这一项的拉胯直接拖了整个保修的后腿。我前前后后一共接触了三家维修点，每一家给我的感觉都不一样。总体上来说，技术人员比接待人员更适合接待人，外包服务比官方维修给人感觉更好，这对于一个 LG 这种体量的公司而言实在是太不应该了。接下来是我比较长的维修记录，若您嫌太长可以点击 这里 直接跳到总结部分。 重庆商社家维电器有限公司这是三家里面我最满意的一家，也是唯一一家实际探访的。 2020 年暑期内存价格非常实惠，我旅游之余特意在京东上买了根内存条送到重庆，想着重庆有维修点，可以顺路把 Gram 的内存从 8 GB 扩容至 16 GB，就当是在重庆到处逛逛。 电话询问后，对方表示 LG 笔记本电脑维修有专门的师傅，需要提前预约，并给了我师傅的电话。我和师傅还算聊得开，交流一会儿后对方爽快地答应了维修时间。 从外观看起来，这家维修点专门承接各大厂商的维修外包，许多品牌的电子设备都在他们家维修，LG 就是其中之一。在我和第一次见到笔记本顾客的师傅有一搭没一搭地聊了几分钟后，师傅把装好内存条的电脑拿回给我并收了¥100 维修费，此次维修告终。 不得不说，师傅的操作可以用无比娴熟来形容，实在不敢相信他是第一次实际维修以难拆出名的 Gram。维修过程很愉快，但此次维修后师傅并未给我开具维修单，也未在 LG 的系统里留下维修记录，留下了一个小问题。 长沙乐广电器维修服务有限公司我对 LG 售后服务的失望从这家开始。明明在官网上的维修范围里白纸黑字包含了「笔记本电脑」，当我准备抽空去一趟，想一个电话打过去先求救+预约时，得到的答复却是非常慵懒傲慢的「我们暂时并不提供笔记本电脑维修服务」，然后扔给了我售后服务热线的电话。 我还能怎么样？全湖南估计也就这一个维修点了，还不给我修笔记本，只能乖乖去找北京。 北京乐金电子技术服务中心与北京总维修点接触了几次后，我深深地感受到，一开始要是没找长沙维修点而是直接打电话给了当年帮我装内存的师傅，可能这个问题已经结了。 当我一个电话打到 4008199999 也就是 LG 售后服务热线时，我连笔记本电脑该转接哪个键都没听到，又一次深刻意识到了笔记本电脑业务在 LG 中国的式微。没办法，转接家用电子吧。对面的人工客服倒是挺靠谱，记录下了我的问题类型、姓名和电话，告诉我稍后会安排专人打电话回来。 第二天（周一）上午，我成功接到了被标记为北京乐金电子技术服务中心的电话（奇怪的是，我在写下本文时，官网上查询服务点全北京范围内和寄修的收货地址附近都没有这家）。直到我电脑寄出前，与我联系的一直是一位语气比长沙乐广还要慵懒还要傲慢口音还操着点京腔，每次我提问题或要求重复听起来都很不耐烦的女士。我与她交谈数次后，她要求我将发票和凭证寄给指定的地址，维修前的交流到此为止。 顺丰把快递送到北京后，我接到了另一个京腔操着口音的电话，来自 LG 售后点的维修师傅。这次电话交流相当愉快。对方在无维修记录、无维修单，并且明确知道内存非 LG 官方指定的情况下仍为我免费处理，也接受了我拆机维护、清灰的请求，还同意维修完毕后运行三天以保证问题短期内不再复现。 不久后，我从顺丰处顺利取回电脑，该次维修圆满结束。 总结到这里已经 5500 字，我依然觉得前文一定还有遗漏。Gram 为数不多的优势就是轻薄和长续航了，但在 PD 高容量充电宝大行其道的今天，维持一整天的续航并不是什么难事，这又在 Gram 的坟上盖了一抔土。 可我依然觉得我会买 LG Gram。我就是喜欢它塑料般用两根手指就能拎走的机身，就是喜欢它干干净净的自带系统，就是喜欢它不管从哪个角度都一样好看的屏幕，还有足以维持我在咖啡店码一下午字，不需要带任何其它配件的续航。我更喜欢那种轻便的感觉，这种感觉胜过一切不满，让我享受与它共同出门的每一天。 即使它具备这么多缺点，最重要的还是我不曾也不会后悔购入 LG Gram，并且我还有极强的更新至最新款的欲望（奈何没钱）。LG Gram 根本不是一台尽善尽美的电脑，但它在它的垂直领域确实占据了独一无二的位置。我不推荐任何人在不明确自身需求的情况下贸然选择 Gram 作为主力机，但如果你身边的朋友碰巧拥有一台 Gram，那还蛮值得试试的。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.rachelt.one/tags/Windows/"},{"name":"LG Gram","slug":"LG-Gram","permalink":"https://blog.rachelt.one/tags/LG-Gram/"}]},{"title":"站在普通人的角度，谈谈教育、兴趣、Linux 与编程","date":"2021-03-17T17:51:15.000Z","path":"articles/education-interest-linux-and-programming/","text":"从迈入 2021 年以来，我就一直想写点关于这个话题的东西，但这毕竟输出的是自己的价值观，不可能要求所有人都能理解，更何况我还只是个涉世未深、从未迈出过象牙塔的本科生，又有什么资格对这个话题评头论足？ 尽管如此，在身边多了很多对我擅长的领域感兴趣的人后，我觉得也差不多是时间好好想想很多事情的本质了。 本文基本为作者深夜自嗨时挥笔写就，可能部分语句没有道理没有逻辑甚至没有基本的语句流畅度，可能包含妄加论断和大放厥词，还请谅解。此外，作者本人对思想交流持开放态度，欢迎参与讨论或留下反馈，感谢。 当我们谈论现实我记得有听好友吐槽过教科书的不伦不类。它们既想激发学生对学科的兴趣，又想保持自身的绝对严谨，其结果就是往往写了很多复杂的公式和推理，却并没有带来什么实际意义，甚至都没能告诉学生这些理论知识能用来干什么。 这是一个很大的问题。一方面我们抱怨着现在的学生对学习越来越不感兴趣，另一方面我们把教科书写得越来越让学生提不起兴趣。 当我们不是因为学科之美，而是因为应试、因为绩点、因为越来越严重的内卷化而不得不学习某个学科的时候，它已经变味了，已经像饱受诟病的那样，「我又不可能买个菜还算个解析几何」。 不仅仅我们的教育是这样。每一个站在风口的行业，面临的都是这样的困境。我很小很小的时候，所有人都在学乐器学书画；我读初中了，所有人都在学机器人；我上大学了，大人们疯狂往计算机里挤，小朋友们也开始学少儿 Python 了。虽然在所有人都往人多的地方走的世界无可厚非，虽然确实真的有很多人藉此培养了自己的热爱，但对于更多的只是因为「它在风口上」、「怕孩子掉队」而一头扎进去的人，这值得吗？ 在我看来，教科书、兴趣班甚至每个对某学科比常人多懂一些的人应该做的，不是摆架子摆身段昭告天下这门学科有多科学、多严谨、多复杂，学习它能带来多少好处，能帮助人在什么竞争中又出人头地一分。恰恰相反，是要让大部分人感受到这门学科有多诱人，让人知道为什么历史上有那么多名人，沉醉于这个学科带来的愉悦。 所有行业都应如此。Linux 之所以诱人，不是因为它历史有多么悠久，不是因为它配置起来有多复杂，更不可能是因为它只向有兴趣的人开放，而是因为，当我第一次在键盘上敲出那些命令，让看起来就很高端的、疯狂输出各种字符的窗口只围着我一个人转；当我花了好几个小时第一次编译出自己的嵌入式系统，随便抓起个 U 盘烧录完成功启动一台微型电脑；或者更早之前，当我执行 sl 之后看见一辆停不下来的火车从屏幕这边开到了屏幕那边时，内心涌起的兴奋感和成就感，就算用多少本 Linux 史书都压不下去。 就像我之所以能从容面对藏在各种各样的代码里各种各样的 bug 而丝毫不泄气，能够花一整个下午只是为了稳定一个很简单的特性，不是因为我用的语言有多先进，不是因为我写出来的代码性能有多优异，只是因为我满足了自己或者身边人的某个微不足道的需求，而满足这些需求带给我的成就感，胜过读完十本《从入门到精通》。 停止把这一切妖魔化吧。不管是数学还是物理，是 Linux 还是编程，它们对大部分人而言都不过只是一种与世界相处的方式，很多时候我们却一直在强调我们所懂的东西有多么深奥和高级，一直在为这一切设置无形的门槛，一直在劝退每一个试图了解这一切的人。「只有特别感兴趣的人才会深入钻研」没错，但是不试试，又怎么能知道自己是不是感兴趣呢？实在不行就当盲人摸象了吧，摸了象的盲人好歹能在某一天再次摸到象时意识到这是象，被「象很大很高很重一脚能把你踩死」这种话吓住连象都不敢摸的盲人，下次见到象也只有干瞪眼的份儿。 总有一天，我们都会负起自己该负的责任，成为各行各业各领域不可或缺的那一代人。到那时，难道我们还要设置门槛，劝退那些稍稍感兴趣的、还在犹豫的人吗？ 至少我拒绝。如果我有机会，我会毫不犹疑地扔掉那些初步接触时根本不重要的死板而繁杂的理论。 一直以来，我也确实是这么做的。我想鼓励身边更多的人找寻 Linux 和编程的乐趣，想让他们知道编程不是改改代码看看输出就完事儿了，而是经常甚至马上可以派上用场的东西，如果有想做的东西大可一步一个脚印地做出来没人看笑话，Linux 也不是萌新之敌不会随随便便就让电脑爆炸，正相反，每条正确的指令带来的正反馈和命令行带来的强掌控感让人欲罢不能。在学习的过程中必然会碰到很多艰难险阻，而且会发现自己还有太多太多不知道的东西，那都不重要。重要的是，兴趣被调动起来了，然后一切都好说了。 话又说回来，那些理论真的不重要吗？当然不，否则也不会几乎所有人都从理论谈起。非要让我说的话，初次了解时，知道「这是个啥」确实很重要，除此之外的那些长篇大论，就留到兴趣使然时再说吧。 当我们谈论我我接触编程的具体时间已经很模糊了。很久以前，当我还是个 MC 玩家时，我第一次接触了我的「万恶之源」：ModPE。它采用 JavaScript 的基本语法，实现了一些能在 Minecraft PE 中改变游戏局势的功能。 在游戏里，当你不再需要挖一整个下午才能挖到一点点钻石，而是可以写几行代码直接刷满几箱子的钻石，你会选择哪个？这就是我初次真切地感受到编程带来的「成就感」。 那之后在社交平台上的成就暂且不提，借着 ModPE 的机会，我逐渐跟着各种现在看来很稚嫩的教程开始访问 Android 系统提供的诸多功能，直到我成功绕过游戏创建了第一个现在看来也很稚嫩的悬浮窗。很稚嫩，但作为一丢丢刺激、一丢丢兴奋和一丢丢成就感已经够了。以此为契机，我开始逐渐接触 Java 与 Android 开发。 在这之后，就是上架应用，获得微不足道又确实让人欢呼雀跃的下载量，甚至还有来自那么几个人的捐赠。 在这之后，就是逐渐接触越来越多的东西，学到越来越多的知识，开始思考、了解这一切的本质，开始逐渐向着独当一面进化。 尽管如此，在我已经懒得关注那些数字的今天，我还是很怀念第一行代码带给我的最初的感动。那是几乎改变了我整个人生轨迹的力量。 所以我其实并不觉得自己就有什么特别不一样的地方，我只是碰巧多会了一门手艺而已，这本质上和隔壁张三会木工楼上李四会弹琴一样，只是给了我一个稍微有点不同的与世界相处的方式。 家里书桌书架坏了，张三可以自己修，我们在忍和换之间还能选择；《底特律》的开场音乐尤其动人，李四可以自己把它弹出来，我们可以静静欣赏或者在内心大呼「卧槽牛逼」；教务系统少了好看的界面，会编程的人自己写一个，其他人还能忍受，又不是不能用。懂得如何更好地与世界相处确实会带来一些差异，但它远远没到被神化成一个不可或缺的技能的地步。 大部分人不会木工不会弹琴不会编程，他的一辈子照样可以过得很快乐。 一些时候的一些人，明明比普通人多了那么多能与世界好好相处的方式，过得却并不快乐。 希望读完这篇并不短的随笔的你，在面对世俗的现实时，过得能更加快乐。 至少你可能还有写下人生中的第一行饱含着自由与激情的代码，或是执行人生中第一条不是因为「教程」这么说而是因为你想这么做的指令，或是摸出积满尘土的乐器感受遥远的生疏和热爱，或是不为了不挂科只是单纯地想要了解一门学科而翻开一本书的机会嘛，不是吗？","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"归于平凡的 18 岁，致终将平凡的自己","date":"2021-02-18T16:00:30.000Z","path":"articles/to-the-years-forthcoming/","text":"如此平凡的晚上，伴着半梦半醒时远方传来的烟花声，人生中平凡的另一年悄然而至，或者已经开始，无声无息。 我就这样迎来了自己的成年，迎来了获知此前的期待早已失去意义的一刻。 在这一刻，我想回头看看自己。 归于平凡我想了很久该如何总结自己 18 年以来的人生，到最后我发现我承担不起。 就像一千个读者心里有一千个哈姆雷特，重要的不是活在作家心中的角色，而是角色在每个观众心中的投影。 就像我可以是在学术上咬死不放的暴躁学长，可以是不温柔不可爱但是噎死人第一名的逗比，也可以是在某些问题上有所见解的倾听者，更可以是数年前激起不大不小的风波的千古罪人。 那些几近被遗忘的，浩如烟海的过往并未因无人在意而毫无意义。它们组成了如今「我」的每一块碎片，牵一发而动全身。我在意地注视着它们，为自己保留放不下的傲气，在平凡的往复中忘却了存在的定义。 所以我选择把定义「我」这一任务，不负责任地交给每一个试图找到我的定义的人。 而在我眼里，至少我过去一直都是一个忠于自己的、平凡的人。 终将平凡我身边不平凡的人很多，但我从最开始就没想象过不平凡的自己。我胸无大志，幻想着平凡的生活，现在依然。 我找不同的理由逃避，我像极了吃不到葡萄的狐狸。 即使如此，我对平凡与生活的热爱，从一开始就占了上风。从偶尔挥笔写下供以后的自己理解的思绪，到 B 站娜娜子 @cookie-NANA 动态里一点一滴的快乐，再到身边某条陈旧的街道和快要消逝已然无法分辨的字迹，它们让我感觉我确确实实地活过，而非一个匆匆离去的过客。 我大概很难成为什么不一样的人。与生俱来的表现欲消失后，剩下的就只有对被关注的紧张与害怕。漏洞也好缺点也好，问题没人发现就不能得到解决，可我连跨出舒适圈让它们被指出的勇气都没有。 所以我很开心身边有那些人，也自私地希望身边那些人能和我一起度过时光之海，前往不知在何处的彼岸。 我也很开心能认识许多不一样的人、见识许多不一样的东西，在时光之海的浪潮冲刷掉粉饰与浮华后，还能让我留下一些用以珍藏。 我更开心的是能一直像如今的自己一样，平凡地倾听与被倾听、贴近与被贴近，不因种种桎梏畏首畏尾，不因弱点和软肋偶尔自然流露而紧张。再直肠子、再神经大条，也总会有我能信任的人、能做到的事。 或许将平凡贯彻到底，也能成为一种不平凡吧。 这就是一个孩子在踏入黄金时代前，说不上是总结或者展望的，堆砌辞藻的陈词滥调。非常感谢你读到这里。 未开的荼蘼终归要绽放，正如久远的往昔也会随风而去。我不知道我如今的期望能在存留多久，这也正是我把它们存留于此的原因。很多年后我可能会感慨，可能会觉得可笑，也可能会感激自己，从一开始就没有动摇。 但是还没到那一天呢。 谁说得准呢？","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"「分区存储」是个啥？","date":"2020-11-12T02:20:35.000Z","path":"articles/scoped-storage-in-reality/","text":"书接上回。 前文 我们说到，Android 10 引入的「分区存储」成为了不少媒体、用户、开发者关注的焦点。关于这一特性的文章层出不穷，但很可惜，这些文章要么只是概览，要么和官方一样说得一套一套的让人丈二和尚摸不着头脑，还有些搞错了分区存储的定位和原理。加上 iOS 和 Sandboxie 等前辈在应用隔离方面的成功实践，大部分人一看到「分区存储」这几个字，首先想到的就是这些前辈，进而理所当然地以为 Android 的分区存储 &#x3D; 给应用挂载独立的存储空间，不管应用怎么造作都不会影响到用户和其他应用。 理想很美好，可惜事实并非如此。我们慢慢讲。 本文大部分论断囿于作者的能力、阅历和经验，仅代表作者的理解与推断，还请广纳思想，避免偏听偏信。 咋回事儿？关于「分区存储」，引用官方在 Android 文件和数据存储概览 里的描述： 为了让用户更好地管理自己的文件并减少混乱，以 Android 10（API 级别 29）及更高版本为目标平台的应用在默认情况下被赋予了对外部存储空间的分区访问权限（即分区存储）。此类应用只能访问外部存储空间上的应用专属目录，以及本应用所创建的特定类型的媒体文件。 前文里已经粗浅地将开发者方面文件访问的历史变化捋了捋，少数派的这篇文章： 《还存储空间一片清朗：Android 的「沙盒」机制何时到来？》 讲得也比较透彻，尤其是用户体验和隐私方面，在此不再展开细说。 那它到底是什么？就应用启用分区存储后的实际文件访问行为而言，这里要再强调一遍前文强调过的内容：至少在 Android 10 上， 分区存储只是关掉了应用的存储权限 。 启用了分区存储的应用，能够访问的内容限于： 应用的专属存储目录（ Android/data 文件夹下） 媒体文件（要访问其他应用的文件需要申请权限） 用户通过 存储访问框架Storage Access Framework （SAF）授权的其他文件 等等，是不是搞错了什么？这三样可都不是新面孔。最后这个……还用说吗？这可是老朋友了，Android 5.0 Lollipop 开始几近成为完全体，从完全存储权限迁移到 SAF 也没有想象中那么费劲。第二个更早，连最早被引入 Android 的时代都难以追溯（很可能和 Android 1.0 一样老），只是在 Android 10 上，一些特性因为分区存储受到了更严格的限制。第一个在 Android 2.2 Froyo 上已经存在，比分区存储这个概念产生整整早了九年。再过三年，2013 年的时候，Android 4.4 KitKat 已经让应用不需要额外申请权限就能访问自己的专属存储目录了。 由此可见，所谓「分区存储」给应用分配的「沙箱」，从七年前开始存在至今，并且这七年来几乎没有变过。 除非应用申请暂时关闭分区存储，否则应用能访问的文件范围仅限于此。分区存储除了对媒体文件施加了一些额外的限制，其余都和关闭了存储权限没啥两样。至少现在，与其把分区存储看成一种新行为，一种新标准可能更加确切。 为什么说 Android 11 是「一次跃进」？Android 11 带来了一个很大的改变：位于 Android/data 目录下的文件不能被其它应用访问。 这乍看起来是一个令人窒息的操作（当然它也的确是），让应用放在 Android/data 下错误日志之类的文件或文件夹对用户隐藏，给以往很多理所当然的操作带来了巨大的困难，甚至直接成为不可能。 然而，这却是 Android 分区存储的拼图中，颇为重要的一块。Android 10 发布后，不少应用因各种原因（比如适配最新 Android 版本的需要和 Google Play Store 的威逼）开始接受分区存储，开始规范自身的行为，开始将 Android/data 作为自身文件存储的根目录。即使是 QQ 和微信这类「老顽固」，也已经在将数据迁移到 Android/data （虽然迁移得让人扼腕）。经过了一年的过渡，在 Android 11 推出的时候，顺水推舟让应用的存储目录不再对用户和其他应用可见，从而形成的，不正是用户一直渴望的，不管应用怎么造作都不会影响到用户和其他应用的「沙箱」吗？ 说得确切些，「分区存储只是关掉存储权限」，并不意味着分区存储不是沙箱机制。和其他沙箱不同的地方在于，分区存储并不是动态地将应用放到独立存储空间中运行（Rikka 的 存储空间隔离（存储重定向） 一直在做的事情），而是给应用提供一套行为规范，让应用主动利用系统给应用分配的独立存储空间。这个「系统给应用分配的独立存储空间」，就是 Android 11 上被系统保护起来的 Android/data 。 跋：不算科普的絮叨如本节标题一样，原以为本文会写成一篇小小的科普，没想到写着写着推断 （阴谋论） 占了上风，自然也就不会像正经的科普一样可靠。不管怎么说，还是希望各位能够多提出意见、发表感慨。思想的碰撞，无论是对参与方还是对旁观者，或许都有所裨益。 本文的资料主要来源已经在文中或前文以超链接形式给出，感谢对应的作者以及读到此的各位对本文的莫大贡献。","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.rachelt.one/tags/Android/"},{"name":"开发","slug":"开发","permalink":"https://blog.rachelt.one/tags/%E5%BC%80%E5%8F%91/"},{"name":"存储","slug":"存储","permalink":"https://blog.rachelt.one/tags/%E5%AD%98%E5%82%A8/"},{"name":"分区存储","slug":"分区存储","permalink":"https://blog.rachelt.one/tags/%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8/"}]},{"title":"写给所有人的 Android 文件访问行为变更","date":"2020-11-08T16:44:50.000Z","path":"articles/android-storage-behavior-change/","text":"Android 初代发布至今已有 12 年，这些年间，Android 一直因系统版本碎片化而饱受诟病。据 Google 数据，在统计范围内仍有 26.3% 的设备运行着 Android Marshmallow 及以下版本的系统，而升级到 Pie 及以上的设备更是只占了 39.5%。面对如此繁杂的系统版本，应用的兼容性是个大问题，尤其是文件访问方面的资料太杂乱分散，带来麻烦又浪费时间。本文以 Poweramp LRC Plugin 的开发为契机写就，希望能帮助此后跳进存储这个大坑里的开发者，以及想了解不同系统版本差异的用户。 本文探讨对象为 Android 原生 &#x2F; 类原生系统，深度定制系统带来的其他问题（点名批评一些国产砍了 DocumentsUI 这是什么？ ），不会也无法在此提及。 下文范围限于通用文件访问，访问媒体文件或作为提供者的场景仅作补充，可能不够严谨。 Android 4.4 KitKat 以前 (~18)众所周知，在 KitKat 以前的 Android 设备上，各路应用群魔乱舞，可谓「自启与保活齐飞，权限滥用共提权漏洞一色」，Android 4.1 之前连单独的读取权限都还没有。这一阶段，申请存储权限的应用能访问整个设备的存储空间（包括外置存储，如 TF 卡等）。那段时间的文件访问方式五花八门，应用可以通过 GET_CONTENT 和 PICK 两个 意图Intent 的 行为action 打开其它应用以选择文件，随后通过得到的 链接URI 读取文件或对文件执行特定操作。前者获取到的 URI 只会允许应用读取内容，无法获取文件而不需要存储权限，后者则能使应用获取到指向文件本身的 URI，却并没能改变「群魔乱舞」的状况。 事实上，当时流行的解决方法（甚至被称为「正确」方法）是将 PICK 获取到的 URI 根据格式和来源解析并获取对应的文件路径，再通过 Java 提供的文件读写方案操作文件。获取路径的过程很复杂（也很脏），但它以添加几十行前人摸索出来的方法为代价，延续了许多开发者 Java 的操作习惯，或者单单只是绝对路径更「方便」，再加上文件系统直至 Android 10 才对应用封闭，这一方案「长盛不衰」。 关于 GET_CONTENT 和 PICK ，官方的表述较难理解，同时由于写下此文时找不到合适的测试设备，虚拟机镜像也早已无处可寻，以上只是大概且很可能有所疏漏，建议使用前参考 官方 ACTION_GET_CONTENT 文档 （只有英文）并多次测试，若有错误欢迎指出。 不过，何必非得弄得这么脏？应用已经有了整个存储的读写权限，自己造一个文件选择器也不是什么难事。除此之外，经历过那段时期的人一定忘不了 /sdcard/ 、 /storage/emulated/0/ 等等绝对路径。如此，花样层出不穷，用户体验严重割裂，粗放管理（以及粗放管理下积累起来的过时资料）或许就是一大堆问题的起源、今日文件存储问题的开始。谁知道呢？ Android 4.4 KitKat (19)从 KitKat 起，Android 引入了一套全新系统「存储访问框架Storage Access Framework」，也就是 SAF，以及对应的 标准 UIDocumentsUI 。 官方描述 如下： 新的存储访问框架让用户能够在其所有首选文档存储提供程序中方便地浏览并打开文档、图像以及其他文件。用户可以通过易用的标准 UI，以统一方式在所有应用和提供程序中浏览文件和访问最近使用的文件。 用大白话来说，使用 SAF，应用可以打开一个文件选择界面，使用户在标准 UI 内从所有 文档提供程序document provider （作为文件来源的应用，比如照片、网盘）中选择文件，并将其授权给应用。引入 SAF 统一了用户体验，增加了文件来源（以往只能从某个应用选择，现在可在一个地方看到所有应用），也不要求通过 SAF 读写文件的应用获取存储权限。标准 UI 集成了 GET_CONTENT 的支持，也就是说，本身并没有适配 SAF 的应用也可以 0 成本通过标准 UI 选择文件，并保持与原来相同的行为（只要没用脏方法）。同时，Android 开始收紧外置存储的访问，应用必须请求读写权限才能操作外置存储，并且 外置存储限制不小 。这也造成了一揽子依赖 SD 卡的应用在系统更新到 KitKat 后停止工作，带来了不少抱怨。 KitKat 的 SAF 提供了 CREATE_DOCUMENT 和 OPEN_DOCUMENT 两个 action，分别对应创建文件和打开文件。 GET_CONTENT 并没有消失，它仍能像此前一样用于读入数据，而 SAF 提供给应用的是文件的「长期、持续访问权限」。例如，如果应用需要导入头像，那么它只需要 GET_CONTENT 即可，但若应用需要剪裁头像并保存到原文件，则必须使用 OPEN_DOCUMENT 。 随着 SAF 一同进入 KitKat 的，还有 内容解析器ContentResolver 的新方法： openFileDescriptor 。它返回 ParcelFileDescriptor ，提供来自 Java 的 文件描述符FileDescriptor ，与实际的文件对应，可以使用 Java 的文件读写方案读取。文件描述符只指向文件内容，提供基础的读写，但不包含文件路径，也没有 Java 常用的 文件File 的复杂功能。根据 官方的描述 ， 由于客户端应用只会收到文件的内容 URI，因此，在此过程中可确保文件的安全。由于此 URI 中不包含目录路径，因此客户端应用无法发现和打开服务器应用中的任何其他文件。只有客户端应用可以访问该文件，而且必须具有服务器应用授予的权限才能访问。 Android 5.0 Lollipop (21)Android 在 Lollipop 上进一步扩展了 SAF 的功能，允许应用使用新增的 action OPEN_DOCUMENT_TREE 请求用户授予某个目录下所有文件和文件夹的完全权限。由于标准 UI 具备外置存储的访问权限，应用可以通过这一新增特性再次取得 SD 卡权限，尽管通过 SAF 访问文件与此前有较大出入，但终归算是能用。 但是，秉着「能不做为什么做」的理念，诸多应用仍旧固守传统的文件访问方式，即便它们可以申请访问整个存储空间并获得类似的权限。 Android 6.0 Marshmallow (23)Marshmallow 带来了 运行时权限Runtime Permission ，针对 Marshmallow 及更新的 Android 版本开发的应用，不仅需要像以前一样在清单文件中声明，还需要在使用权限的时候由用户手动许可，才能够使应用获取权限。理想很美好，但没有统一规范的结果就是应用针对的 Android 版本提高了，滥用权限还是没变。在国内最常见的是，当应用第一次启动时，弹出一堆授权窗口，用户只能选择同意，否则，有点良心的应用会好好说明为什么需要权限，中等的是重复请求授权，没良心的直接不给用。 另一项重大的改动在于 可采用的存储设备Adoptable Storage ，它允许用户将 SD 卡等外置存储格式化并作为内置存储使用，从而大幅增大存储空间。这与本文主题关系不大，但值得注意的是应用通过系统方法获取到的缓存文件夹等会随着应用安装的位置而变动，一定程度上避免了应用使用绝对路径访问文件。但…真的有人将 SD 卡这么用么？随着主流设备逐渐淘汰手机的 Micro SD 卡槽，这一特性也成为历史。 Android 7.0 Nougat (24)Nougat 将应用间共享文件限制得更加严格，禁止将附带文件路径（ file:// ）的 URI 暴露给任何其他应用，只能提供 content:// URI。当然，只要一直遵循规范，无论是文档提供程序还是普通应用都不会在这里撞墙。 可能导致问题的是另一项特性： 虚拟文件Virtual Files 。此前的文档提供程序所提供的 URI 必须对应实际存在的文件，但在一些情况下，存储的文件或许并不能直接使用。考虑到这个问题，Nougat 提供了不需要对应实际文件的虚拟文件，其无法使用传统的文件读写方案读取，需要采取 特殊的方法 获得文件输入流。 虚拟文件本身概念抽象，加上官方的描述自相矛盾且 Nougat 以后就从未提及，使用到它的应用不多，相关的文章更是少之又少，能够把一切说清的几乎没有，因此本文暂且将其搁置不论。没有碰到最好，万一碰到了，可以参考这篇文章： Virtual Files FAQ (Sorta) - CommonsWare ，目前能找到的最详细的描述。 此外，Nougat 还提供了 作用域目录访问Scoped Directory Access 以及一系列特定的存储目录（称为「标准外部存储目录」），例如图片、音乐等，在获得用户对这些存储目录的授权后，应用即获得了这一目录的完整权限。这有点像是 OPEN_DOCUMENT_TREE ，同样不需要声明权限，同样可以获得完全权限，但应用获得的路径由应用决定，免去了用户选择这一步骤。尽管如此，应用已经对完全读写权限的使用习以为常，因而这一特性的实际使用场景十分有限。其具体文档已经无处可寻，大概和下文将提到的、 Android 10 推出的 分区存储Scoped Storage ，或者 Android 提供的强大的媒体文件访问脱不了干系。 Android 8.0 Oreo (26)SAF 在 Oreo 被进一步增强，带来了三个新特性。 针对尚未下载的云端文件，Android 允许第三方的文档提供程序提供新型「可寻址的文件描述符」，这种文件描述符以及 新的使用方法 （以 ProxyFileDescriptorCallback 作为回调）使应用每次对文件进行操作的时候都会唤起文档提供程序并动态地加载应用所需内容，要多少就加载多少，从而避免了文件提供给应用时，文件必须全部下载到设备上。 事实上，虽然该特性是全新的，但文件描述符还是那个 ParcelFileDescriptor ，只是使用方法变了而已。 此前，媒体文件不能像文件一样被操作（例如移动、复制、删除），媒体管理器（相册、音乐播放器等）要让某个媒体文件变成可以操作的文档，只能在存储空间里面一个一个文件夹找（遍历）。Oreo 引入的新操作 允许媒体文件的 URI 与文档的 URI 互相转换，从而为媒体管理器提供了极大的方便。尽管如此，这种操作并不会同步授予应用对应文件的权限，应用仍然需要使用 SAF 获取用户许可才能操作文件。 最后一个新特性允许应用「从文件系统的根目录中确定路径」，根据官方的描述，可以满足有如下需求的应用： 您的应用使用可以显示特定文档位置的“另存为”对话框。 您的应用在搜索结果视图中显示文件夹并且如果用户选择某个文件夹，应用必须加载此特定文件夹内的子文档。 之所以这个特性写得这么保守又简短，是因为 Android 开发者文档根本没有说如何利用这种路径，而且这个特性的讨论度低得吓人，貌似作用就只有展示给用户。下面附上一段个人的测试结果，仅供参考，如果用不上的话可以跳过不看。 根据测试，这个特性仅对通过 OPEN_DOCUMENT_TREE 获取到的文档树 URI 生效，如果对 OPEN_DOCUMENT 获取到的文档 URI 使用则会报 java.lang.SecurityException ，提示需要只有系统应用才能获取的 MANAGE_DOCUMENTS 权限。并且，这个特性有时会给出 raw: /storage/emulated/0/XXX ，而有时只会给出类似 primary:XXX 或者 home:XXX 的路径（后者 home 估计意为文档的主目录，前者大概是「标准外部存储目录」？），挺混乱的。 Android 9 Pie (28)Pie 上对文件访问改动很少，唯一的差异是进一步提升了应用文件的安全性：针对 Pie 及更高版本开发的应用「无法使用所有人都可访问的 Unix 权限与其他应用共享数据」，也就是无法使应用自身存储的数据对所有应用开放。 Android 10 (29)Android 10 带来的「 分区存储Scoped storage 」是近年 Android 更新讨论的焦点之一。从 Android 10 开始，所有针对 Android 10 及更高版本开发的应用，除非使用特殊方法，否则都无法访问传统的存储空间。应用只能访问自己的专属文件或缓存文件夹，或通过系统提供的标准方法访问位于存储空间的媒体文件，要么就必须使用 SAF 配合系统标准方法。这意味着此前所有的「脏方法」，在针对的 Android 版本提升后全部失效。为了确保开发者积极适配 Android 的新特性，Google 目前还要求新应用上架 Google Play Store 及老应用更新时，针对的 Android 版本必须为 Android 10 以上。也就是说，只要是这几个月在 Play Store 更新过的 Android 应用，基本都适配了分区存储规范。 但是，分区存储并没有从实质上解决文件和文件访问方式混乱不堪的问题。首先，Google 为了给应用更多的缓冲时间，预留了 一个标记 ，允许应用暂时通过老方法访问存储空间。而且 Android 作为开放的系统，不说那些直接提供安装包给用户的，大型的应用分发渠道（应用商店）远不止 Play Store 一家，虽然各家商店都有自己的规范，但各家商店审核不严格（点名批评所有国民级应用），而且这些规范都又老又旧，仿佛来自上个世纪。最后也是最重要的是，分区存储并不是类似于 iOS 或者 Windows 上 Sandboxie 的应用沙箱，至少在 Android 10 不可能是。正相反，从行为上而言，它只是 关掉了应用的存储权限 。 关于分区存储，在此就先按下不表。三言两语不一定能讲清楚，而若要详尽解答各个问题，可能就要另起一篇文章了。总之，对于本文，知道分区存储只是关掉存储权限即可。 除了分区存储，Android 10 在文件方面还作出了数项改进。 为了防止媒体文件在写入时被修改，Android 10 上的应用可以 标记媒体文件为待处理 ，从而获取对媒体文件的独占访问权限，推测其效果大概类似于 Windows 上的「文件被占用」。 同样是写入媒体文件，Android 10 默认会按照文件类型将媒体文件存储至对应文件夹，也 给了应用指定存放路径的自由 。例如，使用系统标准方法存储、不指定路径的图片默认在 Pictures 文件夹，应用也可以选择将其保存在 Pictures/我的应用 里。为了防止这个特性被滥用（比如明明是个图片却要丢进音乐里），Android 作出了相应的限制 。 在 Android 10 上，不同的外置存储拥有各自唯一的名称。如果应用需要记录文件的来源，或者控制文件存储到哪个外置存储， 这个特性 便能派上用场。 Android 11 (30)文件访问及分区存储在 Android 11 上迎来了一次跃进。 Android 10 用于通过老方法访问存储空间的标记，在针对的 Android 版本提升到 Android 11 后不再可用，为了适应部分应用（比如文件管理）的需要，新的权限 MANAGE_EXTERNAL_STORAGE 应运而生。申请这个权限的应用和此前一样，拥有对存储空间的完整访问权限。根据观察，暂且可以把这个权限当作原来标记的替代品，其功能相差不大。当然，Google 可不是傻瓜，毕竟是自己造出来的规范，自然不会让随便什么阿猫阿狗都能挂着这个权限在 Play Store 上招摇过市。具体的使用范例、条件等可以查阅 管理所有文件的官方文档 。 在 Android 11 上，Java 提供的传统文件访问方案被部分带了回来：只要拥有媒体文件的读写权限（例如应用专属目录的文件或是应用自身创建在存储空间的媒体文件），应用就可以通过 直接文件路径 读取这些媒体文件。当然，这种方案受到分区存储的限制，强行访问应用不该访问的地方会导致报错。 Pie 引入的特性在 Android 11 上又进了一步：针对 Android 11 开发的应用不但不能让自己的数据对所有应用开放，也不能访问其他针对 Oreo 及以下版本的应用开放的数据。 受影响的还包括应用位于 Android 目录下的外部存储目录。以前，这些目录的访问限制很少，只要应用没有启用分区存储并且拥有存储权限，它就几乎能在这里肆意妄为。现在，无论是停用分区存储还是使用 SAF 请求用户授权， Android/data 目录都不再对应用开放（虽然它还在那里），意味着分区存储正朝着 Google 预想的方向前进，并且已取得一定成效。Android 11 的 SAF 对 OPEN_DOCUMENT_TREE 的限制不止于此。针对 Android 11 开发的应用无法再请求用户授予对各个存储设备（包括自带的存储空间和外置存储，例如 SD 卡）根目录以及系统下载目录的权限，提高用户的隐私安全。 尾作为一个文笔不精阅历不深的摸鱼开发者，花了快 5500 个字，终于讲完了 KitKat 以后各个 Android 版本之间文件访问的差异，本文也从一开始的科普向逐渐转为了文末的四不像。本文不够清楚，更不够深入浅出，也没有什么深度，只是尽可能还原这些特性本貌的同时偶尔穿插个人的见闻、体验与感受，还请各位多多包涵、多多指教。 本文的资料来源主要是 Android 官方提供的行为变更文档、Stack Overflow 的诸多提问者与回答者以及 Google 找到的其他网站，特此向这些作者、开发者与网站运营者致以敬意。","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.rachelt.one/tags/Android/"},{"name":"开发","slug":"开发","permalink":"https://blog.rachelt.one/tags/%E5%BC%80%E5%8F%91/"},{"name":"存储","slug":"存储","permalink":"https://blog.rachelt.one/tags/%E5%AD%98%E5%82%A8/"},{"name":"行为变更","slug":"行为变更","permalink":"https://blog.rachelt.one/tags/%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4/"}]},{"title":"使用 OBS 和 Virtual Cable 私人直播","date":"2020-09-14T14:53:41.000Z","path":"articles/stream-privately-with-obs-and-virtual-cable/","text":"明天就能玩到心心念念的原神了，作为从漫画发布起就一直关注的云旅行者，在因为时间和年龄错过了内测之后，终于有机会到提瓦特大陆一睹期待已久的美景。欢喜之余，自然想让亲近的人与自己分享这份激动。 这就带来了问题。鉴于隐私、年龄等因素，在 B 站直播并不是个好主意。最好的平台当然是 QQ，它不需要双方再额外装上其它令人生畏的国产软件。然而，我所用的 TIM PC 端 2.3.2 版内建的「屏幕分享」并不包括系统音频，也无法捕捉 OBS 混音处理后的音频。OBS 强大，可面对 QQ 这种私有协议+客户端也无计可施。VB-Audio Virtual Cable 能够设置为实体麦克风的侦听输出，但若要将系统音频全部塞进去（考虑到大部分游戏并不支持设置音频输出设备），就只能将默认音频输出设置为 Virtual Cable，带来了对面说话 -&gt; 通过 Virtual Cable 播放给对面的套娃场景，更别说在各种各样的地方指定输出设备得有多复杂了。 还好，OBS 论坛里的 这篇帖子 的博主和我有一样的疑惑，并且帖子里给出了可以用的回答。本文以中文将其记录，并改造成了 QQ 可用的版本，同时提供了其它场景可能可行的解决方案。 准备工作 Open Broadcaster Software (OBS) - 混音 对，只拿来当混音台。太委屈这么强大的工具了，所以如果你有更好的选择，只要它支持同时内录和麦克风录制并且可以播放到指定设备，就可以用它替代 OBS，也欢迎向我推荐。 VB-Audio Virtual Table - 输出混音后的音频 手和脑 音频调试首先打开 OBS Studio 配置音频。OBS 提供了友好的简体中文界面，找到位于下方的「混音器」并不难。在这里，你能看到「桌面音频」和「麦克风&#x2F;Aux」，前者代表了系统音频，而后者则来自系统默认的麦克风。默认情况下，只需要对这二者进行混音即可。当然，为避免奇奇怪怪的问题导致抽风（比如默认麦克风被修改）或是只希望录制来源于特定窗口的音频，左侧「来源」对音视频源的自定义设置极其丰富。在那儿添加了一个音频源之后，就能在「混音器」里找到了。我的图片中添加了一个指定了输入设备的「音频输入捕获」。 设定好之后，点击右下角的「开始录制」就能测试音频了。你可以播放音乐并以正常姿势说几句话，同时不断调整混音器中的音量。录制完毕后，在资源管理器的「视频」文件夹后可以找到录制结果。播放它，找到最舒适的音量大小，然后在 OBS 中修改音量即可。 音频输出在调试完毕确认可以使用后，点击「混音器」里任意一个音频源右下角的齿轮图标，进入「高级音频属性」。 在「高级音频属性」面板中，将你需要使用的所有音频源的「音频监听」设置为「仅监听」或「监听和输出」。对于这篇文章的目的而言，这两者都一样，但如果你还想在游戏的同时通过 OBS 录制，那就只能选择「监听和输出」。 随后，转向左上角文件 -&gt; 设置，打开「音频」选项卡，调整「监听设备」，将其修改到此前装好 Virtual Cable 后新出现的 CABLE Input。 这样，当其它应用将 CABLE Output 作为麦克风时，它能录制到的音频就只有在 OBS 混音完成后的音频和其它（如果有）应用通过 CABLE Input 输出的音频。 万事俱备，只差最后一步。打开 TIM &#x2F; QQ，进入设置，快速定位到「音视频通话」选项卡，此时应该能够看到自定义麦克风的选项。剩下的步骤已经很明确了，配置完毕后找个好友或者自己开小号，使用 QQ 自带的「屏幕分享」，看看效果吧！ 再多说一句，若你并不使用 QQ 的「屏幕共享」，希望能够将 OBS 录制的视频也作为视频源，可以体验这个插件： OBS Virtualcam ，具体使用方法在插件说明里讲得很清楚，在此不再赘述。","tags":[{"name":"串流","slug":"串流","permalink":"https://blog.rachelt.one/tags/%E4%B8%B2%E6%B5%81/"},{"name":"应用","slug":"应用","permalink":"https://blog.rachelt.one/tags/%E5%BA%94%E7%94%A8/"},{"name":"记录","slug":"记录","permalink":"https://blog.rachelt.one/tags/%E8%AE%B0%E5%BD%95/"},{"name":"直播","slug":"直播","permalink":"https://blog.rachelt.one/tags/%E7%9B%B4%E6%92%AD/"}]},{"title":"一个男生使用了 7 天 Apple Watch，这是他的生活发生的变化","date":"2020-08-12T14:12:51.000Z","path":"articles/7-days-with-apple-watch/","text":"建议改成：一个男生背叛了 7 天 Android… 不管「背叛了 Android」是不是实话，「背叛了 Android 阵营的智能可穿戴设备」是真的。 本文约 4100 字，阅读约需 10 分钟。作者使用的设备为 Apple Watch Series 4 | 40 mm | GPS 版，搭载 watchOS 6.2.8。本文很长，全程无图，还请包涵。 几个月以前，我还是个傻傻地以为自己对 Android 的忠诚就像对外语系的忠诚一样牢不可破的毛头小子。后来，因为种种因素，我的志愿几乎全填了工科系，还入手了 iPhone 8 用国产软件大呼真香（参见前文），现在，就连一直渴望拥有的 Galaxy Watch &#x2F; Wear OS 设备，都被我换成了 Apple Watch Series 4。 网上关于 Apple Watch 的文章很多很多，但 Apple Watch 给不同的人带来的感受，自然会因经历不同、使用场景不同等原因而不尽相同。这是我，一个 Android 开发者&amp;爱好者、Windows 用户，直到半个月前都从来没有亲自接触过 Apple 生态的人，在初步接触并依赖其生态（尤其是深度使用智能可穿戴设备）后所写下的感悟。 为什么是 Apple Watch ？要回答这个问题，我们得先来看看智能穿戴设备的现状。目前，市面上的可穿戴设备百花齐放，异彩纷呈，呈了又呈。某宝搜索「智能手环」和「智能手表」都能得到整整 100 页搜索结果，从一线国际大厂到不知名山寨小厂，人人都想挤进这个已经趋近饱和的红海分一杯羹。 但是，目前市售的「智能穿戴设备」，真的智能吗？大部分仅能实现运动追踪、心率检测的手环暂且不提，不妨看看 Wikipedia 对于「智能手表」的定义： 智能手表（英文：Smartwatch）是安装有嵌入式系统、用于增强基于报时等功能的腕部手表，其功能相似于一台个人数码助理。早期智能手表既可以执行计算、翻译或者操作掌上电子游戏等基础功能，中期智能手表则实现了可穿戴式电脑的功能。大多数智能手表可以运行流动软件应用程序，一些可以运行移动操作系统，少数有着完整的移动电话功能。其他的功能大多与便携式多媒体播放有关，比如播放调频广播与音频或视频文件，以及通过蓝牙耳机收听。 也就是说，许多厂商冠以「手表」之名的，其实无法被列入「智能手表」的行列，只能算是「大多数」之外的「少数」，或者就是被许多网友戏称为的「大手环」。手环不好吗？当然不，手环很好，尤其是最近的小米手环 5，它香到让一个已经入了 Apple Watch S4 的人垂涎三尺。如果没有智能手表相关需求，我会让向我征求建议的人直接买它。 让我想入手一款「智能手表」的，另有原因。 进入高三的第四个月，我入手了一块二手的 Moto 360 Sport ，企图尝鲜 Wear OS。当时的想法是，反正就两百来块钱，就算很垃圾很垃圾，只要体验到了 Wear OS 就不算亏。没想到，在接下来不到一个月的时间中，我不断吐槽着 Moto 360 Sport 的垃圾，一边深深地感受着 Wear OS 的魅力。它陪着我跑完了人生中跑得最快的一次长跑测试（当然还是很慢），让我养成了晚自习课间跑步的习惯，养成了下教学楼必揣蓝牙耳机的习惯，也养成了每天看看自己的 Heart Points 并尽力达成目标的习惯。这让我在突然将主力设备切换回戴了一年有余的小米手环 3 NFC 版时，产生了很强的落差感。现在想想，「毕业后买可穿戴设备」的想法起源于很早以前，可如此坚定地说「毕业后买块表」，确实是在那之后。 既然如此，为什么最终却选择了 Apple Watch，而非我大加赞赏的 Wear OS，或是非常欣赏的 Gear &#x2F; Galaxy Watch 设备呢？ 正如我前文所提到的那样，Apple 十分擅长建立一个完善而封闭的生态。Apple 的生态不一定是最开放的，社区不一定是最庞大的，然而凭 Apple 的号召力，便能够轻而易举地让开发者围着它转。最明显的例子就是 Apple Pay，它从在国内正式上线起就成了大众关注的焦点，甚至间接地推动国产厂商纷纷推出自家系统的预装钱包。尽管如此，无论怎样发展，在中国大陆用得最爽、各家银行支持最完备、用起来最能给人安全感的，一直是 Apple Pay。就算抛开这些，单论刷卡体验，Apple Pay 几乎秒响应这一项，已经够让人扔掉国产设备了。 另一个原因是系统的完成度 &#x2F; 可靠度。放到智能穿戴设备上来说，我不希望我的手表三天两头出各种千奇百怪的 bug，也不希望在我脱离手机只有 Wi-Fi 的时候，我还要考虑怎样才能访问手表的语音助手。我更不希望它的底层让一块配置本就不高的智能手表承受太多它不应承担的重量，比如跑一个 Android，享受计时器熄屏后就被杀掉，或是同时开音乐和跑步就分分钟暴死在我面前。当然，优化上乘同样也是 Apple 良性生态的体现。 那 Wear OS 真的就没有一点好处了么？当然不。我到现在为止还会被 Wear OS 的动画所折服，还会在一些交互的小细节上发现 Google 的认真，还会想再次体验那些初见不经意，实际用起来却离不开的亮点。更重要的是，跑在手表上的 Android，仍旧吸引人。可惜，Wear OS 的生态实在过于残缺，生态又恰恰是决定消费者选择的重要因素。现在来看小米手表的失利，其实就是 Wear OS 及其生态在中国大陆的失利。 有何感慨？ 事先声明，对公司的好感不代表对其特定产品的好感，公司的作风也不代表产品的品质。 即使是市面上最好的智能手表，最终还是免不了被归类于「大手环」。没错，Apple Watch Series 4 拥有一块够用的屏幕，能够安装诸多第三方应用，有着不错的开发者支持，在我使用它的这些天，它的用处却与小米手环 3 如出一辙，甚至还不如后者。Apple Watch 能记录步数并转化为热量或距离，小米手环也能；Apple Watch 能为一天的活动设置目标，小米手环也能；Apple Watch 能发出久坐提醒，小米手环也能；Apple Watch 能全天候测量心率，小米手环也能；Apple Watch 能刷公交卡，小米手环也能；Apple Watch 能用 Siri ，小米手环 4 以后的 NFC 版也有小爱同学；Apple Watch 最多两天一充，小米手环续航两周；Apple Watch 不能自动监测睡眠，但是小米手环能。 「不是有很多第三方应用能够提供相当不错的睡眠监测体验吗？」 是这样没错，这是 Apple Watch 的优势。然而，比起在各种良莠不齐的应用之间互相比较、换来换去（甚至找不到足够科学 &#x2F; 精确的），还要忍受对于试用来说高昂的付费和最大 48 小时的退款处理（再次夸奖 Play Store 的一键后悔药），官方推出的睡眠记录功能，无疑会大大改善用户体验。当然，watchOS 7 上 Apple 将要推出官方的睡眠追踪，免除了用户自行选择应用之苦，比较让人期待。 这还只是睡眠追踪。在 App Store 里有着数不尽的应用可供选择，这些应用足够强大，可因为手表自身的特性以及我个人的使用习惯，许多应该交由手机完成的事情或是我用不上的功能我都没有强行分配给它。当我筛选掉大部分我并不需要的功能之后，剩下来的应用，似乎也不多了。 顺带一提，Apple Watch 上虽然有网易云音乐，但还处在一个相对来讲「不好用」甚至「不能用」的状态。无法查看歌单，无法搜索歌曲，「我喜欢」播放的甚至不是我点过红心的歌，下载没有下载进度，我连在下载哪首歌都不知道…我以后再也不说 Wear OS 的网易云音乐是残废了，我终于见到真正的残废了…… 当然，还有值得夸的地方，比如呼吸。每天送来的呼吸提醒，让我开始关心精神的放松。一分钟的正念冥想短暂，却让人有达成的动力。还有活动圆环，我将其设置在 700 大卡，为了达成给自己设定的目标，我这些天每天出门晨跑，虽然只有三公里（或者更少，根本达不到 700 大卡，还好我有下午出门散步的习惯），也算是开始运动了。 并且，藉由 Apple 的算法，Apple Watch 对我个人各项指标的了解可以说做到了极致。除了「静息心率」、「步行平均心率」、「健身记录」这些大家都有 （你说 XXX 没有？抬走） 的东西，Apple 还提供了「心率变异性」、分离的「活动能量」与「静息能量」、「心率恢复」、「最大摄氧量」……看着自己的身体指标随着坚持锻炼逐渐改善，内心想必会满溢着成就感吧。 最重要的是，Apple 生态圈内的一切健康数据，从步数到经期，从呼吸、睡眠到性行为，都能在 iOS 自带的「健康」应用中查阅或录入（当然有些只能手动录入）。这是生态带来的、其它智能穿戴设备无可比拟的优势。Android 这边或许有个 Google Fit 可以一战，那国内呢？难怪 Apple 生态能「真香」。 Apple Watch 继承了 iPhone 的支付体验，比起小米手环 3 NFC 版，刷公交卡快多了。至于别的…因为我身处某不知名小县城，本地的店铺基本上都支持但只支持蓝绿二维码作为移动支付手段。即便是美宜佳或者蜜雪冰城这种从体量和定位上都应该标配 POS 机的地方，都只配备了扫码机，甚至只有二维码。二维码已经几乎垄断了小额支付，导致银行卡沦落到购买大件的专属。上次刷 iPhone 的 Apple Pay 是在本地的大型超市，但我还没到可以把逛超市变成日常的地步（因为抑制不住自己花钱），所以刷卡暂时还没用上。一定要说的话，受限于手表自身各种因素所以没有 iPhone 那么「闪」，但总归会比憨憨二维码快吧？大概。 再说说重量吧。比起小米手环 3 或者手环这一品类，作为手表的 Apple Watch 确实重不少。习惯了小米手环后换到 Apple Watch 看起来就是 20 克到 40 克的变化，实际发生的时候「异物感」仍然存在。轻量是几乎所有手表都无法企及的、手环独占的优势。当然，适应期只有最开始的几天。后来，情况逐渐演变成了：能够感知到 Apple Watch 的存在，却并不觉得这种重量让人不适。习惯于使用手环的人，在切换到手表之前建议稍加关注。 无论可自定义功能和第三方应用如何，是「智能手环」还是「智能手表」，其最终作用都相差不大，都会融入使用者生活，成为难以发觉但又不可或缺的一部分。从这个角度来讲，Apple Watch 确实就是一个「大手环」。褪去浮华的包装，真正能留住人的，不仅仅是生态本身，更是生态所带来的人文关怀。Apple Watch 提供了 Apple 一直致力于提供的完整的辅助功能体验，尽管这对于我来说起不到什么作用。真正让我关心的，是将我上面所述的那些褪去「功能」的外皮后所剩下的灵魂。这种灵魂体现在每一次 Apple Watch 提醒我起来活动，体现在每一次 Nike Run Club 在我跑完步后都让不一样的人用不一样的话语传递相同的鼓励，也体现在「健康」应用内的种种提醒与设置，这在近年来频频出现的 Apple Watch 以各种方式拯救生命的新闻中已经被展现得淋漓尽致。 这才是 Wear OS 乃至一众 Android 阵营的智能穿戴设备缺少的东西。市面上的很多产品都在模仿 Apple Watch，可皮毛的模仿不足以体现出公司产品灵魂所向，尤其是如果这个公司还既 996 又 251。这种人文关怀同样体现在了 Apple 这么多年积攒的广告中。每年的贺岁档广告，从《老唱片》、《三分钟》到《一个桶》、《女儿》，说白了都是在做营销，但它能给人在别家广告中找不到的感动。这是我不喜欢 Apple 的一些产品，不喜欢 Apple 高昂的定价，却对这家公司颇有好感的原因。 说到这里，我仍然看好 Wear OS 的发展。其原因我已无从知晓，也许就是一个 Google 出品，一个 Android base，一个开放生态，或者只是一个按下表冠后环形展开应用列表的流畅动画（Xiaomi’s Apple Watch clone 出来挨打）以及种种类似的细节……甚至听起来就十分不可靠的「回忆」，初次使用智能手表时的 bittersweet。其实挺奇妙的，这种理由居然也能成为选择某一平台 &#x2F; 系统的驱动力。但它就这样发生了。因此，我不会停止，也从未停止期盼。 或许就此止步写着写着，一篇本来应该像前文一样的总结，变成了一个老叔叔（迫真）的自言自语。如果你还想问我是否推荐，我只能说不推荐。小米手环 5 NFC 版是性价比更更更高的选择。但如果你需要一块智能手表并且恰好拥有 iPhone…除了 Apple Watch，还有什么更好的选择吗？ 感谢你阅读到这里。 Rachel","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.rachelt.one/tags/iOS/"},{"name":"Apple Watch","slug":"Apple-Watch","permalink":"https://blog.rachelt.one/tags/Apple-Watch/"},{"name":"Android","slug":"Android","permalink":"https://blog.rachelt.one/tags/Android/"},{"name":"Google","slug":"Google","permalink":"https://blog.rachelt.one/tags/Google/"},{"name":"Wear OS","slug":"Wear-OS","permalink":"https://blog.rachelt.one/tags/Wear-OS/"},{"name":"智能穿戴","slug":"智能穿戴","permalink":"https://blog.rachelt.one/tags/%E6%99%BA%E8%83%BD%E7%A9%BF%E6%88%B4/"}]},{"title":"当我从 Android 迁移到 iOS","date":"2020-07-31T02:05:17.000Z","path":"articles/on-migrating-from-android-to-ios/","text":"作为一个 Android 折腾爱好者与 已经没脾气了的 谷粉，对我而言，iOS 曾经是最「不黑不快」的系统，它由内而外的封闭以及 Apple 的孤傲与开放、先进、自由的 Android 形成鲜明对比。然而，随着时间的推移以及 Apple 的不断努力，iOS 确实在进步，变得越来越用户友好，再加上近年 Google 的作风和隔壁 Apple 越来越像（通过 GMS 和残缺 AOSP 控制手机厂商、逐步缩紧用户可折腾的空间），我也终于在某宝购入了一台 iPhone 8 作为自己的备用主力机。这篇文章将向各位阐述我使用 iOS 这几天内感受到的系统间的鸿沟，以及自身的一些看法与感悟，希望对各位有所帮助。 本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。本文中 Android 以 Google Pixel 搭载的 Android 10 及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态&#x2F;跨平台联动。 为什么是 iOS ？ Android 对国产应用的压制出了名的糟糕，国产应用的自造生态带来加大功耗、频繁唤醒等等问题的同时，其对权限的滥用却至今找不到比较好的解决办法。近年来 Google 和国家部门一直在努力，但收效甚微。同时，国产软件在 Android 端的优化堪忧，有时好不容易推了终于流畅的新版本，下个版本的垃圾代码又让整个应用「一朝回到解放前」。 此外，我是个比较严重的系统洁癖，主力机用着 出国魔法 享受着 Google 生态带来的便利的同时，一直希望能将国产应用彻底隔离。Island 虽然能够创造一个独立的工作用户，但终究无法避免国产应用到处拉屎，而 iOS 却能彻底让国产应用的屎不被看见，也能使其更服从系统所给出的规范。 对 iOS 评价如何？国产应用用着太爽了。另外还是看下文吧。 非要太长不看版的话，iOS 很难满足老 Android 用户对手机的一些基础性需求。从 返回键 到 强大而全面的通知管理 再到 勿扰模式 等等等等（详见下文），如果你重度依赖依赖这些中的任何一个，不要来 iOS。但如果你愿意接受一些功能的缺失来换取 原彩显示 、 全局夜间模式 或是包含国产软件优化在内的等等 iOS 有但 Android 完全没有或很难满足的功能，那也没有更好的选择。 具体呢？下文将分为两部分细细讲解我所遇到的 iOS 与 Android 的差异。「软件」部分为第三方应用能够以较低成本完美解决的问题，其内容也更大程度上与我的偏好应用有关，「系统」部分则相反。开始之前，我们再回顾一遍文前语。 本文内容主观性相当大，主要基于我个人的使用习惯，并且一些饱受诟病的问题可能不会出现在文章中，欢迎理性讨论，欢迎补充。本文中 Android 以 Google Pixel 预载系统及部分仅限 Android 的应用为对比依据，iOS 以 iPhone 8 搭载的 iOS 13.6 及部分仅限 iOS 的应用为对比依据，且双方均不会牵涉到生态&#x2F;跨平台联动。 系统优势 粗列 细数 国产软件优化 这是让我选择 iOS 的最大原因，无须多言。 原彩显示 最让人大呼「真香」的还是原彩显示。影响色准，但在暖色光环境中（比如餐馆），与其拿出一台惨白甚至泛蓝的 Android 机，还是自动变成暖色的 iPhone 看着舒服。 权限管理 和 Android 上那坨不断优化却总还是屎的屎比起来，iOS 的权限管理值得夸奖的是 Android 缺乏的可使用网络控制。其它的方面倒也感知不强。 Taptic Engine 爽啊，可惜系统输入法用不到。系统输入法很烂反倒成了一个值得庆幸的点，它让我毫不犹豫地投入了讯飞输入法的怀抱，享受着打字震动的舒适。 夜间模式 0202 年居然还有系统不能无缝自动过渡到夜间模式，还有大批应用不能随系统切换？？？我讲完了。 生物识别 Android 乱七八糟的授权、五花八门的生物识别支持和千奇百怪的硬件在 iOS 上干干净净，大家都用一个规范，没人嚷嚷不安全。不需要 Riru &#x2F; Xposed 就能指纹支付，真好。 付款 我希望我能设定一次付款方式然后全世界通用，而不是每次在一个新应用付款就得登陆一次 PayPal 或者录入一次银行卡，或者更脏地跳转到隔壁蓝绿钱包。 可选应用语言 当我发现 iOS 居然可以针对应用改变语言时，Android 铁粉流下了热泪。对我而言，日常用英语，要给人看手机时临时给几个应用换中文，在 iOS 无比方便。 快速设置面板 对，就是以前 Android 通知栏的设置面板点击 Wi-Fi 名字会展开的那个东西，Google 将其扔掉而 Apple 把它放进了 iOS。整体效果还不错。 延迟 「音游杀手」先不说，即使是硬件和优化顶尖的 Pixel 、Galaxy S，延迟和 iPhone 比起来仍然有差异*。这是 Android 的问题，不是堆料加钱能轻易解决的，长久以来也从未被重视，不然也没那么多人买 iPad 玩音游。除此之外，K 歌时的实时耳返，也是 Android 用户永远的痛。 续航 1800 mAh 的 iPhone 8 比 4000 mAh 的 1+7T Pro 用的时间长（7T Pro 使用时长不到 iP8 三分之一）、用的电少，尽管硬件方面差别很大，但我不相信 iOS 在续航上比起 Android 没优势。 系统细节 整体上来看 iOS 打磨得还是很用心，抬手亮屏放下熄屏（Google 进来挨打），动画顺畅，大部分情况下操作符合直觉，值得夸奖。 系统劣势 粗列 细数 通知管理 稀烂。Android 的通知类别设计真的令人舒适。iOS 上我要关通知只能全关，不能只关闭「杂项」或者「群组通知」。就算这个按下不表，连重要通知打断勿扰这种关键功能都不存在…告辞。 未读通知提醒 iP 8 解锁很快，没注意通知中心就能回到锁屏前应用，状态栏没有任何异样，过十几分钟关了上个应用才发现桌面上有红点，好评，孩子很满意。 勿扰模式 稀烂。这个和通知管理同源，又和下文的设置项呼应。Android 上极其细致的设置让我能够放心地将勿扰模式一直开着而不担心漏掉任何我需要的东西，但 iOS 信息和通知都不能区分开…告辞。 设置项 简洁做过头了叫简陋。我不觉得只有我一个人不喜欢千禧年风格的拨号盘按键音，也不觉得只有我一个人认为自动旋转控制应该能轻松被找到，等等。这个太杂太乱但烂得不明显所以和整体散发着「不行」的勿扰模式分开了。 设置层级 Android 上设置分类和应用设置独立真的是很好的 practice。至少我不用翻来翻去找本来应该在「连接」（姑且这么叫吧）部分的 AirDrop，不用惊讶地发现「个人热点」居然又是子菜单又是主菜单，更不用在系统设置里找某个应用的设置。 返回层级 我不太理解 iOS 上对「返回」的实现，有时我要右滑，有时我要下滑，有时我要点击一个看起来是让我下滑的地方，有时我右滑然后整个页面在下滑或缩小，有时我只能点那个小箭头或「取消」……？？？ 动画 「成也萧何，败也萧何。」这是返回层级混乱的扩充与延伸。视觉效果的优异尽管会让人觉得很「流畅」，但也引入了逻辑混乱、动画拖沓这些无法避免的问题，最典型的例子是打字时「不跟手」「输入慢」。有时我更需要一台指哪打哪的设备，而不是不管我干啥，总得耐心等动画结束的憨批。 分屏 屏幕小，但「我可以不用，你不能没有」，这都什么年头了，一边水群一边看测评，或是一边看网页一边记灵感，真的这么难吗？ 推送 大一统的推送服务香吗？香。香的同时也带来了一些问题，比如消息虽然被推送了但并不会预载，点击跳转后还要过一段较长的时间才能让我看到通知对应的消息，有很强的割裂感，FCM 也会有但在我使用的应用中并没有这么夸张，就…见仁见智吧。 输入框 对，这是最大的槽点，iOS 「自作聪明」地将单行输入框设定为只能定位到单词，别说 Android 的光标放大了，连自由定位都没有提供，尽管输入法处 3D Touch 用习惯了也不能说不能用，但不能「所按即所得」同样让人「膈应」。 双击亮屏 我说完了。 系统封闭 想用旧版本？不行。想挂 SSH？不行。想连 Linux ？准备折腾吧。想本地装 Linux 就像 Termux？想 peach。 应用商店付款 比起 Play Store，App Store 不能在购买时选择付款方式无疑为自己减了分。一旦设置默认付款方式就无法在应用内购买时临时更换，如果有需要还得换到另一个应用改，至少我觉得挺麻烦的。 应用商店退款 两小时内即刻生效的后悔药是 Play Store 最让人舒适的地方。 旋转屏幕 难道还有旋转屏幕的方案比 Android 上设备一旋转就自动蹦出的小按钮更加方便吗？ 快速选择内容 Pixel 上多任务页面中，可以直接长按选中一些在应用内不支持选择的文本（使用 OCR）的那个功能，虽然看起来很鸡肋，但是从一些地方复制几次链接就能感受到这功能的方便了。 软件优势 粗列 细数 Apple Pay 得益于系统深度整合及 Apple 自身的号召力，Apple Pay 出门刷卡、乘坐公共交通都超级方便。但为什么又是「软件」呢？因为 Android 和更多小店都支持蓝绿钱包。 九折？ 就这。 软件劣势 粗列 细数 输入法 我在 Android 上选择能下滑输入符号、提供「选择文本」面板、纠错和词库极其智能…的 Google 拼音。目前还没在 iOS 端发现 alternative，那个 Gboard 屑得让人嗦不出话，讯飞堪用，但也只是堪用而已，习惯国产输入法的话应该会好适应一点。 自带应用 「拨号键盘」应该是个本质功能吧，但为什么又和其他功能同级而且还放在右边？「页面内查找」应该用得挺频繁的吧，但为什么非要我在地址栏键入内容才能在页面内搜索，而且还如此难以察觉？ 愿望单 穷孩子：我能不能把想等打折的应用加进愿望单然后等打折？App Store: No. 写到这里回望全文，其实更像是个人记录，从头到尾都是自说自话，甚至看起来是在为 iOS 挑刺。Android 当然也有自己糟糕的地方，但可能是出于长期的使用，我个人已经很难注意到一些细节部分的提升，但对细节部分的不足甚至缺失却十分敏感。两个系统没有孰优孰劣，我只是站在一个 Android 用户和多年老粉的角度，尽最大努力描述一种「culture shock」。 上面列举了很多让我个人不习惯的地方，可 iOS 真有这么不堪吗？当然不是，否则其受欢迎程度实在是让人难以理解。我也会持续使用并适应 iOS ，也许在一些问题随着习惯改变而解决的同时，另一些问题又会浮出水面。无论如何，欢迎在下方讨论，更欢迎提出不同观点。感谢你能认真地读到现在。 *：数据来自 Superpowered 。","tags":[{"name":"iOS","slug":"iOS","permalink":"https://blog.rachelt.one/tags/iOS/"},{"name":"Android","slug":"Android","permalink":"https://blog.rachelt.one/tags/Android/"}]},{"title":"写给初烧的 HiFi 耳机系统入烧指北","date":"2020-02-03T12:10:42.000Z","path":"articles/new-to-hufi-cookbook/","text":"WHY?为什么要入烧很简单——为了满足自己的耳朵对音乐的要求。不同品牌不同价位不同风格的设备，给人的感觉完全不一样。初烧，意即初次涉猎发烧，是对 HiFi （高保真）的初次追求，或者说，是对满足自己耳朵的声音的初次追求 （毕竟 HuFi） 。不需要一直深入烧钱，即便浅尝辄止，入手一套适合自己日用、能够给自己带来享受的音频设备，应该也是相当重要的一件事。鉴于初烧预算、便携度等限制，本文仅探讨耳机系统，不会涉及到更好更 HiFi 也更贵更玄学的音箱系统。 为什么要写这篇文章音频设备一般符合「一分钱一分货」定律（当然超出其使用价值的话也会有「一块钱两分货十块钱三分货」的操作），对于初烧而言尤其如此。这篇文章旨在通过容易理解的语言，帮助各位避开可能存在的坑，以使把钱花在刀刃上。 事实上是看到身边太多人买智商税实在忍不下去决定干脆写篇文章代替一个一个解释半天 HOW?了解基础知识众所周知，HiFi 行业鱼龙混杂，价格也好、描述也好，争议往往是一波又平，一波又起。这其中，私以为可以分为两派：一派以老烧为首，强调以感知参数作为主要指标来评判耳机；另一派以声学工程师为首，强调以客观数据作为主要指标来评判耳机。尽管在一些地方，这两派撕得水深火热，不停地否定对方提出的一些观点、结论，但事实上谁也离不开谁。类似于声场、解析度、耳机素质、空气感这样的感知参数，属于容易听出来、也最容易被注意到的部分，是普通人评价任意一款耳机不可避免的用语，而事实上这些感知参数的形成，又与客观数据，例如音色、频响曲线、动态范围等，密不可分。而且，感知参数派在评价耳机时也会涉及部分声学术语，客观数据派也必须依赖于主观听感才能够给出最终的耳机评价。 综上，对于新入坑的小白，推荐从耳机大家坛新手入门区的这两篇帖子开始： 耳机入门–写给耳机初级发烧友（新手常见的七大误区）基础知识汇总 虽然这两篇帖子年久失修，但毕竟都是一些难以随时间而改变的知识（可能即使全世界音频巨头同时发话要重新定义一些概念，短时间内习惯都不会彻底改变，何况这种情况并不会发生），也要感谢这两篇帖子，让本文成为可能。 而同时， 家境平韩的 声学工程师大佬「鬼斧神工119」（知乎、B 站、微信公众号都能找到），从心理声学角度论述了一些描述音质的参数在客观数据上的反映，可以参见： 鬼斧神工119 - 知乎用科学的方式解释和破除HiFi中的一些所谓的玄学。 - 知乎什么是音质？哪些因素影响音质？怎样提升耳机和音箱系统的音质？ - 知乎太多了根本选不过来 不需要把相关资料全部都读完（这方面的文章、书籍等太多了根本读不完），这个也不会出现在任何一年的高考所以不必太深入，只需要了解概念及其定义，确保不会指鹿为马也不会被轻易误导即可。两派都有值得借鉴的东西，相信哪些，不相信哪些，都是个人的选择。 分清主次音频设备基本满足水桶效应，即任何一个环节出现短板都会影响最终的结果。对非短板的提升仍然能够提升整体素质，但对短板的加强是整体提升最快的方式。从声音的产生到其被传递到耳朵，大概会经过如下途径： 歌手、录音设备→媒介（流媒体、 CD 等）→数模转换、信号放大→线材→耳机发声单元→共振→耳朵 通常，第一环节（歌手、录音设备）不会有太大问题（要这里出丢人问题还开什么公司），最后环节（耳朵）也不会有太大问题（除非你的耳朵严重老化），因而我们需要尽力优化的就是从媒介到耳机的环节。 媒介，或称音源，主要以 320 kbps 编码的 MP3 格式出现，无损格式近年也变得触手可及。音源对声音的影响，远远不及后面二者。主观听感上，聆听流行乐时 320 kbps 与无损区别不大（可通过 ABX 测试验证）。不过，在有损压缩为 MP3 的过程中，确实有可能损失一部分人耳可感知的细节。因此，如果对音质有所追求，无损格式必不可少。 数模转换、信号放大属于播放器与耳放的问题。初烧阶段接触到的播放器与耳放，除非实在钱多得没地方花，仍然是一个很重要的影响声音的因素。失真不低、底噪极高等等缺陷，仍然不可忽视。不过当预算向上走，到达 2 字头四位数或更高，比起继续优化播放器，在耳机上做文章更值得考虑。 因为耳机负责了声音的产生与传导，决定了最终声音的频响与失真，是对整个系统影响最大的部件，往往也是需要花钱的环节。看看那些层出不穷的单元、分频、封装 、溢价 ……就算你不曾发烧肯定也没少听说。而线材对信号传导的影响极其微小，以至于可以忽略不计，所以请千万不要在线材上投入过多，只要不存在过量的损坏导致失真就行。 共振同样不可忽视，包括耳套和佩戴方式。举个例子，当你把耳机用力向耳朵里摁（尤其是平头塞），可以相当明显地察觉到某个频段或整体的声音有所改变。因此，尽管耳机自带的原厂耳套一定是最能贴合这个耳机的设计的，但为了耳朵能听到更好的声音，也可以考虑更换记忆海绵套、三节套，或是像山灵这种原厂提供的不同调音风格的硅胶套。并且，也请务必确保耳机佩戴到位。这不是玄学，这是物理学。 TL;DR: 对于可以花钱的环节，花钱优先级为：耳机&gt;播放器&gt;耳套&gt;耳放&gt;&gt;&gt;线材 ，其中耳放可根据耳机和播放器调整优先级，不过初烧阶段有个像样的播放器用来推动耳机就够了。 量力而行这才是最重要的点。不管你是学生还是刚步入职场的年轻人，是富豪还是生活在普通的白领家庭，在谈到发烧时，都不得不注意量力而行。 对 HiFi 感兴趣却未曾接触过除了手机附赠和低端价位的耳机的人，认为自己的耳朵不行、听不出音质区别可能很正常（至少本人是听周围想花钱入烧又把钱败到了别的地方的好些人这么说），不过当你实际试听一款拿得出手的音频系统时，就会发现其实多花这几百上千元挺值得的，可以感受到和百元塞相比质的提升（耳朵确实不好的人当我没说）。 那么为什么又要「量力而行」呢？很简单，因为你的耳朵终究有上限。￥99 到 ￥999 如果称为一个飞跃，那么 ￥999 到 ￥9999 的提升，大概有一半以上是溢价。拜物教让许多「老烧」盲目追求或许并不起眼的「提升」，这本身不可批判，毕竟人家赚的钱人家爱怎么用怎么用，但如果你读到了这里，我个人而言相当不建议你走向这个极端。￥9999 与其在音频设备上打水漂，不如分一半去三亚旅游（够七日了），或者去给喜欢的人买施华洛世奇。毕竟，追求音乐带给人的快乐，而非对比不同耳机有什么连声学仪器都难以检测的差异，才是发烧的根本意义。 单反穷三代， HiFi 毁一生。 参考：人耳的听觉极限 - 知乎HiFi 系统的木桶效应与选购策略 - 知乎零差别测试简介 - Bilibili入耳式耳机耳套终极对比测评 延伸阅读：（这里原来想去耳机大家坛找点推荐，不过转了一圈都不太满意…还是读鬼斧神工大佬的客观数据来得靠谱）有哪些便宜但音质特别好的耳机推荐？ - 鬼斧神工119的回答 - 知乎入坑耳机别走弯路：耳机入门详解 - 知乎 Live耳机发烧少走弯路！耳机选购指南 - 知乎 Live","tags":[{"name":"HiFi","slug":"HiFi","permalink":"https://blog.rachelt.one/tags/HiFi/"}]},{"title":"Dating While Dying [译]","date":"2020-01-01T14:39:44.000Z","path":"articles/dying-while-dating/","text":"我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。 本文来自纽约时报，原文作者 Josie Rubio ，文章源地址： Opinion | Dating While Dying - The New York Times 。译文对原文部分句子语序略有修正，以符合中文需要。鉴于原标题在表意上的无可替代性，将其保留不译。 某个晚上，当我和一个朋友去酒吧与我在约会软件上认识的人见面时，她问：“你对这些人都说了什么？”我打开资料页，把手机递给了她。 “我身患癌症，所以如果你想约我出去逛，马上行动！”第一行这么写道。 “很不错嘛。”她笑了笑说。 一年前，当治疗收效不佳而我日渐病重时，陪伴我 12 年的男友去伦敦出了趟差，在那儿他与一个老朋友，最近分手的普拉提教练，“重建联系”。那之后他为自己定了去欧洲的单人旅程，我偶然听到他说他坐在她摩托车的后座上骑车转悠，抓着她臀部的时候有多么有趣。他也说他很享受一个人走走而不用思考癌症的感觉。显然，还有我。 就这样了。我们的关系到此为止。我在 40 岁时病情晚期，还始料未及地单身。我不知道还有什么比这可怕。 我的癌症没有离开。它被当慢性病对待。我肯定会死于它了，如果我没被公交车撞上的话。（为什么人们总是把那当作死于癌症的替代品？“你可不知道！”他们欢快地说，“你也可能明天被公交车撞上！”）医生们用治疗、注射和输血为我买来时间与健康。我还能健康几个月，如果幸运的话。但总体上，很可能没多少时间了。 事实上，我已准备好死去而非再去约会。从一些人对我所说看来，作为一个 40 多岁的单身妇女，我可能也已经死了。 分手后，我拒绝去约会。我知道病情恶化前我只会有有限的时间与我关心的人在一起了。为什么我还会想去见陌生人？然而，朋友们推着我去。有时就是字面意思。在哥本哈根的 Octoberfest 上，我拜访的朋友将我带入一群身着皮裤醉醺醺地唱着跳着 Time Of My Life 的丹麦人时声明：“你不能让你最后的经历如此糟糕。” 回家后，我的决心弱化了。某天晚上，我在音乐会上看到了前任和他离开我去追求的那个女人。我不觉得伤心或嫉妒，只是很轻松，是她而非我在吧台上放下信用卡为他的酒水买单。是时候迈出脚步了。 一个朋友帮我注册了约会软件。另一个朋友——乐意做我约会软件向导[1]的那个人——帮我搞定了资料页与照片。“这个人有张与 Bill Murray 一起的照片。”我第一次轻滑时注意到。“Tinder 上全是 Bill Murray 的照片。”我朋友睿智地说。 自我六年前确诊癌症起，我已有泵入静脉的毒物，插入脖子的管道，被移除的器官，施在身上的放射纹身。我剃了好几次头。我咳出过小块食道。医生们给我做了腰椎穿刺，还以一根针固定了我的骨髓。但以约会为名见一个陌生人还是让我心中充满恐惧。“我宁愿去做骨髓活组织检查。”我在赴约十多年来的第一次约会前这么和我朋友聊道。 但我去了。还不错。有趣，事实上。所以我摆脱不了，又约了几次。 在某次美妙的约会后，我认识到一个惨重的事实：我只能提供现在，无法提供有希望的未来。“你不知道。”一个朋友和我说。 “因为我明天可能就被公交车撞上？”我以虚弱的微笑回应道。一个月内，我鼻青脸肿，弄缺颗牙，擦破膝盖。那天早上，我差点走下路缘，闯入一辆驶来的面包车的路。淋浴时滑倒而死的可能性看起来正在排挤癌症。 “不，”她回答，“因为你可能 90 岁时还在和我抱怨约会的事。” 随着一切推进，我会定下一些约会规则，然后打破它们。我为自己付账，因为换别人来付感觉交易性太重。此外，为我与前任付了数年账后，这看起来仍像个好主意。首次约会时我通常不吃东西，因为那场面会很丑陋。 然后，在一次见面饮后，某人要求我与他共进晚餐，坚持付钱。在我像个中世纪国王般狼吞虎咽掉一块鸭胸时，我告诉他，我不吃小羊，因为它们很可爱，不吃章鱼，因为它们很聪明，但吃鸭子就没事，因为我读到它们可能是恋尸癖者。“如果你想想，”我对裹着大豆蜂蜜汁的熏鸭动叉子时说，“被吃掉是它们死后会发生的第二糟糕的事。” 我很擅长约会对话。癌症？恋尸癖？话题随便挑。 一个癌症晚期的人能在约会应用上做什么？我想，我与所有人想要的一样。我想要一个一起度过时光的人。他会告诉我我很好看。只是这都只为短多了的一段时间。病情再度严重时，我也不期待任何人陪着我。我的上一段关系让我感觉像个负担。事实上，他与我在一起相当幸运。我现在知道了。 我也曾（现在仍）害怕取得进展并伤害别人。那感觉很自私。但若我喜欢某人，我全情投入。人们可能会认为这是因为癌症，但我向来如此，从 1992 年 7 月 4 日我 14 岁时的第一次约会，从树木覆盖的林间空地上我坐在第一任男友的四轮车上，看着附近 SeaWorld 的焰火起。 我必须回家，但不想带回初吻。我们在流星下许过愿后，我就有了所需的引子。“你知道我这一年一直想做什么吗？”我说，提及自从他穿着 Guns ’n’ Roses 的 T 恤走进我九年级新生第一天的英语课时我就萌芽的迷恋。 “什么？”他问。 “吻你。”我说。然后我们在焰火下亲吻。 当某人最近发消息了解我们下次约会时我想做什么时，我回答：“我希望这不算太快，但我想做一件事，就是在除了下着雨的街角外的某地吻你。”显然，我还是那个 14 岁的我。 癌症给我留下伤疤，放射纹身和 Mediport ，但那次糟糕的关系给我留下了我有时无法看到的疤。我道歉太多，比如这次我把约会的纸巾打下了桌。“没问题，”他疑惑地看着我说，“我不会冲你大喊大叫。”我意识到我在等他责备我，就像前任会做的那样。 那个让我打破一些规矩的男人让我粉碎更多。我在他的坚持下勉强而糟糕地起舞，却全程笑着度过。我越过餐厅的桌子，与他十指相扣。我在公共场合从他那偷走亲吻。有时我都不认识我自己了。 我很开心，也很难过。 死亡不是个抽象概念。我一周一周，一刻一刻地活着。我活得充实，但我向来如此。在新的治疗后，有时我甚至可以不考虑癌症地走走。我同意我前任的观点：这感觉不错。1992 年的第一场约会以来，我就想找个人，感受我生命的一部分安定下来。但从 28 岁到 40 岁，我也仅是停留。说到这儿。 当我前任在分开那天吻别我时，我想：“这会是最后一次有男人吻我了。” 一些事弄错终究还不错。 [1] 原文为 Sherpa ，夏尔巴人，经常作为登山向导。","tags":[{"name":"译文","slug":"译文","permalink":"https://blog.rachelt.one/tags/%E8%AF%91%E6%96%87/"}]},{"title":"9102 的年度总结，献给陪伴至今的各位","date":"2019-12-31T12:45:09.000Z","path":"articles/2019-2020/","text":"春去秋来，一年将逝，一年伊始。 Rachel 高中生涯最后的 150 天，即将揭开序幕。 过去的一年，由于种种因素影响，最终没能好好地陪伴各位。社交也好，社团也好，忙于日常的自己占据了大部分时间，另一个作为极客、开发者的 Rachel ，露面则越来越少。 将来的一年，期待着随着 NCEE 的结束以及自用一大堆设备的更新换代，能与各位分享更多。 不管如何，今年的年度总结 ，想与各位分享生活中的 Rachel 。 年度单曲：《夏代孝明 - プラネタリウムの真実》（天象仪的真相） 专辑封面来自 Musixmatch ，点击可跳转至网易云 思考了很久，最终还是选定了这首《天象仪的真相》。夏代孝明的声音很暖，很能打动人心。这首歌本身素质也特别高，尤其是词，连续几个月霸占了咱日历上为数不多的空白位置。 可那些都很难成为这首歌占据这个位置的理由。从《久远寺有珠》，到《心拍数#0822》，这些歌都很出彩，会喜欢它们的人也远多于《天象仪的真相》，一度让 Rachel 难以抉择。 事实上，《天象仪的真相》给 Rachel 带来了一种难以言喻的熟悉与陪伴感。不知道是谁曾给过 Rachel 这样的感觉，但一听到夏代孝明的声音，就仿佛那个人一直在身边。有时耳机里播着这首歌，躺在床上回忆自己的一天，也会想到，这样活下去，或许也挺好。 希望你也能想起某个能给你力量的人。 天象仪描绘出的未来 微不足道的天体与感情 与今晚 2 时的天体一同歌唱吧 不需要什么理由 我在你的身边 想要描绘出那样的日子呢 每一分每一秒 年度视频：《【露露】地球最后的告白️♥【我却现在才喜欢上你(｡ì _ í｡)】》 视频封面来自哔哩哔哩，点击可跳转至原视频 与《天象仪的真相》不同，选出这个几乎是不假思索。在最孤独最无助最无法支撑自己见到明天的那些夜晚，当夕阳的余晖隔着迎风起舞的露露和一层屏幕照耀着 Rachel，脸上不知何时就已泛起微笑。 这个视频已经被 Rachel 安利过给无数人无数次了。从 8102 的某个下午开始，它一直是 Rachel 的小宝藏。希望大家也能在露露的舞中找到力量。 明天也要努力活下去啊。 尽管胆怯 不过现在的话能说出口呢 将地球最后的 告白 年度游戏：《魔法使いの夜》（魔法使之夜） CG 截图，来自 Rachel 的 Twitter 又一个不假思索选出来的项。Rachel 一直以为自己对 Gal 不会感兴趣，先前玩过的也从没有耐心推完，直到今年摸到了 2012 发售的《魔法使之夜》。作为补全型月世界观的必做功课，型月四花旦中仅靠一款作品就能得到一席之地的《魔法使之夜》具备着其特有的魅力。无论是穿插着非正常因素的同居物语和「不愧是蘑菇」的人物与世界观，还是众主创跳票数年换来的、甚至连动画都不一定能做到的视觉小说体验，《魔法使之夜》在未来，可能只能被其续作超越了。 所以蘑菇到底什么时候出《月姬 R》和《魔夜 2》啊！ 你们给 FGO 氪的每一单就是《月姬 R》和《魔夜 2》坟头上的一把土啊！ 型月发售《魔 2》日，家祭无忘告乃翁 那是一句咒语。包含着她那些复杂想法的诀别。 那是能够倒回某人的幸福时光的，青色的魔法之声。 年度电影：《Fate&#x2F;stay night [Heaven’s Feel] Ⅱ.lost butterfly》（命运之夜——天之杯II ：迷失之蝶） 正式海报来自豆瓣 《天气之子》和《复仇者联盟 4》都差点抢走这个位置，也都给 Rachel 留下了深刻的印象。然鹅，与《魔法使之夜》同源的《迷失之蝶》，是 Rachel 今年看得最爽的一部电影，也代表了 Ufotable 最高的制作水准。 还需要过多解释吗？明年 NCEE 之后《春之歌》也差不多该在国内上映了，我 ** 看爆！ 年度感谢：陪伴至今的各位从开始码字开始，不知不觉已经过了好几个小时了。打磨来打磨去，总也打磨不出一个能让自己满意的结果。还想分享的东西太多太多，比如 HiFi ，比如英语，比如模联，但限于本文的布局，要插入些什么实在太难。 2019 走了，崭新的 2020 即将来临。未来很长，感谢各位一路陪 Rachel 走来，也希望各位能一直陪 Rachel 走下去。那时各位面前的 Rachel ，一定也会和从前，也和这篇文章一样，自顾自地说个不停吧。新的一年，还请各位多多包涵。 本文所用全部影像资料之著作权均归属于原作者，以非盈利方式使用。若对著作权有异议，请及时通知 Rachel 以予删除。你可以在 这里 找到联系方式，或直接 发函 。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"我与模联这两年","date":"2019-05-19T07:56:10.000Z","path":"articles/two-years-with-mun/","text":"本文长约 5300 字，全程无图，阅读约需 10 分钟，请放心食用。 急促呼吸，怦然相遇一天晚上，地球，浮现在了少年的眼前。他试图逃离，可终究敌不过那引力——「模拟联合国」五个大字，从此刻在了少年的心里。下方人才需求中标注的「技术爱好者」，让少年下定决心进入邵东一中模拟联合国，当时学校内唯一一个设置独立技术部门的社团。 这个少年是我。就是这样一个萍水相逢般的意外，让我与模联相遇。耗费了班上最后一张空白的招新表，我一路过关斩将，在公关总监学姐面前面对英文组的学术题瑟瑟发抖，最终如愿以偿地看到自己的名字出现在新社员名单中的技术部下。 直到此时，我尚未了解，何谓模联。 如鱼跃入水中培新会上，以出色的文件写作功底及身为俄新社记者反怼俄罗斯代表的勇气，拿下「最具潜力 MPC 」后，我与模联慢慢地被绑在了一起。 身兼技术人员与选手的双重身份，在第二届「校园说」辩论赛初赛中博得全场喝彩名列第三的我，与正方三位队友一起，用近一个月的时间共同为决赛而努力。尽管惜败反方，也没有拿到正方的「最佳辩手」，但最难能可贵的是收获了来自正方和反方的友谊。合影的那一瞬间，无论是正方、反方还是全体工作人员，脸上都带着发自内心的笑容。 不久，一个奶油色的日子来了。 17 岁生日这种东西，每个人生命中应该都会有一次，但是有一群朋友以及后辈陪着的，就很难找到第二个了。我们的秘书长就是这么一个幸运的人。那一天，每一个参与聚会的人在离开中伟楼前坪时，都至少带走了一块奶油。我们忍受着胃里翻江倒海看完了一部《烟花》，目睹了神仙抓娃娃一发入魂，还坐在德克士互相接受真心话的连番拷问，才恋恋不舍地结束这一个下午和半个晚上。 我们这些在连番拷问中不怀好意的人，最后都进了第一学期的 秘书长小本本 优秀社员名单。自己的期末总结在大会上被拿出来摘录要点的过程相当奇妙，尤其是自己瞎鼓捣的 官网 正式宣布的那一刻。 一个学期的终结，是另一场出征的开始。而这场出征，目标寒假市会。 这次市会，我们的成绩并不理想。法国——我是内政与权力下放部副部长——代表团的三人来自同班，关系本就相当要好，与外交流很少，导致后期法国几乎完全被孤立。再加上我的写作速度过慢，直到休会前一刻才上交决议草案（DR），排在第三，自然也就几乎不可能被投票。不管怎样，会议中我的每一次发言都能恰到好处地推动会议进程（除非是因为同时排在一个发言名单的末尾以及主发言名单的下一顺位），DR 也是三份中条件最合理、格式最规范（自认）的，这就足够让我满足。 会议结束了，法国团的三个人从此被连在了一起，也在未来撑起了我校模联的半壁江山，不过那是后话了。 在寒假结束前至开学后不久，首版明信片制作完毕。我们为了拍出足够好的一中照片，差点打开定时让手机从家属楼顶楼做斜抛运动。几天过去了，我们拿出了一套独一无二的明信片，并于发售之时几近售罄。 最后我们拍的照片没有一张做进了明信片就是了。 血管里流淌着彩虹色的傲气寒假市会后，还有一件事不得不提：我们开始为五一会议选拔学团成员了。寒假市会两天的疲累，使我相当一段长时间，甚至到高二都存在一种不负责，而因为这种不负责，我一开始并不乐意参与学团选拔，希望未来能够只操心自己的技术部。但我鬼使神差地，效仿在场的大部分人将自己的名字加入到了竞争者名单中，从此便注定再也无法从学术中脱身。 寒假的最后几天，一群不知「会场设计」为何物的萌新，于几个小时内赶制完成了一堆半成品会设。最终，其中的三份被选入本届大会学团，其中就有我。当时的我还并非主席团指导（DH），只是一个普普通通的主席团成员（DM），会议的议题也并非出自我手。不久，我的「LGBT+ 群体人权问题」就被重投票为议题，我也担起了被推给我的 DH 的责任，这才确定了我的位置。 另一件事，关于我心心念念的技术，此时发生。学校成立了所谓「兴趣小组」，来为学校的荣誉聚集人才、参与竞赛。这本来并非坏事，但它也就不偏不倚地撞上我的底线。我反感学校对兴趣的利用、对学生的欺诈，以筹备五一会议为理由，不顾学校对我「国家级奖项」的评估，要求退出。为了留住我而抛出的「解散模联」的威胁使我更加愤怒，甚至对学校反向威胁，明确表达自己不参与的态度，才成功脱身。 我，也终于能够静下心来，好好地为这一复杂的人权议题做学术储备。 五一来得很快，走得也很快。我第一次认识到自己的潜力，第一次以 DH 的身份领导学团，也第一次将自己的学术能力大幅提升。彼时我从未参与过省会，与外校学团成员的第一次相遇，也就发生在这一略显平淡的日子。由于身体原因，我一整个下午都感觉很困很恶心，这磨掉了我的精力，使我不得不到一旁休息。好在有秘书长以及代表对会议进程的推动，我们顺利地完成了一天的议程，并且通过了一份写得不错的 DR 。 这次五一会议结束后，我对学术的排斥加剧，不愿再参与会议，直到这种感觉连同我的不负责，在高二过半时一起消失。 高二前的组委换届中，学姐将一份双刃剑般的邀请递给了我——作为公关总监，继续活跃于模联。我为这责任所怖惧，为新的可能而兴奋，为经验缺乏感到担忧，却毫不犹豫地选择接受，勇往直前。 兵马未动，粮草先行啪嗒。 是把备用机摔到地上的声音。 一位刚上任不久的公关总监，刚从主力机字库烧毁的绝望以及一夜不休的技术文献及 B 站动态的沐浴中清醒，差点瘫倒在暑假市会的会场后排。 此时，我也第一次意识到带队的痛苦。 好在第二天，新任副秘与老秘书长赶赴邵阳，陪着我度过了一个值得纪念的下午。晚些时候，我认识了邵阳一些与我一样的模联同道，也见到了很多熟人，他们将在未来扭转我的生活轨迹。老秘书长最后一次的管理与事务安排（和点评），则埋下了一颗定时炸弹。 在高三暑假的这几天中，新任组委还与再上任公关总监学长一起，共同挑战北京大学的学术能力测试。北大不愧是北大，即使舆论评价变差，面对英文委的题目我还是照样束手无策，无从下笔。 开学前，我们组委成员聚在一起，准备提前开始宣传，为招新造势。这个时候的我，仍旧没有担负起可担可不担的责任，参与了 沙雕 招新视频的拍摄，却未插手剪辑。再加上拍摄时素材的混乱，我们的努力付诸东流。同样也是因为这种对责任的逃避，宣传海报制作过程十分艰辛。辗转数人之手、历经数次改动后，我们才拿出成品。 最后，这种对责任的逃避，引爆了那颗炸弹。 希望于撕毁的绝望中涅槃高二第一个学期，各社团招新准备紧锣密鼓地进行。学弟学妹们进入了我们的接待群，提前了解何谓模联。据说此间，老秘书长的行为已存在越界。因为语言的传递导致的语气变化，不但这种「越界」恼人，我对老秘书长的印象也渐渐变成自负，不满开始累积。尽管现实或许并非如此，面对面交流的缺失也让我无法发现。一件小事使接待群中的学长学姐未经告知便被清理出群，这则是上一届组委对我们的不满。 这个学期，由于学校开学工作拖得过长，留给社团的招新时间很短，到班宣传都被取消，报名完全依赖对社团的第一印象。这一操作下来，很多潜在人才就此流失。尽管我们确实吸纳了许多有能力有决心也足够好的人，对于人才流失也只能惋惜。 期中前，我们举行了培新会。从头到尾唯一未与老秘书长直接交流的我，怨气在「听说」又一次「指点」后爆发。我不负责地罢会而去，选择在远处观望，直至上午过了一半才在学姐的劝说下回到会场。这是一场彻头彻尾的闹剧，但我们得到机会解决问题，将一切不满与不解全部展开。虽然中文委没有通过一份 DR ，会议失败，筹划这次会议的人却得以将部分无法再拖的问题解决。 我的一切，才走上正轨。 它是我赖以生存的呼吸没有参与社团活动的一个学期，过得出奇地快。高中生活的一半，就这样匆匆逝去。而我，也能够好好准备省会的维也纳会议。 学期末，省会背景文件 deadline 前，因为此前未在大型会议中担任过学团成员，我近乎忘我地投入到了学术中。最严重的时候，甚至午休时做梦，梦见的都是对我写作内容的反复修改。 两天的市会之旅，时间不长，过得很充实。与未曾谋面或是仅有一面之交的同道再次见面，一开始有点生疏，很快交流就变得密切。技术上协助解决问题的同时，我还在学术上为我校代表尝试搜寻生僻的资料。这两天，对我影响最大的，还是 DR 之夜。晚上 9 点，送别了另一位模联同道连同欢乐的几个小时，领队团在最里面的房间就问题和计划长谈。我回到房间，继续与同房代表投入到学术之中后不久，一通电话打了过来。 就在刚刚的房间中，我走后，响起了诡异的敲门声，以及与我甚是相像的笑声。然后，是死一般的寂静。对女生而言，这种状况引起的恐慌，足以让我尽力安抚，直至与会务总监聊到很晚。 事件结束直到入睡之前的学术时间中，我反复重放了去年的记忆。我似乎终于明白，领队，并非需要瞻前顾后管东管西，而是需要提供一种安全感，一种犹如父爱一般坚定的安全感。我还记得一年前， DH 深夜旅馆探班指导，外加楼下住着学长，我便有这种安全感。我开始明白，我或许并不需要多么全知全能，高一的各位也不需要我全知全能。作为领队，最重要的是能够临危不惧。即使所有人都无比慌乱，总还需要一个人能够冷静地观察事态。对于这群孩子，那个人必须也只能是我。 这次市会以后，模联对我的重要性逐渐提升。我开始觉得，这种基于学术与社团的友谊，值得我尽力维护。高二一年白驹过隙，看着高一逐渐成熟，我能感觉到自己剩余的时间不多。这种即将失去的迫切感，使我越发重视模联。 过了个年，省会就来了。在雅礼度过的四天，我与我们的代表们共同成长。我们经历了难忘的学术、难忘的议程、难忘的 DR 之夜，以及难忘的 甩节操 特殊活动（SE）和闭幕式（和坏耶最佳 CP 奖）。这次省会，我感受到了模联的魅力，也意识到了我所剩时间之短暂。这是我高中正式参与的最后一次模联会议，与部分代表一样，我亦有别愁，亦有希冀。纵使会前会中都比较累，我不后悔参与这次省会。我与来自全省各地的优秀人才建立了联系，与邵阳模联的各位增进友谊，更深入地了解了新一届模联人的能力，并与他们愈加亲近。 也正是在每天与组委、学团成员，尤其是同样来自邵阳地区的各位的相处中，我将模联融入进了我的日常生活，将模联放在首位。我原有的不负责，此时被一种用剩余时间发光发热的使命感取代，这种使命感让我扛起了所剩时间中社团管理的任务。 我还有一个地方放不下：邵阳市区，我所在市的中心。说来惭愧，我从未了解过市区。除了邵东，对九县三区的其余地域一无所知。开学前某天，补完课后，以拿省会落下的耳机为契机，我得以跑去邵阳，一个人在邵阳的街头流浪，在友阿的商铺间徘徊，将自己与这宝庆古城融为一体。与邵阳模联同道的相遇，更为这天增添了色彩。从半年前暑假市会萌芽的独游邵阳的愿望得到满足，连带着有人为伴的愉悦与逝者如斯的忧愁。 开学后，生活还是照常进行。会务中心、技术中心甚至公关中心三部门联动，完成了一套新的明信片。官网的 博客 也正式上线，用以发布学术文章及公告。 如一年以前，我们举行了一次选拔，敲定了五一会议的学团，却不像一年以前一波三折。会议准备顺利，虽然并非完美。我投入了许多精力，挖空自己两年的学术素养来指导学团以及代表，以使会议更加完善。尽管存在 BG 初稿毫无格式、代表不知有作业等等问题， SE 结束后，学团和组委成员坐在餐桌上时，留下的就只有对这一天的眷恋，以及对这届高一未来的希望。 因为工作狂的态度，我经常在说完、做完后对自己的言语、做法后悔，对自己是否已经当好了一个公关总监产生疑问。我询问了前辈，也曾向好友倾诉，却仍在自认为做错什么后深深自责。这种情况，直到临近换届，才得到缓解。 时间过得真的很快，我的模联生涯，就这样即将告一段落。 明日，又隔天涯我最近一直相当乐意与高一的孩子待在一起。要说原因，我想，大概是因为他们身上充满着的朝气与活力，让我看到了一年前的我自己，让我有一种错觉，似乎我还能生活在模联。 但事实上，每个部门都在确定换届人选，进行工作交接。 我，估计是那个最不舍的。 我亲眼看着他们走过这一年，看着他们从不谙世事，逐渐懂得何谓能力，何谓责任。 我以自己的能力撑起了本不该由我撑起的责任，换来的是在离别时加倍的难过。 我还想以代表的身份参一次会，去感受模联的蓬勃生机。 也许是我过于感伤了。我只是进入高三，暂时告别社团生活而已。我随时都可以回来探望，我也相信在我培养出来的人才的领导下，我们邵东一中模拟联合国协会，定将继续蓬勃发展。 最后，请允许我以蔡琴的一首 《渡口》 ，于此道别。 让我与你握别 再轻轻抽出我的手 是那样万般无奈的凝视 渡口旁找不到 一朵相送的花 就把祝福别在襟上吧 而明日 明日 又隔天涯 当繁华落尽我在高二的最后一个月，如实地以当事人的角度记录下我经历的一切，力图还原我看到的事件全貌，聊以慰藉。未来还有很长，我将记忆封存，相信这样便可安心踏上新的旅程。 我们法国团三人，最后成为了秘书长、公关总监和会务总监，并且关系依旧很好，本文写成前一天还一起在图书馆自习。 与我关系不错的同道与我也保持着联系，和开始一样，能够抛出各种玩笑，不为伤及关系而担忧。 如果你是新任组委成员，请接过我的坚守，稍作休整后再次上路。我只能以一句「加油」寄予，而你终有一天会明白我字里行间的意义。 如果你曾与我并肩，无论是否是模联人，无论现在在邵阳、长沙还是全国各地，我相信我们的友谊断续后会愈发坚固，我们总有一天会相聚。 如果你来自 Telegram 或 Twitter ， Rachel 与你们永远同行。 如果你与我素昧平生，感谢你能够用这么长的时间阅读一个陌生人。 谨以此文纪念我不朽的两年守望。 我所参与过的会议： 会议 委员会 议题 席位 正式奖项 2017 邵东一中模联培新会 主新闻中心 阿以冲突的缓和与解决 俄罗斯新闻社 最具潜力 MPC 2018 寒假邵阳市会 欧盟部长级会议 欧洲难民问题 法国内政与权力下放部副部长 无 第三届五一会议 联合国大会第三委员会 LGBT+ 群体人权问题 主席团指导 无 2018 邵东一中模联培新会 联合国安全理事会 阿以冲突的缓和与解决 主席团成员 无 2019 湖南省会 特殊委员会 1814-1815 维也纳会议 主席团成员 无 第四届五一会议 联合国环境规划署 全球气候变暖问题 学术总监 无","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"回忆","slug":"回忆","permalink":"https://blog.rachelt.one/tags/%E5%9B%9E%E5%BF%86/"}]},{"title":"用 Travis CI 配合 Hexo ，快速入门持续集成","date":"2019-04-04T16:43:09.000Z","path":"articles/from-hexo-to-ci/","text":"此前，我们曾在 这篇文章 中探讨过使用 Hexo 和 Git 实现 VPS 上博客更新的方法，而对于搭建在 GitHub Pages 上的博客，尤其是各位正在阅读的文章所属的、将源代码丢在 GitHub 上的，每次都手动先 deploy 到 gh-pages 再把程序 push 上去……各位感觉如何咱不知道，但是咱肯定坚持不下去，这肯定不是什么省心省力的好办法。 好在，「持续集成 (Continuous Integration) 」给了我们一个可行性相当高的方法。点一下，玩一年，开源项目不收一分钱的 Travis CI （下称 “Travis” ），因其方便性与高可扩展性，自然就成为了我们的首选。当然，本文所提只是 CI 相当浅显的一种用法， Travis 与 GitHub 结合还能够实现自动发布新的 snapshot 、集成多个项目一起进行编译测试等等操作，只要能本地完成的工作几乎都可以交给 Travis 。 对于已经在使用 Travis 的开源项目转为私有或是想在私有项目中使用 Travis 的用户，其也提供了 付费版 。 0x00 注册 TravisTravis 的注册十分简单，只需要使用 GitHub 帐号登入即可，在此不多赘述。 0x01 部署为了开始在 repo 中使用 Travis ，我们首先需要在 Travis 的后台启用目标 repo 。随后， Travis 将开始监听这个 repo 的所有新 commit 。但这还不够，如果我们不使用一个默认放在其根目录下，名为 .travis.yml 的配置文件对编译过程进行控制，那么即使收到了 commit 也不会 trigger 这个 commit 的 build job 。幸运的是， .travis.yml 非常简单易懂好配置，以下给出了来自本博客的一个示范： language: node_js node_js: &quot;node&quot; cache: npm branches: except: - dev before_script: - npm install -g hexo - npm install script: - hexo g - mkdir ./public-git - cd ./public-git - git init - git config --global push.default matching - git config --global user.email &quot;$&#123;GitHubEMail&#125;&quot; - git config --global user.name &quot;$&#123;GitHubUser&#125;&quot; - git remote add origin https://$&#123;GitHubKEY&#125;@github.com/$&#123;GitHubUser&#125;/Rachel-s-Blog.git - git pull origin gh-pages - rm -rf ./* - cp -rf ../public/* ./ - git stage --all . - git commit -m &quot;Travis CI Auto Builder&quot; - git push --quiet --force origin HEAD:gh-pages 不难看出，除开前面一部分对环境的定义，后面几乎都是各位熟得不能再熟的 shell 脚本，而与真正的 shell 脚本不同的一点，就只有执行的地方位于 Travis 的服务器，而不是本机。 这个说法不算对。 Travis 还对脚本的运行时间等等做了一大堆限制，但是这篇文章内所谈到的内容几乎不可能触及这些限制。只要不是想在 Travis 的服务器上搭一个梯子，想必要被 Travis 强行关 build job 的情况应该还是很少见的。 考虑到各位已具备的相当基础，本文写到这里大可搁笔，大家再见（才不是 Rachel 懒了 哼唧）。 刚刚是什么东西在咕咕？总之，既然要定制自己的编译流程，就请各位继续向下阅读。 0x02 配置我们回到刚刚给出的，本博客的 .travis.yml 。 language: node_js node_js: &quot;node&quot; cache: npm ... 这几句定义了 build job 需要的环境。既然我们使用的是 Hexo ，那么自然就是 Node.js 。第二行是 Node.js 使用的版本，如果是 node ，编译过程将在最新的稳定版 Node.js 环境上执行。如果有特殊需求，可以将 node 修改为可被 nvm 安装的目标版本号。如果目标版本无法被安装，那么 build job 将被终止并且报错。 文档原文 ： If you need more specific control of Node.js versions in your build, use any version installable by nvm. If your .travis.yml contains a version of Node.js that nvm cannot install, such as 0.4, the job errors immediately. 如果有其它语言的需求，也可以查阅 官方文档 。没有的话， Travis 也提供了 添加语言 的入口，可以选择自己为这门语言提供支持。 ... branches: except: - dev ... 我们不需要 trigger Travis 的 branch ，就在这里被列了出来。通常如果没有频繁对主题等大修大改，这一段大可以删除。为了方便折腾，可以像这样添加一个 dev branch ，防止乱七八糟的临时改动参与 master 的编译。默认情况下 gh-pages 会自动算进去，如果需要加入编译，或者将黑名单改为只编译一部分 branch 的白名单，将 except 改成 only 即可。 ... before_script: - npm install -g hexo script: - hexo g - mkdir ./public-git - cd ./public-git - git init - git config --global push.default matching - git config --global user.email &quot;$&#123;GitHubEmail&#125;&quot; - git config --global user.name &quot;$&#123;GitHubUser&#125;&quot; - git remote add origin https://$&#123;GitHubKEY&#125;@github.com/$&#123;GitHubUser&#125;/Rachel-s-Blog.git - git pull origin gh-pages - rm -rf ./* - cp -rf ../public/* ./ - git stage --all . - git commit -m &quot;Travis CI Auto Builder&quot; - git push --quiet --force origin HEAD:gh-pages 就像一些卡牌游戏一个回合分很多个阶段一样， build job 也有很多个编译阶段，称为它的「生命周期 (job lifecycle) 」。一个生命周期分为 install 和 script 两个阶段，前者用来搭建环境，后者用来执行任务。同样地，这两个阶段前后（除了 install 后，那等价于 script 前）均可以手动执行一些任务。这些任务都是一个一个 shell 脚本。具体的编译流程，参见生命周期的 官方文档 。 before_script 中不需要添加 npm install ，因为那已经在 install 中被执行。本博客的部署与 script 中的命令有关。 首先， Hexo 被调用以生成所有的静态文件。然后，我们新建了一个文件夹，在这个文件夹中把 remote origin 源设置为了本博客的对应网址，将文件全部扒下来再删掉以确保 git 正常运行。最后， Hexo generate 的文件被复制进来，并被 push 到 gh-pages 。这样，一次完整的更新就完成了。 正如各位所见， Travis 支持环境变量的设置，并且可以选择在输出日志中隐藏（因为 Travis 的编译日志是可以随便看的）以确保安全。若要设置环境变量，直接到 Travis 里的 repo 首页，在设置页面里输入即可。 而为了方便 Travis 这类自动任务、防止密码被泄露， GitHub 提供了 personal access tokens 用来授权，每个 token 都能独立控制所能访问的内容，在 GitHub 账户设置里的 developer settings 可以找到。 0x03 然后…马上运行： git stage . git commit git push 并打开 Travis repo 页，看着 Travis 完成这一切吧！ 其实对于部署到 GitHub Pages ， Travis 也提供了一种简便的方法：通过 Travis 内置的 deploy 实现。 官方文档 中对其进行了描述，同样需要使用 personal access token 。虽然那样很方便，但是毕竟还是不能做到手写 git 命令这样高的可控性。如果各位对 Travis 足够放心，或者对各位记忆 push 步骤没信心，那么 Travis 提供的方案无疑是理想选择。 EoF. References: https://blog.nfz.moe/archives/hexo-auto-deploy-with-travis-ci.html https://docs.travis-ci.com https://github.com/settings/tokens","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.rachelt.one/tags/Hexo/"},{"name":"Travis","slug":"Travis","permalink":"https://blog.rachelt.one/tags/Travis/"},{"name":"持续集成","slug":"持续集成","permalink":"https://blog.rachelt.one/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"}]},{"title":"2018 ，这是 Rachel 的年度总结","date":"2018-12-31T16:00:01.000Z","path":"articles/2018-2019/","text":"不知不觉，又是一年过去了。这一年中，Rachel 失去了很多，但收获了更多。 Rachel 以为自己能够得到一种寄托，伸出手，却依然遥不可及； Rachel 将过往放下，沉住气，也许有更多美好。 Rachel 几乎没有碰 Android 开发也没有写博客，Ubuntu 也没有正常用过，但是仍然在一直进步，一直完善自己； Rachel 在日常文理两爆炸的学业压迫之下，每晚都有写一点东西，文笔也越来越文艺，或许将来有机会分享给各位； Rachel 还弄坏了两台手机，一台是服役很久的 Galaxy Note 3 (hltechn) ，一台是到手不久的 Essential Phone PH-1 (mata) ，今年也算是满足了 ； Rachel 终于能在夜深人静的晚上和各位聊骚了； Rachel 还看上了 1 月 11 日国内上映的《FSN [HF] I. presage flowers》，可惜现在没有人可以一起去看了； Rachel 倒是一直在追《卫宫家今天的饭》，别的番全都没追完，可能 Rachel 是个假肥宅，白瞎了 BMI 24 的身体； 对了对了，某理财软件花掉的那么多钱， Rachel 可都好好地记下来了； Rachel ……享受着与各位在一起的每分每秒。 2019，你好。新的一年，愿能与各位继续前行。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"将 Ubuntu 引导从 Legacy 转换为 UEFI","date":"2018-02-03T07:20:03.000Z","path":"articles/convert-ubuntu-from-legacy-to-uefi/","text":"最近突然心血来潮，想用 UEFI 装 Windows 10 玩玩，搞定了安装 U 盘后发现之前的 Ubuntu 一直使用 Legacy 作为引导方式。秉着人不折腾就会死的精神，弄了差不多一整天，终于将 Ubuntu 的引导方式从 Legacy 转为了 UEFI ，并成功地实现了 Ubuntu 与 Win10 双系统引导。为了方便各位作死，特在此分享出来。 注意：本文需要计算机引导的基本知识以及一定的动手能力，若不熟悉 Linux 命令行，虽可完成所有步骤，但不建议尝试。本文所述 Ubuntu 包含所有 Ubuntu 分支，例如 Lubuntu 和 Xubuntu 。 Ubuntu Legacy 转 UEFIStep 1. 建立 ESP 分区首先进入任何一个 EFI 启动 的、基于 Ubuntu 的 Live System ，使用 GParted 在硬盘首 2.2 TB 内分出 100MB 以上（推荐 200MB ）的空间，格式化成 FAT32 后 Manage flags 勾选 boot ，像这样： 图片消失在了卡塞尔 Step 2. 迁移 Ubuntu 引导文件反复确认网络没问题 ，然后打开终端，用以下命令安装 Boot Repair ： sudo add-apt-repository ppa:yannubuntu/boot-repair sudo apt update sudo apt install boot-repair 或者，你也可以使用 Boot Repair CD ，基于 Lubuntu 。总之，在一切完成后，启动 Boot Repair 。 图片消失在了圣芙蕾雅学院 等待数据收集完毕，在 Advanced options 选择 GRUB location ，如果原来是使用 Legacy 引导，那么勾选 Seperate /boot/efi partition ，选择刚刚在 GParted 中分好的区（这里是 /dev/sda1 ）。 图片消失在了八重村 点击 Apply ，然后跟着 Boot Repair 的指示做，并静等完成。 Step 3. 试试看！reboot Step 4. 跌进大坑？如果这里直接启动已经没问题，那么这一部分就到此为止了。如果有问题…… 关掉 Legacy 支持在 BIOS 的设置页面中，一般能找到类似于「启用 Legacy 支持」的选项。把它关掉 我们还能做朋友 即可仅使用 UEFI 来引导启动。当然如果已经爆炸这也没什么用处，可能也就只是确定确实是 UEFI 的问题而不是系统仍然在尝试走 Legacy 。 尝试用命令行重新安装 GRUB进入 Live System ， 确保网络通畅 ，用 GParted 记下原系统所在的分区（比如说我的是 /dev/sda2 ），然后打开终端，键入： sudo mount /dev/sda1 /mnt sudo mkdir -p /mnt/boot/efi sudo mount /dev/sda3 /mnt/boot/efi sudo mount --bind /dev /mnt/dev sudo mount --bind /proc /mnt/proc sudo mount --bind /sys /mnt/sys sudo mount --bind /run /mnt/run modprobe efivars sudo chroot /mnt 这时，这个终端已经切换 root 到了原系统并可以用最高权限进行一些操作，随后我们便需要在原系统上重新安装支持 UEFI 引导的 GRUB ，即 grub-efi-amd64 。 apt install grub-efi-amd64 grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu --recheck --no-floppy --debug 现在再重启试试看？ 将分区表从 MBR 转换成 GPT虽然 MBR(Master Boot Record) 并不影响 UEFI 的正常引导，但 Windows 却拒绝使用，转而要求用户切换到 GPT(GUID Partition Table) 。 Legacy 只能通过 MBR 引导，因此通常执行完上述操作之后分区表仍然采用 MBR ，强烈推荐更换到 GPT 。 要从 MBR 切换到 GPT ，操作也不是很困难，需要使用 gdisk 。首先在 Live System 中安装并以系统所在硬盘为对象运行： sudo apt install gdisk sudo gdisk /dev/sda 在 gdisk 启动后，目前的分区表情况会显示在屏幕中。为了将 MBR 转换为 GPT ，首先需要按 r ，进入 Recovery/Transformation 模式，接着 f 启动转换，若需要确认操作则输入 Y ，一切后用 w 保存并退出。此时，分区表就从 MBR 被转换为了 GPT 。重新进入 gdisk 可看到，原有的 MBR 分区表变成了 Protective ，而 GPT 变成了 Present 。 此时建议重新使用命令行安装 GRUB 或者重新运行一遍 Boot Repair ，虽然不确定不重新安装是否会影响正常启动。此外，按道理来讲是否转换并不会干涉 UEFI 下 Ubuntu 的启动， 但奇幻的是本人的问题在转换完后消失掉了…… UEFI 引导 Windows 安装Step 1. 安装 Windows 10傻瓜式的操作步骤应该没有问题（吧）…… Step 2. 使用 GRUB 引导 Windows 10这个也不难……请翻出 Boot Repair 进行一次 Recommended Repair ，然后应该就啥问题没有能够正常引导 Windows 10 了。 Step 3. Enjoy it!reboot References: UEFI - Ubuntu Documentation Which commands to convert a Ubuntu BIOS install to EFI&#x2F;UEFI without boot-repair on single boot hardware? - Ask Ubuntu How to change ubuntu install from Legacy to UEFI - Ask Ubuntu How to reinstall GRUB2 EFI? - Super User Does the UEFI partition either “MUST” or “SHOULD” be first for some reason? If so why? - Ask Ubuntu Steps to Convert MBR to GPT Ubuntu &#x2F; Debian with images - LinuxTopic WindowsDualBoot - Ubuntu Documentation","tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.rachelt.one/tags/Linux/"},{"name":"系统","slug":"系统","permalink":"https://blog.rachelt.one/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"BIOS","slug":"BIOS","permalink":"https://blog.rachelt.one/tags/BIOS/"}]},{"title":"时光抹去了一切","date":"2017-07-26T12:22:44.000Z","path":"articles/time-erases-all/","text":"你第一次看到她是在入学典礼上。 她向你走过来，背对着阳光。 好像天使下凡照亮了人间。 你开始买双人份的早餐。 你渐渐地习惯了两个人走在路上。 你享受着风吹起长发，带来一缕香味。 蹭在脸上痒痒的，忍不住去抚摸。 你和几个人去看了一场电影。 她趴在你的肩膀上低声哭泣。 你相信你会把她永远刻在心里。 数年之后，你不经意听到了这部电影的配乐。 你漫无目的地向前跑去。 像是在追逐浅梦中的天使。 你有一种熟悉的感觉。 好像心口的伤疤曾经写过谁的名字。 仔细想却什么都想不起来了。 你还是会习惯性地买双人份的早餐。 但你不知道你要给谁。 你看着昏黄的灯光下是拉得长长的一个人影。 你突然蹲下哭了起来。 双手茫然地抱住了头不知所措。 眼泪嵌进了石板路。 却想不起来关于她的一切。 你搬到了完全不同的一个城市。 你开始了新的生活。 你有了一份稳定的工作。 你忘记了说过的那些年少轻狂的话。 你忘记了她在入学典礼上展露的微笑。 你忘记了天使的模样。 你做了一个梦。 梦到了你完全不认识的一个人。 看起来好熟悉的一张脸。 醒来空余两行泪痕。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"技术共享的现状 - 生存还是毁灭，这是一个问题","date":"2017-07-08T09:33:12.000Z","path":"articles/to-be-or-not-to-be-that-is-the-question/","text":"「技术共享」是什么？它是一种信念。 毁灭Linux kernel ，作为在操作系统内核方面开源的先驱，距离诞生已有 24 年之长，并即将在 8 月 25 日迎来第 25 次生日。这个曾经在国际社会上引起巨大轰动的内核（底层），只在一波热潮之后便迅速被寻常百姓所忘记。即使是在第 25 个年头，基于 Linux 的系统（发行版）在市场上的占比仍然低于基于 Unix 的 macOS ，更别说和 Windows 比较了。 为什么？ Linux 提倡的是「技术共享」，也就是人人可查阅、人人可使用、人人可修改，任何人都能修改任何人修改&#x2F;创造的任何开源软件并根据协议使用。这本是一个非常超前的理念。然而，正是因为任何人都能以开源协议重新发布，使得 Linux 的发行版有…… 我数不清了丢个链接给你们你们自己数吧： List of Linux distributions 这么多种，碎片化非常严重，包管理器混乱，几乎每更换一个发行版，甚至每更换一个软件包，就得重新适应一遍并养成新的习惯。虽然 Linux 最开始的目的「技术共享」已经达到，每个人都能够获取到最新的技术，然而 Linux 对普通用户的吸引力并不高，「技术共享」对普通用户来讲仍然是一个可望而不可及的梦想。 而在用户占比上将 Linux 及其发行版远远甩在后面的 Windows ，在一些人的眼里从头到脚全是「罪恶」。闭源的内核，闭源的软件，闭源的一整个生态链，使得许多极客对 Windows 嗤之以鼻。然而，对于普通用户来讲， Windows 无疑是最好的选择。 为什么？ 「不用折腾」。 Windows 的用户都是渴望稳定的，他们不愿意折腾，他们也不需要折腾就能用上稳定的系统和软件，这在很多时候比「技术共享」和「自由」更有吸引力。 除此之外，不知道你是否听说过 Steam 。作为一个游戏平台， Steam 无疑是成功的，每年大量的打折活动给开发者和其背后的 Valve 带来了同样大量的利润。然而 Steam 上的游戏，大部分却只有 Windows 版本。与此相同，由 Adobe 所开发的 Photoshop 、 Premiere Pro 、 After Effects 等优秀应用，也只有 Windows 和 macOS 版本。这些游戏 &#x2F; 应用未必开源也未必自由，它们大部分都需要付费，导致了「某个游戏因为砸钱自己做了一套黑科技引擎爆红之后坐着收钱」，从而「同样的内容我的游戏砸钱买好引擎卖得更好」，又或者「某个软件因为秘密的优化技巧得到大量用户」。 它们之间有「技术共享」吗？恐怕各位都知道，当然没有。在追名逐利的 21 世纪，完全开放而自由的软件尤其稀少，而且大部分都被限制在了 Linux 及其各类发行版上，所以推广开来几乎是一个遥不可及的梦想。 Android ，作为 Mobile 端最大的操作系统，碎片化与 Linux 同样严重。暂且不说各种爱好者开发的第三方开源 ROM ，即使是厂商自己出厂预装，也有各种各样的不同，像 Sony 机型的 ROM 与 Samsung 的 TouchWiz 就完全不能扯到一处，更别说各类中国特色（比如 MIUI EMUI EUI Funtouch ……）了。 而 Android 的拥有者， Google ，正出于各种我们无法获知的原因逐渐降低 AOSP （ Android Open Source Project ）的自由度，收紧对 Android 的控制。曾经的 AOSP 源码内附带了一整套 Android 基础应用，从相机到日历再到浏览器，而现在， AOSP 内只含有极少一部分。厂商只有两个选择，一是抛弃大多数 Google 用户自己做一套，另一个就是支付高昂的授权费以内置 Google 的 GMS 。 Cyanogen 曾经有过一个宏伟的计划，想要建立一个完全 Google-free 的 Android 生态，最后却遗憾退场。也许你会这样说：「 Android 就是 Google 家的， Google 对 Android 的控制有何不可？」然而，如果当初就想把 Android 牢牢掌握在手中，又为何要将其开源？ 「技术共享」之所以不为人所看好，其中一个巨大的原因就是利益。现在大部分人的创造都只是为了利益，仅此而已。我的产品创意新，就能卖到更高的价格；我的开发周期比友商短，就能更早上市捞钱；我的宣传比友商好，就能坐拥用户资源，如此这般，等等等等。 生存Google 对 Android 的控制欲，在 Android 3.0 Honeycomb 发布的时候就已经体现出来。当时的 Honeycomb 几乎完全不开源，但 Google 很快就发现这样完全行不通，根本没有厂商会选择继续花钱升级到 Honeycomb ，大部分都仍然在使用 Gingerbread 甚至 Froyo 。这种大部分厂商落后时代的局面直到 Android 4.0 Ice Cream Sandwich 发布才得到缓解。 同样，在如今的应用市场上不乏能与闭源软件分庭抗礼的开源应用。比如，与 Photoshop 一样强大的 GIMP ，与 UltraISO 齐头并进的 UNetbootin ，以及完全找不到替代品的 VLC …… 知识不应当用来出售，知识应该共享。如果 Nikola Tesla 没有共享自己的发现，那么日落后的世界也许仍然漆黑一片；如果 Marie Curie 没有共享自己的成果，那么可能没有人知道辐射为何物；如果 Niels Bohr 没有共享自己的技术，那么历史书上的二战大概会到 1948 年。知识带来的应该是荣誉，而不是万贯家财。研究的原因应该是研究，而不是成果发布后的利益。 不管「技术共享」的现状怎样，当我们坚信未来会发生的时候，未来就正在发生。 愿每一个人都能获取自己需要的技术并得到帮助，不管白人抑或黑人，不管贫穷抑或富贵。 References: https://en.wikipedia.org/wiki/Open-source_software - Wikipedia https://en.wikipedia.org/wiki/History_of_Linux - Wikipedia https://www.netmarketshare.com - NetMarketShare https://en.wikipedia.org/wiki/List_of_Linux_distributions - Wikipedia https://en.wikipedia.org/wiki/Android_(operating_system) - Wikipedia https://www.oschina.net/news/63203/how-google-control-android - OSChina https://en.wikipedia.org/wiki/CyanogenMod - Wikipedia https://en.wikipedia.org/wiki/Nikola_Tesla - Wikipedia https://en.wikipedia.org/wiki/Niels_Bohr - Wikipedia","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Google","slug":"Google","permalink":"https://blog.rachelt.one/tags/Google/"},{"name":"开源","slug":"开源","permalink":"https://blog.rachelt.one/tags/%E5%BC%80%E6%BA%90/"}]},{"title":"用 PayPal 拯救你的 GlobalCash ，在 Google Play 完成付款","date":"2017-06-23T03:04:23.000Z","path":"articles/globalcash-paypal-google-play/","text":"最近 Google 对于 VCC (Virtual Credit Card) 的打击越来越沉重也越来越频繁，同时 EntroPay 对香港签发的 MasterCard 停止了支持，导致 GlobalCash 在 Play 中的付款处于长期用不了的状态。我曾经试着用 PayPal 绑定 GlobalCash 并试着在 Play 中进行付款而结果仍然是被拒绝。经过一番摸索，最后，我终于找到了一种能够绕过 Google Play 复杂检验机制的方法。 虽然 Google Play 应用无法使用 GlobalCash 支付，但令人意外的是， Google Payments 仍然能用，而且 Google Play 的电影也能购买。如果没有特别需要， 不推荐 使用本文介绍的方法。 用 PayPal 拯救你的 GlobalCash ，在 Google Play 完成付款Step 0. 注册一个 PayPal 绑定 GlobalCash因为我们需要使用 PayPal 中的余额完成付款，所以我们当然需要一个 PayPal 。 然后，点击右上角的 Sign up ，开始注册一个 PayPal 账户。 请选择对于账户的控制不算太严的个人账户。 输入个人信息后，因为 PayPal 的验证机制，无法在注册时绑定 GlobalCash ，那么就只能先跳过。此外，请务必注册美国区的 PayPal ，中国区会出现各种各样奇怪的问题甚至注册到 贝宝 ，这样的话哭都来不及。 在注册的时候会请求手机号码，这里如果有手机号可以填入，没有的话可以到 TextNow 注册，记得两个号码之间要经常发个短信什么的来保证号码不被收回。 在注册完之后，点击左下角的 Link a bank or card ，输入 GlobalCash 的信息，完成绑定。图上我已经绑定好了。 Step 1. 注册另一个 PayPal 空账户然后，和上面一样的流程，注册一个 PayPal 空账户。账户中不需要绑定卡。 像这样。 Step 2. 在两个 PayPal 账户之间倒腾钱Google 的机制不允许没有绑定卡的 PayPal 账户进行付款， PayPal 也不能从银行卡直接充值进去，因此我们需要把钱从绑了卡的账户转到另一个没绑卡的账户，然后再转回来。进入 Send &amp; Request ，然后选择 Send to friends and family in the US 。 输入另一个帐号的邮箱，点击 Next ，并输入金额。完成之后，点击 Continue ，钱就会自动飞到另一个账户。这里如果 Web 端没有办法发送一直报错，请试试使用 PayPal Android 客户端。 支付完毕后，另一个 PayPal 的零钱就多了所选择的数额。然而， PayPal 从银行卡转账的手续费同样奇高无比，因此请避免多次小额转账。登入另一个 PayPal ，当收到零钱之后，使用同样的方法再转回去。这样，像 Step 0 的最后一张截图，绑定了 GlobalCash 的 PayPal 账户就能得到一些零钱。然后，就试试在 Google Play 中购买应用吧！","tags":[{"name":"Google","slug":"Google","permalink":"https://blog.rachelt.one/tags/Google/"},{"name":"GlobalCash","slug":"GlobalCash","permalink":"https://blog.rachelt.one/tags/GlobalCash/"},{"name":"支付","slug":"支付","permalink":"https://blog.rachelt.one/tags/%E6%94%AF%E4%BB%98/"},{"name":"PayPal","slug":"PayPal","permalink":"https://blog.rachelt.one/tags/PayPal/"}]},{"title":"通过 GlobalCash 和 EntroPay ，在国内轻松使用 Google Payments","date":"2017-06-23T02:00:35.000Z","path":"articles/globalcash-entropay-google-payments/","text":"写在开头的开头Google 一直拒绝使用 UnionPay 和绑定了 UnionPay 的 PayPal 作为付款方式，这点各位都应该知道了。像我这样喜欢折腾又乐意为心仪的应用掏腰包的人，自然会去寻找更好的付费方式。 GlobalCash 是一个不错的选择，但是在 Google 禁止虚拟卡的打击之下，添加卡有时会无法绑定。若 GlobalCash 无法使用，我们就需要另找一个更可靠的支付途径，因此我找到了： EntroPay 本文原载于 鱼塘 ，因为原文发布时与现在的情况出现了较大差异，转载过来并进行修改。 通过 GlobalCash 和 EntroPay ，在国内轻松使用 Google PaymentsStep 0. 注册一个 GlobalCash GlobalCash 是香港易票联支付和 MasterCard 联合推出的国际通用支付账户，可以将港元和人民币使用离岸汇率转成美元付款，在允许 MasterCard 的国外渠道上特别有用。 打开 GlobalCash 的主页，如下图： 图片消失在了休伯利安 点击右上角的 免費獲取 ，在弹出的页面中输入所想要的卡信息。 图片消失在了潘多拉 在充值 300 CNY 之后，应该就可以在 GlobalCash 中登陆了。在该页面中输入卡号&#x2F;手机号，密码和验证码，之后大概会出现这样的一个页面： 图片消失在了彩虹桥 在上端图片的右下角，就是卡的图样。图样的左边，就是详细信息的查询入口。请务必确保除了自己和支付工具（例如 Google Payments ），没有任何人能够看到卡的详细信息。此外， GlobalCash 或许会要求实名验证，不过至少在目前，不记名卡的正常付款还未受到影响，只不过是无法提现和转账而已。若有这方面的需求，请在 GlobalCash 卡信息页面进行实名验证。 在国外，只需要拥有一张 MasterCard 或者 Visa 的 CVC 和 有效期 ，就能够使用那张卡付款。提高了便利性，但也为防止盗刷提高了难度。 Google Payments 等工具，在绑定卡时不会请求卡的支付密码，因为只需要 姓名 、 CVC 和 有效期 就足以验证身份并付款了，而不是 Google 与银行有什么奇怪的交易。 在这之后，就可以尝试在 Google Payments 里试着绑定 GlobalCash 的卡片了。如果可以，那么这一篇 Tutorial 就结束了。下文的 EntroPay 为无法使用 GlobalCash 时的替代方案，可以获取一个备用，不建议长期使用，手续费非常高。 GlobalCash 几乎不收手续费，汇率也经过了核对，请放心使用。 Step 1. 使用 GlobalCash 注册 EntroPay ，并使用 EntroPay 绑定 Google Payments EntroPay 则是由 Ixaris 在 2003 年所创立，给予所有人（不需实名）线上交易的能力的虚拟 Visa 卡片。创立得更早，意味着 EntroPay 已经被大部分公司，例如 Google ，所接受。 EntroPay 的官网设计值得称道。 反正比 GlobalCash 好 图片消失在了冬木市 看到了吗，就是那个大大的 GET STARTED NOW ，点击它，然后注册 EntroPay 。 图片消失在了佛罗伦萨 输入您的卡信息。完成之后，会出现这样一个需要付款（至少 $5 ）来激活 EntroPay 的页面（我这边已经激活过了，因此没有强制需要付款。若是新卡， EntroPay 左边的卡图样会显示 0000 0000 0000 0000 ）。 EntroPay 的手续费有点高，不过 坑爹呢这是 没啥，也就是一百美元叫你多出 $5 的样子（我认为看到这里的各位除了我都是壕）。 图片消失在了曼哈顿 付款之后，卡片就被激活了，可以在管理页面看到卡的信息。这个时候，账户的身份还是 Starter ，只能绑定一个卡，且付款、转账限额较低。通过在右上角“我的账户”的升级账户入口，可以将账户等级升高到 Basic 甚至 Premium 。账户升级完全免费（只不过是要求填一大堆资料，我直接填了 Google Payments 里面的，之前我随便找的美国地址。填写中国未测试）。 图片消失在了 Under World 现在，就能去 Google Payments 绑定这张 EntroPay 了。 EntroPay 被 Google 所接受，因此可以添加并使用。图上的实际 $5.99 可用 $5.00 ，就是我在 Google Play 买了一个应用做测试的结果。 请务必不要买自己不用的应用！请务必不要买自己不用的应用！请务必不要买自己不用的应用！刚买之后就找不到 Refund 了都是泪啊 Step 2. 如果已经成功注册到 EntroPay 且一切正常…PayPal 也是国际常用的付款&#x2F;收款方式，何不注册一个 PayPal ，绑定 EntroPay 并点击一下下方的按钮支持我呢？（至少看在我为了这篇教程浪费了 $0.99 的基础上……QAQ","tags":[{"name":"Google","slug":"Google","permalink":"https://blog.rachelt.one/tags/Google/"},{"name":"GlobalCash","slug":"GlobalCash","permalink":"https://blog.rachelt.one/tags/GlobalCash/"},{"name":"EntroPay","slug":"EntroPay","permalink":"https://blog.rachelt.one/tags/EntroPay/"},{"name":"支付","slug":"支付","permalink":"https://blog.rachelt.one/tags/%E6%94%AF%E4%BB%98/"}]},{"title":"这些库，推进了 Material Design 的普及 - Android","date":"2017-06-20T13:41:14.000Z","path":"articles/material-design-libraries-android/","text":"Material Design 自 2014 年在 I&#x2F;O 大会上与 Android Lollipop 一同发布以来，如今已经经历过三个春秋了。其以简洁的整体设计，质感与扁平相结合的风格，以及在平面设备上创新地进行 3D 变换（引入 Z 轴），对统一各平台用户体验作出了巨大的贡献。 在 Android 端，为了使应用 Material Design 化更加便捷，各种库更是层出不穷。从 Google 的官方支持，到对 Material Design 的全面覆盖；从小小的状态栏，到一整个 RecyclerView ……这些库，推进了 Material Design 的普及。 我不愿列出一张冗长的清单，我也不愿只是单纯地介绍我的使用经历，我将从易用性、 UI 和推荐度这三方面，详细地叙述我所想到的一切。 Android Design Support Library - Google易用性：★★★★ Google 官方的 Android Design Support Library （以下简称 ADSL ）是现在，仅论集成，最好用的 Library 。 Android Studio 对于 ADSL 的支持十分完善，新建工程时会自动导入， Android Studio 安装 SDK 时默认安装了 ADSL ，而且 ADSL 中所包含的大部分控件操作都比较简便。 然而如果有人说 ADSL 的易用性能够打满分，我绝对不敢苟同。虽然从第一个版本推出到现在已经过了两年， ADSL 的 bug 仍然不少。更糟糕的是，因为 Google 搜索得到的教程所使用的 ADSL 版本参差不齐，许多人也没有看更新记录的习惯，导致要么很多当前版本出现的 bug 没法解决，要么曾经出现而当前版本已经解决的 bug 被重新解决一遍影响代码可读性…… ADSL 的使用，还是乖乖地看官方文档吧。 UI：★★★★★ 作为 Google 官方的支持库， ADSL 当然会完全按照 Material Design 来设计，配合 Google 的其它 V7 库可以使应用完全地装备好 Material Design 后对外发布，塑造超赞的 Material Design 体验（只要开发者按照 Material Design Guidelines 来）。 推荐度：★★★★★ Material Design Android Library - Ivan Navas易用性：★★★★☆ 虽然是第三方库， Material Design Android Library （ MDAL ）的易用性不输 ADSL ，甚至在 ADSL 之上。引入同 ADSL 一样简单，甚至不需要额外的 AppCompat V7 ，在 ADSL 完善之前， MDAL 是一柄锋利的剑。对于应用体积的减小以及对代码更高度的控制， MDAL 完全能够胜任。 UI：★★★ 然而 MDAL 的 UI ， 十分糟糕 形容起来也不过分。滥用的波纹效果，不合理的间距、按钮大小，与 Material Design Guidelines 相悖的部分控件，奇怪的动画……除非 ADSL 真的无法完成需求，否则，对 MDAL 还是持保守态度吧。 推荐度：★★★ Material Ripple Layout - Balys Valentukevicius易用性：★★★★★ Material Ripple Layout （ MRL ）的使用非常方便，到了「写一行代码就能用」的地步。实际使用起来确实是这样。虽然 MRL Balys 只支持到 API 14 ，但是他同时也给出了向下兼容到 API 9 的方法。对于需要将应用做得大部分设备都可使用而又追求波纹效果的开发者而言， MRL 是他们的不二选择。 同 Robin Chutaux 的 RippleEffect 相比，虽然 RippleEffect 有更高的知名度和更高的人气，其易用性真的不怎么样。 MRL 虽然和 RippleEffect 相同，都要求开发者对波纹效果布局设置点击事件，但是如果点击事件设置到子控件， MRL 会延迟点击事件的触发以使波纹效果完全展示，而 RippleEffect 不会。也就是说，如果需要在一个已完成的工程上加入波纹效果， RippleEffect 未免太麻烦。 UI：★★★★☆ MRL 非常不错，它给了开发者将几乎与 L+ 完全相同的波纹效果一路兼容到 Android 2.3 的机会，可是， MRL 在一些动画的处理上略有延迟，而且若要兼容到 Android 2.3 就势必要放弃在列表中保证不会被滑动触发的措施。虽然其大体值得满分，细节上却是让人不很满意。 推荐度：★★★★☆ MaterialEditText - Kai Zhu易用性：★★★☆ 发布到公开仓库的 MaterialEditText （ MET ），曾经十分知名，在 ADSL 推出 TextInputLayout 前一度是许多开发者的首选，它的易用性却比起 TextInputLayout 稍逊一筹。 ADSL 因为需要和 AppCompat V7 联动，可以直接获取主题中所设置的 accent color ，而 MET 只能指定。除开 AppCompat V7 的部分， TextInputLayout 会直接使用内部 EditText 的 hint 作为浮动标签， MET 则必须手动指定。再加上 MET 设置项过于繁杂，虽然在一些时候这有优势，但是大部分时候繁杂的设置只会给使用带来麻烦的问题。 UI：★★★★★ MET 的设计就像 Google 自家的一样，和 ADSL 的 TextInputLayout 不相上下。简洁、美观且符合 Material Design Guidelines 的要求，大概是 MET 在 ADSL 祭出杀器前火爆的重要原因。 推荐度：★★★★ CircularAnim - XunMengWinter易用性：★★★★★ CircularAnim （ CA ）具有值得打满分的易用性，使用起来非常简单。无论是多么复杂的动画以及交互，只需要一行代码就可以全部搞定。而且， CA 支持使用图片作波纹效果，同样也是 一行代码的事儿 。 UI：★★★★★ CA 的 UI 非常不错，我曾经在一个项目中试用了 CA ，结果使人满意。如果项目必须兼容 Android 5.0 以下设备而需要用到 Reveal Effect ，那么就选择 CA 吧，无须赘言。只要在 GitHub 上面看一看效果图， CA 就必然能俘获所有犹豫不定的心。这是我唯一一个肯打全五星的库。 推荐度：★★★★★ TO BE CONTINUED…","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.rachelt.one/tags/Android/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://blog.rachelt.one/tags/Material-Design/"}]},{"title":"OpenWrt uHTTPd 与 OpenSSL 初探","date":"2017-06-05T02:00:35.000Z","path":"articles/openwrt-uhttpd-openssl/","text":"前些日子家里的 Phicomm K2 刷上了 OpenWrt ，苦于闪存剩余空间严重不足，只能玩玩已经有的那些个软件包，正好最近着迷于 Web Server ，于是便 又 折腾了起来—— Introduction &#x2F; 介绍 uHTTPd is a web server written from scratch by OpenWrt&#x2F;LuCI developers. It is aimed towards being an efficient and stable server, suitable for lightweight tasks commonly used with embedded devices and proper integration with OpenWrt’s configuration framework (UCI). In particular, it is configured by default for the LuCI web interface to administer OpenWrt. In addition, it provides all the functionality expected of present day web servers.—— 摘自 OpenWrt Wiki - uHTTPd 划一下重点： uHTTPd 是一个小巧精干的 Web 服务器，适合轻量任务，通常与嵌入式设备一起使用，而且提供了现在 Web 服务器的全部功能。 Configuration &#x2F; 配置 uHTTPd 的默认配置存放于 /etc/config/uhttpd ，非常简单，如下： config uhttpd &#39;main&#39; list listen_http &#39;0.0.0.0:80&#39; list listen_http &#39;[::]:80&#39; list listen_https &#39;0.0.0.0:443&#39; list listen_https &#39;[::]:443&#39; option redirect_https &#39;0&#39; option home &#39;/www&#39; option max_requests &#39;3&#39; option max_connections &#39;100&#39; option cert &#39;/etc/uhttpd.crt&#39; option key &#39;/etc/uhttpd.key&#39; option cgi_prefix &#39;/cgi-bin&#39; option http_keepalive &#39;20&#39; option tcp_keepalive &#39;1&#39; uHTTPd 的配置，比 垃圾 NGINX 要简单得多，我们来逐行看看：第一行， config uhttpd &#39;main&#39; ，说明了这个配置是设置给 uHTTPd ，名字为 main ，即主设置然后， list listen_http 和 list listen_https 则是分别声明了监听 HTTP 和 HTTPS 的位置以及端口， 0.0.0.0 表示监听本设备的 IPv4 请求。option redirect_https 表示将 HTTP 80 端口访问的请求重定向到 HTTPS 443 端口，在 NGINX 中复杂的设定 uHTTPd 一行就能搞定 所以说 NGINX 垃圾 ，然而，我们没有办法给 OpenWrt 签发一个不会被拒绝的证书，因此这个设置除非是在本地（访问 LuCI 的客户端）安装了证书或者有特殊的需要，抑或者花钱找了 CA ，基本无用。option home 指定了 Web 服务器的根文件夹，相当于 NGINX Server 块中的 root 。当收到数据包并建立连接时， uHTTPd 会读取这个文件夹中的文件并发送出去。option max_requests 和 option max_connections 则指定了最大并发请求数量和最大并发连接数量，这个数字越大，对 OpenWrt 的（可能）负载也就越大。当超过这个阀值时，请求和连接将被放入队列中等候。option cert 和 option key 则定义了网站签发的证书和私钥。 uHTTPd 默认使用的是自带的，虽然省心但是自带证书内含的信息还是太少而且总是提醒安全问题 说得好像自己证书的不会一样 ，在这里就可以使用自己的证书。option cgi_prefix 指的是使用 CGI 的时候脚本的前缀，是 option home 的相对路径。在本例中，因为 option home 指向 /www ，因此前缀就是 /www/cgi-bin 。 In computing, Common Gateway Interface (CGI) offers a standard protocol for web servers to execute programs that execute like Console applications (also called Command-line interface programs) running on a server that generates web pages dynamically.——摘自 Wikipedia - Common Gateway Interface option http_keepalive 和 option tcp_keepalive 定义了 HTTP 连接和 TCP 连接的常驻连接，以在需要时提高效率。这个数值的大小会直接影响到 OpenWrt 的负载。 Trying &#x2F; 实战接下来，让我亲自试试使用 OpenSSL 和 uHTTPd 来生成自己的一套证书并使用。 opkg install openssl-util luci-ssl 首先，安装 openssl-util 和 luci-ssl 包，总共不到 191 KB 。 cd /tmp mkdir ./cert cd ./cert 然后，切换到 /tmp/cert ，我们就在这里大干一场吧。 openssl genrsa -des3 -out server.key 1024 openssl rsa -in server.key -out server.key 这样， OpenSSL 会自动生成一个 server.key ，这就是我们用到的服务端私钥。在生成的过程中，会要求我们输入一个 pass phrase ，也就是这个私钥的密码。在之后的操作中，只要用到了这一步生成的 server.key 就会需要这个私钥。此外，如果不想要密码的话，可以通过 openssl rsa -in server.key -out server.key 去除。由于需要私钥密码的话我们自己需要在本地也安装好所生成的证书，因此我们 必须 移除密码。当然，最开始我们也可以直接 openssl genrsa 1024 -out server.key 来避免输入密码。 openssl req -new -key server.key -out server.csr 这一步是生成我们给 CA 签名，或者自己签名所需要的 csr 文件。在这一步中， OpenSSL 会请求很多信息，照填即可，像我的是这样： Country Name (2 letter code) [AU]:CN State or Province Name (full name) [Some-State]:Hunan Locality Name (eg, city) []:Shaoyang Organization Name (eg, company) [Internet Widgits Pty Ltd]:Pandora Box Organizational Unit Name (eg, section) []:LuCI Common Name (e.g. server FQDN or YOUR name) []:192.168.13.1 Email Address []:tangrui003@gmail.com 完成后，我们就生成了自己的服务端证书 server.csr 。 openssl req -x509 -days 365 -key server.key -in server.csr -out server.crt 因为 server.csr 必须要 CA 的签名才可使用，我们就来自己给自己签一个名。当然，如果有钱，也可以把这个 server.csr 下载下来丢到可信任的 CA 那里签。这里我们选择比较偏激的一种方法，直接使用我们的 server.key 和 server.csr 文件充当 CA 证书，用这两个文件给 server.csr 签名（就是自己签自己）。虽然说肯定不能用，但是自己玩玩还是够了。-days 后面接的是证书的有效期，我这里选择的是一年，以天为单位。这个时候，我们的证书原文件 server.csr 签名完成，并生成了一个 server.crt ，新的经过签名的证书文件。 cd ../ mv ./cert /etc/cert 接下来，我们把 cert 文件夹移动到 /etc 下…… vim /etc/config/uhttpd 编辑 uHTTPd 的配置文件，并把 option cert &#39;/etc/uhttpd.crt&#39; option key &#39;/etc/uhttpd.key&#39; 改成 option cert &#39;/etc/cert/server.crt&#39; option key &#39;/etc/cert/server.key&#39; 并保存。 /etc/init.d/uhttpd restart 最后，重启 uHTTPd ，看看效果吧！ 真(sang)是(xin)悲(bing)伤(kuang)好吧，这也就是我们想要的效果……管他娘的私密不私密在这里也要提醒一句， 自己签名的证书 100% 会报不安全 ，这也是无可避免的。当然，我本人也没有尝试过带私钥密码的证书连接，所以这个 100% 也有可能不靠谱。 References: https://wiki.openwrt.org/doc/uci/uhttpd http://www.huangcheng.name/read.php?156 EoF.","tags":[{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://blog.rachelt.one/tags/OpenWrt/"},{"name":"uHTTPd","slug":"uHTTPd","permalink":"https://blog.rachelt.one/tags/uHTTPd/"},{"name":"OpenSSL","slug":"OpenSSL","permalink":"https://blog.rachelt.one/tags/OpenSSL/"}]},{"title":"Google ，请还回我们的猫猫 [译]","date":"2017-06-03T05:05:58.000Z","path":"articles/return-our-cat/","text":"请还回我们的猫猫。 她美丽的微笑是我们在困苦时候所寻找的阳光。我想让 Google 重新考虑这个更改，因为她是保持这个国度团结一致的重要原因。 请不要狠心地抢走我们的猫猫。","tags":[{"name":"Android","slug":"Android","permalink":"https://blog.rachelt.one/tags/Android/"},{"name":"译文","slug":"译文","permalink":"https://blog.rachelt.one/tags/%E8%AF%91%E6%96%87/"},{"name":"Emoji","slug":"Emoji","permalink":"https://blog.rachelt.one/tags/Emoji/"}]},{"title":"为什么我选择离开","date":"2017-05-11T13:17:48.000Z","path":"articles/why-leave-coolapk/","text":"是时候离开了——我眼中的酷安 by neoFelhz 距离 neoFelhz 写下这篇文章，到现在，刚好四个月。 2015……时间，真的能够带走一切。它冲刷掉了我们原本以为永远不会消散的那些东西。谁说我们没有仇恨过？谁说我们没有疯狂过？谁说我们没有怀揣着梦想，四处奔走过？到最后却只留下淡淡的回忆。 我记得那是在…… 2015 年的五月份。作为一个年轻人，刚刚做出了人生中第一个拿得出手的作品的我，就这样与酷安相遇。没有过于浪漫的故事，没有浓墨重彩的铺垫，只是一切都刚刚好。那个时候的酷安，没有无止境的争论，没有无意义的应用，也没有不理睬用户的小编。我很开心，开心我遇到了这样一块小天地，开心我遇到了一群志同道合的酷友，更开心我能够得到赏识。弹指一挥间，七个月过去了。 2016……所有人都知道，当一个社区做大之后还要保存原来的高质量、高素质是一件相当困难的事情。况且，酷安本就会朝着「大」的方向发展。随着大部分主流 IT 媒体的报道，酷安，开始变味了。一开始只是少数新人的进入，我曾认为酷安还是那个酷安。事实证明，我错了。酷安是什么？不管酷安本心是什么，这个时候的酷安，已经彻底成为了新人的庇护所。同时，各种无聊的事件也接连发生。那个酷安，存在过吗？还是说那从头到尾，都只是我自己的幻想？ 2017……终于下定决心了。这是我选择的路。 也许，我还存有一份私心。我仍然希望酷安回到我熟悉的那个样子，那个小众但大家都很开心的社区，那个追崇 Google Play 而讨喜的应用市场，看到开发者大家都很开心而并不是如现在一样似乎一切都理所当然，看到个人开发的应用脑海里就会浮现“精品”两个字，没有对一件事情无休止的撕逼，没有如此之多的、泛滥的应用。 我不能忍受的是这个乌烟瘴气的环境。我不能忍受的是这群张口闭口只会「讲道理」的用户。我不能忍受的，更是那远去的回忆再也无法找回的现实。 或许最近的柳大事件确实，激起了一阵风波。我只是希望能够永远站在公道一边。如果认为我任何一个地方做得不够好，欢迎随时向我提出来。世间公道自在人心。 我并没有任何想要搞跨一个人的意思，我也没有这个精力，我只是希望，或许在几年以后，永远都不需要 PoH 这样的项目。这也正是我离开酷安的最大原因。我们正在黑暗中摸索前行。那就一条道走到光明吧。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rachelt.one/tags/%E9%9A%8F%E7%AC%94/"},{"name":"酷安","slug":"酷安","permalink":"https://blog.rachelt.one/tags/%E9%85%B7%E5%AE%89/"}]},{"title":"手把手教你搭建 Hexo 到 VPS","date":"2017-04-29T11:56:42.000Z","path":"articles/hexo-completely-tutorial/","text":"Hexo is a fast, simple &amp; powerful blog framework powered by Node.js.——摘自 Hexo 官网 Hexo 是一个强大的静态 Blog 框架，它具有极高的可扩展性，同时入门也十分简单，像是正在阅读的这篇文章，本身也就是 Hexo 托管，我每次写完文章甚至只需要输入一行代码就可以将其推送到服务器上。由于使用静态文件搭建主体， Blog 的启动尤其迅速，只要不像本咸鱼一样写垃圾代码一般可以在 500ms 内加载完毕。坏 WordPress 坏 Typecho 鉴于网络上能够找到的大部分中文快速入门质量参差不齐，有些逻辑混乱有些表意不清，本咸鱼就自己来写一个辣 说了这么多，快跟着下面的操作步骤，入教开始使用吧！ 0x00 基本要求0. PCWindows, Linux, macOS 随便选一个吧，能跑得动 Git 和 Node.js 就行，本文以 Windows 10 为例。1. VPS这一点就只能看个人喜好啰，像我这种咸鱼买的是 Vultr 的 $5 主机。有 $2.5 乞丐机的话谁买 $5 如果自己要买的话，戳这个链接然后充值 $10+ 可以给 Rachel 带来 $10 收益！反正都是要买的不如多花点钱是吧Vultr 邀请链接 0x01 本地 - 搭建 Git 和 Node.js 环境我们需要一个 Git 客户端，用来在 Windows 上使用 Git 命令行。Git - Downloads或者，如果是在 Linux 上的话，也可以使用包管理器来安装 git 包。在 Git 配置完之后，紧接着我们就需要装 Node.js ， Hexo 的基础，一个轻量的 JavaScript 运行时。Node.js - Downloads当然，你也可以用包管理器 install nodejs 。一切完成之后，进入下一步。 0x02 本地 - 使用 Node.js 安装 Hexo我们需要随便找个地方开启 Terminal (Git Bash) ，然后进入想要安装 Hexo 的那个文件夹。当然，也可以选择在建好文件夹之后右键 Git Bash Here 。总之，在进入文件夹之后，我们需要 npm install hexo-cli -g 在安装完成后，新建 Hexo 仓库 hexo init 直到你看见 INFO Start blogging with Hexo! 说明 Hexo 已经配置完毕，下一步 npm install 完成之后， Hexo 文件夹下面大概是这样的结构 . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 接着，我们输入 vim _config.yml 开始编辑 Hexo 的配置，或者使用 Notepad++ 等工具编辑而不用对初学者来说狗屎一样的命令行。请务必记住，在 YAML 文件中， 冒号后面有空格 。 … # Site title: Hexo # 页面标题 subtitle: Subtitle # 子标题 description: Here we go! # 页面描述，在一些主题中可以省略 author: John Doe # 作者 language: zh # 语言，依主题而定 timezone: Asia/Shanghai # 时区 … … # URL ## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39; url: http://yoursite.com # 域名 root: / # 在域名中的文件夹，如果不是主/子域名的话就需要填这项 … 完成之后，保存并退出，运行 Hexo 看看效果 hexo g &amp;&amp; hexo s 这个时候，访问 http://localhost:4000 如果出现了 Hexo 页面，说明已经配置成功了，去终端 Ctrl + C 停止然后继续下一步吧。 0x03 VPS - 安装 git-core 和 nginx在 VPS 端，使用包管理器安装 git-core 和 nginx 。之后，在用户的主目录新建一个空的 Git 仓库。 cd ~ mkdir hexo.git cd hexo.git git init --bare 以 root 用户的身份进入 /var/www ，然后新建一个文件夹，就名为 blog 好了，最后授予 user 这个用户完整的权限。 su cd /var/www mkdir blog chmod 0755 blog chown user:user -R /var/www/blog 0x04 本地 (可选) - 建立到 VPS 的链接 本步骤为可选，若 VPS 没有修改默认的端口并且没有使用 SSH Key ，或者已经有了远程 SSH 服务器，请跳过这一步。 首先，我们需要在本地用户的目录下，建立一个 .ssh 文件夹，然后向里面写入 config 。 cd ~ mkdir .ssh chmod 0755 .ssh vim .ssh/config 在里面输入如下内容： Host 127.0.0.1 # VPS 的 IP HostName 127.0.0.1 # VPS 的 IP User user # 用户 Port 1270 # SSH 端口 IdentityFile ~/.ssh/id_rsa # SSH Key 然后，重启 Git Bash ，试试看下面的代码能否正常运行 ssh user@127.0.0.1 若输入密码后能够进入终端页面，请进入下一步。 0x05 VPS - 配置更新事件 (hook) 这里的更新事件，指的是 Git hooks 中的 post-receive ，在我们向 VPS 推送更新的时候会被作为一个 sh 文件触发，因而语法与 sh 相同。 使用 ssh 命令登陆上 VPS 之后，输入如下命令 vim ~/hexo.git/hooks/post-receive 再将文件内容替换为 !/bin/bash GIT_REPO=~/hexo.git # 空 Git 仓库的文件夹，触发 hook 时已经存入了内容 TMP_GIT_CLONE=/tmp/hexo # 缓存文件夹，存在 /tmp 下可以随意读写 PUBLIC_WWW=/var/www/blog # 之前创建的 blog 文件夹，用作网站主目录 rm -rf $&#123;TMP_GIT_CLONE&#125; # 删除缓存的全部内容 git clone $GIT_REPO $TMP_GIT_CLONE # 将 Git 仓库被上传的内容写入缓存 rm -rf $&#123;PUBLIC_WWW&#125;/* # 删除网站主目录全部内容 cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; # 将缓存目录所有内容复制到主目录 0x06 VPS - 配置 NGINX NGINX 是一个功能强大的 HTTP 反向代理服务器，支持负载均衡等等特性，当然这篇文章不会讲而且语法特别垃圾是现在搭建 Web Server 的首选。 切换到 root 用户，进入到 NGINX 的配置目录，编辑默认配置文件 su cd /etc/nginx/sites-available vim default 在这个文件中，你可以看到 NGINX 默认的配置，我们则需要把这个默认的配置全部删掉改成自己的。正所谓 把别人做的巧克力融化了再凝固 就是自己做的巧克力了 server &#123; listen 80; listen [::]:80; # ====== 1 ====== server_name yoursite.com; # ====== 1 ====== return 301 https://$server_name$request_uri; &#125; server &#123; # SSL configuration listen 443 ssl; listen [::]:443 ssl; # Self signed certs generated by the ssl-cert package # Don&#39;t use them in a production server! # # include snippets/snakeoil.conf; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== # ====== 3 ====== ssl_certificate /etc/letsencrypt/live/yoursite.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/yoursite.com/privkey.pem; # ====== 3 ====== ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; # intermediate configuration. tweak to your needs. ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) add_header Strict-Transport-Security max-age=15768000; # OCSP Stapling --- # fetch OCSP records from URL in ssl_certificate and cache them ssl_stapling on; ssl_stapling_verify on; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; # ====== 1 ====== server_name yoursite.com; # ====== 1 ====== location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ &#123; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== access_log off; expires 1d; &#125; location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ &#123; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== access_log off; expires 10m; &#125; location / &#123; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== if (-f $request_filename) &#123; rewrite ^/(.*)$ /$1 break; &#125; &#125; &#125; 注：1: 域名2: 网页主目录，就是之前创建的 blog 文件夹3: 你的 SSL 证书和 SSL key又及：如果有能力，推荐使用 Mozilla 的 SSL 配置生成器 如果没有 SSL 证书或者不愿开 https ，以下是 http 的配置方案： server &#123; listen 80; listen [::]:80; # Self signed certs generated by the ssl-cert package # Don&#39;t use them in a production server! # # include snippets/snakeoil.conf; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; # ====== 1 ====== server_name yoursite.com; # ====== 1 ====== location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ &#123; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== access_log off; expires 1d; &#125; location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ &#123; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== access_log off; expires 10m; &#125; location / &#123; # ====== 2 ====== root /var/www/blog; # ====== 2 ====== if (-f $request_filename) &#123; rewrite ^/(.*)$ /$1 break; &#125; &#125; &#125; 完成之后，保存退出，重启 NGINX 。 /etc/init.d/nginx restart 0x07 本地 - Hexo deploy 设置是的，转了这么一大圈我们又回到了开始时的 _config.yml 。这一次，我们改动的不是那个页面设置，而是 Hexo 的上传配置。不过，在开始改动之前，我们先要安装一个用于 Git 上传的模块： hexo-deployer-git 。 npm install hexo-deployer-git --save 完成之后，进入 _config.yml 的编辑。 … deploy: type: git # 设置上传模块为 Git repo: user@127.0.0.1:hexo.git # 连接到 127.0.0.1 （换成 VPS 的 IP），使用 user 用户登录，上传到 hexo.git branch: master # 存储在 master 分支（主分支） … 保存，退出，然后再次进入 Git Bash ，向半个小时的劳动做一个总结。 0x08 本地 - 上传！同样在我们可爱的 Hexo 本地安装文件夹，输入 hexo clean &amp;&amp; hexo g 这样，清除缓存文件后，生成静态页面，然后 hexo s 进入 http://localhost:4000 ，最后看一眼预览。当确保一切无误…… hexo d 输入密码……当完成后，打开你的网页吧！ 0x09 完成之后Hexo 的基本使用非常简单，只需要 hexo new &quot;New Post&quot; 就能新建一篇文章，写完之后 hexo clean &amp;&amp; hexo g 再 hexo d 上传，期间可以 hexo s --debug 测试。想要使用主题的话，只需把主题文件夹丢到 Hexo 本地文件夹的 themes 然后在 _config.yml 里 theme: 后面改成主题就可以了。若有任何问题，请随时在下方评论区提出。 References: https://munen.cc/tech/Hexo-in-VPS.html https://hexo.io/docs/setup.html https://hexo.io/docs/deployment.html https://www.digitalocean.com/community/tutorials/how-to-create-a-blog-with-hexo-on-ubuntu-14-04 Thanks to: kotomei neoFelhz LetITFly Simonsmh AND YOU 注：排名不分先后。 EOF.","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.rachelt.one/tags/Hexo/"},{"name":"VPS","slug":"VPS","permalink":"https://blog.rachelt.one/tags/VPS/"}]},{"title":"Hello World","date":"2017-04-28T13:16:06.000Z","path":"articles/hello-world/","text":"The beginning of a new life. Hello, Hexo! （折腾 Hexo 得够久的，终于搞定辣I love DISQUS","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.rachelt.one/tags/Hexo/"}]}]